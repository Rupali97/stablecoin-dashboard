{"version":3,"sources":["chainConfig/ethereum.ts","chainConfig/maticMumbai.ts","chainConfig/goerli.ts","config.ts","protocol/ERC20.ts","protocol/deployments/abi.ts","utils/constants.ts","utils/provider.ts","protocol/index.tsx","state/chains/actions.ts","state/chains/hooks.ts","context/Provider/Provider.tsx","hooks/useCore.ts","views/Auth/index.tsx","styles/material-dashboard-react.js","styles/adminStyle.js","styles/components/sidebarStyle.js","views/dashboard/Sidebar.tsx","icons/tronIcon.jpeg","views/dashboard/index.tsx","components/Textfield.tsx","state/application/actions.ts","state/application/hooks.ts","utils/formatErrorMessage.ts","hooks/multisig/useMultiSig.tsx","state/transactions/actions.ts","hooks/useGetConfirmReq.ts","state/transactions/hooks.tsx","utils/formatBalance.ts","hooks/useGetTokenDetails.ts","hooks/useSubmitTransaction.ts","hooks/useConfirmTxn.ts","utils/index.tsx","components/ProgressModal.tsx","hooks/useGetAllTokenDetails.ts","hooks/tron/useSubmit.ts","hooks/tron/useConfirm.ts","hooks/tron/useGetTronTokenDetails.ts","hooks/tron/useGetTronOwners.ts","hooks/tron/useTronMultisig.ts","views/dashboard/Admin/index.tsx","components/Steps.tsx","hooks/useExecuteTxn.ts","hooks/tron/useExecute.ts","hooks/tron/useNoOfConfimReq.ts","components/ConfirmationStep.tsx","hooks/useGetOwners.ts","hooks/useGetTokenBalance.ts","hooks/tron/useGetTronTokenBalance.ts","views/dashboard/Burn/index.tsx","hooks/useFreezeToken.ts","hooks/useUnFreezeToken.ts","hooks/tron/useFreezeTokenTron.ts","hooks/tron/useUnFreezeTokenTron.ts","views/dashboard/Freeze/index.tsx","views/dashboard/Mint/index.tsx","views/dashboard/Stats/index.tsx","hooks/tron/useGetTronTransactionCount.ts","navigation.tsx","state/application/reducer.ts","state/transactions/reducer.ts","state/chains/reducer.ts","utils/chains/constant.ts","state/index.ts","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","context/Modals/Modals.tsx","components/Popups/TransactionSnackbar.tsx","components/Popups/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["configurations","ethereum","networkName","networkDisplayName","chainId","etherscanUrl","defaultProvider","deployments","require","refreshInterval","gasLimitMultiplier","blockchainToken","blockchainTokenName","blockchainTokenDecimals","networkSetupDocLink","supportedTokens","decimalOverrides","USDC","maticMumbai","goerli","getSupportedChains","Object","keys","map","i","Number","ERC20","address","provider","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFro","balance","formatUnits","supply","toFixed","name","type","anonymous","inputs","indexed","internalType","constant","outputs","payable","stateMutability","abis","IERC20","StablecoinImpl","MultiSig","tronMultiSigContract","tronStableCoins","label","chain","contractAdrs","DAY_IN_MS","WEEK_IN_MS","BigNumber","from","Date","now","Math","floor","pow","getDefaultProvider","config","_window","window","ethers","providers","Web3Provider","web3","currentProvider","JsonRpcProvider","Protocol","cfg","myAccount","signer","contracts","tokens","_activeNetwork","entries","chainIdString","networkConfig","deployment","abi","includes","ABIS","e","console","log","newProvider","Web3","getSigner","connect","values","token","dispatch","id","gas","multiplied","toNumber","gasLimit","updateChainId","createAction","updateBlockchain","useGetActiveBlockChain","useSelector","state","blockChain","active","useHandleBlokchainChange","useDispatch","useCallback","useGetActiveChainId","updateId","useGetUpdateActiveChainId","avaiableIds","changedId","chains","Context","createContext","core","ProtocolProvider","props","children","useState","setCore","useProvider","useAccount","useEffect","newCore","unlockWallet","Provider","value","useCore","useContext","Auth","useDisconnect","disconnect","setChain","showSnackbar","setShowSnackbar","isConnected","document","location","href","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","message","action","Fragment","style","color","className","Grid","container","item","xs","sm","Card","CardContent","Typography","align","gutterBottom","variant","component","marginBottom","display","justifyContent","chainStatus","onClick","tronWeb","padding","hexToRgb","input","replace","test","length","Error","first","second","last","toUpperCase","parseInt","drawerWidth","transition","marginRight","overflow","height","marginLeft","defaultFont","fontFamily","fontWeight","lineHeight","primaryColor","warningColor","dangerColor","successColor","infoColor","roseColor","grayColor","blackColor","whiteColor","primaryBoxShadow","boxShadow","infoBoxShadow","successBoxShadow","warningBoxShadow","dangerBoxShadow","roseBoxShadow","title","background","margin","paddingTop","borderTop","textDecoration","marginTop","minHeight","appStyle","theme","wrapper","position","top","mainPanel","breakpoints","up","width","overflowScrolling","content","sidebarStyle","drawerPaper","border","backgroundColor","bottom","left","zIndex","down","right","visibility","overflowY","textAlign","paddingRight","paddingLeft","transform","logo","logoLink","fontSize","logoLinkRTL","logoImage","maxHeight","img","verticalAlign","backgroundSize","backgroundPosition","opacity","list","paddingBottom","listStyle","itemLink","borderRadius","itemIcon","float","itemText","sidebarWrapper","fab","useStyles","makeStyles","styles","Sidebar","React","setState","toggleDrawer","event","key","classes","links","List","url","icon","r","setTimeout","reload","to","defaultAddress","hex","isActive","ListItem","button","Icon","classNames","ListItemText","primary","disableTypography","brand","Hidden","mdUp","implementation","Fab","size","outline","Drawer","anchor","paper","Divider","smDown","chainID","Dashbaord","tronObj","setTronObj","tronSnackbar","setTronSnackbar","checkIfTronConnected","obj","setInterval","base58","clearInterval","tronweb","TextField","required","select","onChange","target","option","MenuItem","alignItems","src","tronIcon","alt","slice","showBalance","Textfield","text","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","addPopup","removePopup","loaderVisibile","useAddPopup","useGetLoader","application","isVisible","useUpdateLoader","formatErrorMessage","toLowerCase","useGetRequiredCount","response","setResponse","fetchData","res","catch","err","useGetConfirmationCount","useNetwork","txnId","getConfirmationCount","count","useGetOwners","getOwners","useGetSingleTransaction","sendRes","txId","transactions","executed","addTransaction","updateTransaction","clearAllTransactions","finalizeTransaction","checkedTransaction","saveTxn","useGetConfirmReq","numConfirmationsRequired","useTransactionUpdater","transDetail","summary","approval","hash","_numConfirmations","_typeOfTx","_createdTime","_executed","_value","_token","txIndex","_executedTime","_to","txn","loading","success","txDetail","getBalance","decimals","getDisplayBalance","fractionDigits","formattedBalance","decimalsPointIndex","indexOf","error","formatToBN","split","beforeDecimals","afterDecimal","beforeDecimalsPrecisionText","afterDecimalsPrecisionText","fixedPrecisionValue","parseUnits","LOADING_DEFAULT_BASIC_STATE","isLoading","NON_LOADING_DEFAULT_BASIC_STATE","useGetTokenDetails","tokenDetails","setTokenDetails","fetch","utils","isAddress","useMultiSig","typeOfTx","destinationAdrs","updateLoader","activeID","creation","confirmedTime","confirmation","useTransactionAdder","onSuccess","onFailure","iface","Interface","data","encodeFunctionData","parseEther","submitTransaction","wait","tx","status","transactionCount","txnsCount","transactionHash","stack","useConfirmTxn","confirmCallback","index","confirmTransaction","reason","truncateMiddle","fullStr","strLen","separator","sepLen","charsToShow","frontChars","ceil","backChars","substr","DialogTitle","withStyles","createStyles","root","spacing","closeButton","palette","grey","other","IconButton","DialogContent","MuiDialogContent","MuiDialogActions","ProgressModal","currentLoaderState","setOpen","handleClose","Dialog","fullWidth","dividers","ariaLabel","wrapperStyle","wrapperClass","radius","visible","useGetAllTokenDetails","forEach","bal","prev","_","uniqWith","arrVal","othVal","useSubmit","parameter","transactionBuilder","triggerSmartContract","triggerContractRes","transaction","raw_data","at","send","trx","getTransaction","txnInfo","ret","contractRet","useConfirm","useGetTronTokenDetails","call","useGetTronOwners","fetchOwners","txnRes","fromHex","useTronGetIsExecuted","setTronIsExecuted","instance","useGetTronConfirmationCount","table","minWidth","Admin","ethTxns","tronTxns","chainName","contractOwners","adddressToAdd","setAddressToAdd","adddressRemove","setAddressToRemove","noOfConfirmations","setNoOfConfirmations","finalEthTxns","setFinalEthTxns","finalTronTxns","setFinalTronTxns","addOwnerAction","useSubmitTransaction","removeOwnerAction","noConfirmAction","setConfirmationCount","setIsExecuted","confirmReq","confirmTxnAction","allTokensTotalSupply","chaindId","addTronOwnerAction","removeTronOwnerAction","noConfirmActionTron","confirmTronTxnAction","allTronTokensTotalSupply","tronContractOwners","confirmTronRequired","useTronGetRequiredCount","numOfConfirmationCountTron","isTronExecuted","sortTransactions","toAdrs","typeOfTxn","typeOfTxnID","mutlisigAddr","arr1","arr2","submitResponse","push","numConfirmations","tronArr1","toHex","tronArr2","disableChangeConfirmCount","disableAddOwner","disableRemoveOwner","helperText","Button","disabled","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","sort","a","b","row","confirmData","confirmCount","confirmHash","concat","details","scope","handleConfirm","singleHash","rel","actionsContainer","resetContainer","getDate","val","timestamp","toString","date","_moment","unix","utc","format","getStepContent","step","stepData","submitHash","submitFrom","submitTime","timeStamp","Steps","stepState","activeStep","setStepLabelColor","steps","Stepper","orientation","Step","StepLabel","StepContent","useExecuteTxn","executeCallback","executeTransaction","useExecute","useNoOfConfimReq","ConfirmationStep","allTransactions","fetchTronTokenDetails","finalData","setFinalData","finalTronData","setFinalTronData","testOwners","executeTxAction","blockNumber","returnRes","useGetTxnFromHash","noOfConfirmReq","executeTronTxnAction","setTronConfirmationCount","getFinalData","ConfirmTxn","executeTxn","timeAgo","fromNow","formatEther","txns","isExecuted","submitTo","Accordion","AccordionSummary","AccordionDetails","flex","flexDirection","useGetTokenBalance","stableCoin","useGetTronTokenBalance","fetchTronTokenBal","Burn","setAddress","setAmount","setStableCoin","stableCoinDetails","setStableCoinDetails","burnTokenAction","submitTronTxnAction","getTokenDetails","ethTxnsArr","tronTxnsArr","submitTx","handleCoinChange","disableSubmitBtn","coin","useFreezeToken","freeze","useUnFreezeToken","unfreeze","useFreezeTokenTron","useUnFreezeTokenTron","Freeze","addressToFreeze","setAddressToFreeze","addressToUnFreeze","setAddressToUnFreeze","stableCoinUnfreeze","setStableCoinUnfreeze","freezeAction","unFreezeAction","freezeActionTron","unFreezeActionTron","disableFreeze","disableUnFreeze","Mint","mintTokenAction","disableMint","Stats","useGetTronTransactionCount","Navigation","allApiTxns","setAllApiTxns","allApiTronTxns","setAllApiTronTxns","tronTxnCount","getSubmitTxnsFromAPI","getTronTxnsFromAPI","axios","get","process","arr","result","functionName","hexToNumberString","newState","timnow","owner_address","txID","path","element","createReducer","popupList","walletModalOpen","settingsMenuOpen","builder","addCase","payload","max","removeAfterMs","filter","popup","nanoid","show","p","execution","txs","lastCheckedBlockNumber","isEmpty","chainsConfig","blockChainConfig","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","thunk","save","states","createLogger","preloadedState","load","VISIBILITY_STATE_SUPPORTED","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","activeChainId","blockNumberCallback","getBlockNumber","then","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","useDebounce","lastBlockNumber","useBlockNumber","receipt","blocksSinceCheck","minutesPending","getTime","addedTime","shouldCheck","getTransactionReceipt","blockHash","contractAddress","transactionIndex","Updaters","onPresent","onDismiss","StyledModalWrapper","styled","div","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","undefined","isValidElement","cloneElement","AnchorTag","SnackBarInnerContainer","SnackBarBody","SnackBarParent","CustomizedSnackbars","handleCancel","openSnackbar","isScucess","autoHideDuration","TransitionComponent","Slide","direction","SnackBody","Popups","activePopups","useMemo","useActivePopups","TransactionSnackbar","notificationCount","dotenv","configureChains","mainnet","alchemyProvider","apiKey","connectors","connectorsForWallets","groupName","wallets","wallet","injected","rainbow","metaMask","ledger","wagmiClient","createClient","autoConnect","WalletProvider","client","coolMode","lightTheme","accentColor","Providers","AppContent","newNetwork","oldNetwork","setChainId","maxSnack","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.45a16a91.chunk.js","sourcesContent":["import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    ethereum: {\n        networkName: 'Ethereum',\n        networkDisplayName: 'Ethereum',\n        chainId: 1,\n        etherscanUrl: 'https://etherscan.io',\n        defaultProvider:'https://silent-black-frost.quiknode.pro/6fbee126d2692f4c84d1c11167b0d7c4a77b8fb5/',\n        deployments: require('../protocol/deployments/ethereum.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'MATIC',\n        blockchainTokenName: 'MATIC',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"DBT\"\n        ], \n        decimalOverrides: {\n          'ARTH-DP': 18,\n          USDC: 6,\n          \"DBT\": 18\n        },\n    },\n}\n\nexport default configurations;","import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    80001: {\n        networkName: 'Matic Mumbai Testnet',\n        networkDisplayName: 'Polygon testnet',\n        chainId: 80001,\n        etherscanUrl: 'https://mumbai.polygonscan.com',\n        defaultProvider:\n          'https://matic-mumbai.chainstacklabs.com',\n        deployments: require('../protocol/deployments/maticMumbai.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'MATIC',\n        blockchainTokenName: 'MATIC',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"USDA\"\n        ], \n        decimalOverrides: {\n          'ARTH-DP': 18,\n          USDC: 6,\n          \"DBT\": 18\n        },\n      },\n}\n\nexport default configurations;","import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    5: {\n        networkName: 'Goerli Testnet',\n        networkDisplayName: 'Goerli testnet',\n        chainId: 5,\n        etherscanUrl: 'https://goerli.etherscan.io',\n        defaultProvider:\n          'https://goerli.infura.io/v3/3a9a6018905e45669f505505420d81d6',\n        deployments: require('../protocol/deployments/goerli.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'ETH',\n        blockchainTokenName: 'ETH',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"USDB\",\n          \"USDA\",\n          \"USDF\"\n        ], \n        decimalOverrides: {\n\n        },\n      },\n}\n\nexport default configurations;","import { Configuration } from './utils/interface';\nimport ethereum from './chainConfig/ethereum'\nimport maticMumbai from './chainConfig/maticMumbai'\nimport goerli from './chainConfig/goerli';\n\nconst configurations: { [env: string]: Configuration } = {\n  ...ethereum,\n  ...maticMumbai,\n  ...goerli\n};\n\nexport default configurations;\n\nexport const getSupportedChains = (): number[] =>\n  Object.keys(configurations).map((i) => Number(i));\n","import { BigNumber, Contract } from 'ethers';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { TransactionResponse } from '@ethersproject/providers';\n\nclass ERC20 {\n  protected contract: Contract;\n\n  symbol: string;\n  address: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(\n    sender: string,\n    recipient: string,\n    amount: BigNumber,\n  ): Promise<TransactionResponse> {\n    return this.contract.transferFro(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nexport const ABI = [\n  {\n    name: 'Approval',\n    type: 'event',\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'spender', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transfer',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: 'address', name: 'owner', type: 'address' },\n      { internalType: 'address', name: 'spender', type: 'address' },\n    ],\n    name: 'allowance',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'spender', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'sender', type: 'address' },\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transferFrom',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","import IERC20 from \"./abi/IERC20.json\";\n\nimport ERC20 from \"./abi/ERC20.json\";\nimport { IABIS } from \"../../utils/interface\";\nimport StablecoinImpl from \"./abi/StablecoinImpl.json\";\nimport MultiSig from \"./abi/MultiSig.json\";\n\nconst abis: IABIS = {\n  IERC20,\n  StablecoinImpl,\n  MultiSig,\n  ERC20,\n};\n\nexport default abis;\n","import { BigNumber } from 'ethers';\nimport {\n  BasicState,\n  LockedState,\n  RewardEarned,\n  ApplicationState,\n  TransactionState,\n  DateInput,\n  SingleDateInput,\n  EthereumConfig,\n  BasicStateString,\n  PoolTokenRateState,\n  DebtPoolTokenRateState\n} from './interface';\n\nexport const tronMultiSigContract = \"TAtV3NzLMdD13WCcD88jc1arp9cuq1Pa23\"\n\nexport const tronStableCoins = [\n  {\n    label: \"TRUSDA\",\n    symbol: \"TRUSDA\",\n    chain: 'Nile',\n    contractAdrs: 'TZDqfeWfSdKSpz5qPj4txXdrWJaCmuu8Kz'\n  },\n  {\n    label: \"TRUSDB\",\n    symbol: \"TRUSDB\",\n    chain: 'Nile',\n    contractAdrs: 'TWsxx7jHk4p8yQx34R2HxWUoAa5qjAdrto'\n  }\n]\n\nexport const DAY = 86400;\nexport const DAY_IN_MS = 86400000;\n\nexport const YEAR = 365 * 86400;\nexport const YEAR_IN_MS = YEAR * 1000;\n\nexport const MONTH = 31 * 24 * 60 * 60;\nexport const MONTH_IN_MS = MONTH * 1000;\n\nexport const WEEK = 7 * 86400;\nexport const WEEK_IN_MS = 7 * 86400000;\n\nexport const MAXTIME = 4 * 365 * 86400;\nexport const MAXTIME_IN_MS = 4 * 365 * 86400000;\n\nexport const LOADING_DEFAULT_BASIC_STATE: BasicState = {\n  isLoading: true,\n  value: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEFAULT_BASIC_STATE: BasicState = {\n  isLoading: false,\n  value: BigNumber.from(0)\n};\n\nexport const LOADING_DEBTPOOLTOKEN_RATE_STATE: DebtPoolTokenRateState = {\n  isLoading: true,\n  poolToken: BigNumber.from(0),\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEBTPOOLTOKEN_RATE_STATE: DebtPoolTokenRateState = {\n  isLoading: false,\n  arth: BigNumber.from(0),\n  poolToken: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_LOCKED_STATE: LockedState = {\n  isLoading: true,\n  lockedOn: BigNumber.from(0),\n  lockedUntil: BigNumber.from(0),\n  amountLocked: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_BASIC_STATE_STRING: BasicStateString = {\n  isLoading: true,\n  value: \"\",\n};\n\nexport const LOADING_POOLTOKEN_RATE_STATE: PoolTokenRateState = {\n  isLoading: true,\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0),\n  scallop: BigNumber.from(0),\n};\n\nexport const NON_LOADING_POOLTOKEN_RATE_STATE: PoolTokenRateState = {\n  isLoading: false,\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0),\n  scallop: BigNumber.from(0),\n};\n\nexport const NON_LOADING_DEFAULT_BASIC_STATE_STRING: BasicStateString = {\n  isLoading: false,\n  value: \"0\",\n};\n\nexport const NON_LOADING_DEFAULT_LOCKED_STATE: LockedState = {\n  isLoading: false,\n  lockedOn: BigNumber.from(0),\n  lockedUntil: BigNumber.from(0),\n  amountLocked: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_REWARD_EARNED: RewardEarned = {\n  isLoading: true,\n  value: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEFAULT_REWARD_EARNED: RewardEarned = {\n  isLoading: false,\n  value: BigNumber.from(0)\n};\n\nexport const DEFAULT_ETHEREUM_CONFIG: EthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 1,\n  defaultGas: '6000000',\n  defaultGasPrice: '1000000000000',\n  ethereumNodeTimeout: 10000,\n};\n\nexport const DEFAULT_DATEINPUT_STATE: DateInput = {\n  startDate: new Date(),\n  endDate: new Date(\n    Date.now() % DAY_IN_MS === 0 ? Date.now() + WEEK_IN_MS + DAY_IN_MS : (Math.floor(Date.now() / DAY_IN_MS) * DAY_IN_MS) + WEEK_IN_MS + DAY_IN_MS\n  )\n};\n\nexport const DEFAULT_SINGLE_DATEINPUT_STATE: SingleDateInput = new Date(\n  Date.now() % DAY_IN_MS === 0 ? Date.now() + WEEK_IN_MS + DAY_IN_MS : (Math.floor(Date.now() / DAY_IN_MS) * DAY_IN_MS) + WEEK_IN_MS + DAY_IN_MS\n);\n\nexport const DECIMALS_18 = BigNumber.from(10).pow(18);\n\nexport const INITIAL_APP_STATE: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n  isVisible: false\n};\n\nexport const INITIAL_TRANSACTION_STATE: TransactionState = {};\n\nexport const BNZERO = BigNumber.from(0);\n\nexport const noOp = () => { };\n\nexport const handleDate = (date: any) => {\n  return new Date(date.setHours(0, 0, 0, 0));\n}\n\nexport const addDays = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + (DAY_IN_MS) * no));\n}\n\nexport const addWeeks = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + (WEEK_IN_MS) * no));\n}\n\nexport const addMonths = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + MONTH_IN_MS * no));\n}\n\nexport const addYears = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + YEAR_IN_MS * no));\n}\n","import { ethers } from 'ethers';\n\nimport { Configuration } from './interface';\nimport { web3ProviderFrom } from './etherUtils';\n\nexport function getDefaultProvider(config: Configuration): ethers.providers.BaseProvider {\n  // @ts-ignore\n  const _window: { ethereum?: any, web3?: any } = window;\n\n  // Modern dapp browsers.\n  if (_window.ethereum) {\n    try {\n      // Request account access\n      // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      // App.YOUR_ADDRESS = accounts[0]\n    } catch (error) {\n      // User denied account access...\n      console.error(\"User denied account access\");\n    }\n\n    return new ethers.providers.Web3Provider(_window.ethereum);\n  }\n\n  // Legacy dapp browsers...\n  if (_window.web3) {\n    return new ethers.providers.Web3Provider(_window.web3.currentProvider);\n  }\n\n  // If no injected web3 instance is detected, fall back to backup node.\n  return new ethers.providers.JsonRpcProvider(config.defaultProvider);\n}\n\nexport function getGanacheProvider(config: Configuration): ethers.providers.JsonRpcProvider {\n  return new ethers.providers.JsonRpcProvider(\n    web3ProviderFrom(config.defaultProvider),\n    config.chainId\n  );\n}\n","import {BigNumber, Contract, ethers, Overrides} from 'ethers';\n\nimport ERC20 from './ERC20';\nimport ABIS from './deployments/abi';\nimport {configKeys, Configuration} from '../utils/interface';\nimport {getDefaultProvider} from '../utils/provider';\nimport Web3 from \"web3\";\n\n/**\n * An API module of ARTH contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class Protocol {\n  // @ts-ignore\n  myAccount: string;\n\n  // @ts-ignore\n  web3: Web3;\n\n  signer?: ethers.Signer;\n\n  config: {\n    [chainId: number]: Configuration;\n  };\n\n  contracts: {\n    [chainId: number]: { [name: string]: Contract };\n  };\n\n  // @ts-ignore\n  provider: ethers.providers.BaseProvider;\n\n  tokens: {\n    [chainId: number]: { [name: string]: ERC20 };\n  };\n\n  _activeNetwork: number;\n\n  constructor(cfg: { [chainId: number]: Configuration }, chainId: number) {\n    this._activeNetwork = chainId;\n    this.contracts = {};\n    this.tokens = {};\n    this.tokens = {};\n\n    try {\n      for (const [chainIdString, config] of Object.entries(cfg)) {\n        const chainId = Number(chainIdString);\n        const {deployments} = config;\n        this.provider = getDefaultProvider(config);\n        const networkConfig: { [name: string]: Contract } = {};\n        const tokens: { [name: string]: ERC20 } = {};\n\n        for (const [name, deployment] of Object.entries(deployments)) {\n          if (!deployment.abi) continue;\n          //to push all erc20 tokens in tokens array\n          if (cfg[chainId].supportedTokens.includes(name)) {\n            tokens[name] = new ERC20(\n              deployments[name].address,\n              this.provider,\n              name,\n              cfg[chainId].decimalOverrides[name] || 18,\n            );\n          }\n          //to push all others as contracts\n          networkConfig[name] = new Contract(\n            deployment.address,\n            ABIS[deployment.abi],\n            this.provider,\n          );\n\n        }\n        this.contracts[chainId] = networkConfig;\n        this.tokens[chainId] = tokens;\n      }\n    } catch (e) {\n      console.log('Error in contracts mapping', e);\n    }\n\n    this.config = cfg;\n  };\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  };\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    // @ts-ignore\n    const newProvider = new ethers.providers.Web3Provider(provider);\n    this.web3 = new Web3(provider);\n    this.provider = newProvider;\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [chainId, contracts] of Object.entries(this.contracts)) {\n      for (const [name, contract] of Object.entries(contracts)) {\n        this.contracts[Number(chainId)][name] = contract.connect(this.signer);\n      }\n    }\n\n    for (const tokens of Object.values(this.tokens)) {\n      for (const token of Object.values(tokens)) {\n        if (token && token.address) token.connect(this.signer);\n      }\n    }\n  }\n\n  updateActiveNetwork(chainId: number, dispatch: any) {\n    this._activeNetwork = chainId;\n  }\n\n  getConfig(id: configKeys, chainId: number) {\n    return this.config[chainId][id];\n  }\n\n  gasOptions(gas: BigNumber = BigNumber.from('6000000')): Overrides {\n    const multiplied = Math.floor(gas.toNumber() * this.config[137]['gasLimitMultiplier']);\n    return {\n      gasLimit: BigNumber.from(multiplied),\n    };\n  };\n\n}\n","import {createAction} from '@reduxjs/toolkit';\n\nexport const updateChainId = createAction<{ chainId: number }>('app/updateChainId');\n\nexport const updateBlockchain = createAction<{chain: string}>('app/updateBlockchain')\n\nexport const updateAvailableChains = createAction<{ chains: Array<number> }>(\n  'app/updateAvailableChains',\n);\n","import {useCallback} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {getSupportedChains} from '../../config';\nimport {AppDispatch, AppState} from '../index';\n\nimport {updateBlockchain, updateChainId} from './actions';\n\n\nexport function useGetActiveBlockChain(): string {\n\n  const chain = useSelector((state: AppState) => {\n    return state.blockChain.active\n  })\n  return chain\n}\n\n\nexport function useHandleBlokchainChange(): (chain: string) => void{\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chain: string) => {\n      dispatch(\n        updateBlockchain({\n          chain\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n}\n\n/**\n * Returns the active chainId\n */\nexport function useGetActiveChainId(): number {\n  const updateId = useGetUpdateActiveChainId();\n  // const updateIds = useUpdateAvailableChains();\n  const id = useSelector((state: AppState) => {\n    return state.chainId.active;\n  });\n  const avaiableIds = getSupportedChains();\n  if (avaiableIds.includes(id)) {\n    return id;\n  } else {\n    const changedId = avaiableIds[0];\n    // updateIds(avaiableIds);\n    updateId(changedId);\n    return changedId;\n  }\n}\n\n/**\n * Used to update the active chainId\n * @param chainId to update the active chainId\n */\nexport function useGetUpdateActiveChainId(): (chainId: number) => void {\n  const chains = getSupportedChains();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chainId: number) => {\n      if (chains.includes(chainId)) {\n        dispatch(\n          updateChainId({\n            chainId: chainId,\n          }),\n        );\n      } else {\n        console.log(`chainId: ${chainId} is not supported on this app`);\n      }\n    },\n    [chains, dispatch],\n  );\n}\n\n/**\n * Used to update the avaiable Chains\n */\n/*export function useGetAvaiableChains(): Array<number> {\n  return useSelector((state: AppState) => {\n    return state.chains.availableNetworks;\n  });\n}*/\n\n/**\n * Used to add the new chain to the available chains array\n * @param chainId to add it to available chains array\n */\n\n/*export function useAddAvaiableChains(): (chainId: number) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const chains = useSelector((state: AppState) => {\n    return state.chains.availableNetworks;\n  });\n\n  return useCallback(\n    (chainId: number) => {\n      if (chains.includes(chainId)) {\n        console.log(`Trying to add the already present chainId ${chainId}`);\n        return;\n      } else {\n        const updatingChains = chains;\n        updatingChains.push(chainId);\n        dispatch(\n          updateAvailableChains({\n            chains: updatingChains,\n          }),\n        );\n      }\n    },\n    [chains, dispatch],\n  );\n}*/\n\n/*export function useUpdateAvailableChains(): (chainId: number[]) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chainId: number[]) => {\n      dispatch(\n        updateAvailableChains({\n          chains: chainId,\n        }),\n      );\n    },\n    [dispatch],\n  );\n}*/\n","import {useWallet} from 'use-wallet';\nimport React, {createContext, useEffect, useState} from 'react';\nimport { useProvider } from 'wagmi'\nimport { useAccount } from 'wagmi'\n\nimport config from '../../config';\nimport {Protocol} from '../../protocol';\nimport {useGetActiveChainId} from '../../state/chains/hooks';\nimport {useDispatch} from \"react-redux\";\n\nexport interface ProtocolContext {\n  core: Protocol;\n}\n\n// @ts-ignore\nexport const Context = createContext<ProtocolContext>({core: null});\n\ninterface IProps {\n  children: any;\n}\n\nexport const ProtocolProvider = (props: IProps) => {\n  const {children} = props;\n  const chainId = useGetActiveChainId();\n  // const {ethereum} = useWallet();\n  const [core, setCore] = useState<Protocol>();\n  const dispatch = useDispatch();\n  const provider = useProvider()\n  const { address: account } = useAccount()\n\n  // console.log('ethereum', ethereum)\n  useEffect(() => {\n    console.log(\"provider\", !core, config, account)\n    if (!core && config) {\n      const newCore = new Protocol(config, chainId);\n      console.log(\"provider if1\", newCore)\n\n      if (account) {\n        newCore.unlockWallet(window.ethereum, account);\n      }\n      setCore(newCore);\n    } else if (account && core) {\n      console.log(\"provider elseif\")\n\n      core.unlockWallet(window.ethereum, account);\n    }\n  }, [account, core, dispatch, window.ethereum, chainId]);\n\n  // @ts-ignore\n  return <Context.Provider value={{core}}>{children}</Context.Provider>;\n};\n","import { useContext } from 'react';\n\nimport { Context } from '../context/Provider';\n\nconst useCore = () => {\n  const { core } = useContext(Context);\n  return core;\n};\n\nexport default useCore;\n","import React, { useEffect, useState } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Snackbar,\n  Grid,\n} from \"@material-ui/core\";\nimport validator from \"validator\";\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\nimport { useDisconnect } from 'wagmi'\nimport { useAccount, useSwitchNetwork, useNetwork } from 'wagmi'\n\nimport '../../styles/authStyle.css'\nimport { useHandleBlokchainChange } from '../../state/chains/hooks';\nimport useCore from '../../hooks/useCore';\n\nfunction Auth() {\n  const { disconnect } = useDisconnect()\n  const setChain = useHandleBlokchainChange()\n  const [showSnackbar, setShowSnackbar] = useState<boolean>(false)\n  const { isConnected } = useAccount()\n  const {myAccount} = useCore()\n\n\n  const loginWithTron = () => {\n    if(!window.tronWeb){\n      setShowSnackbar(true)\n      \n    }else{\n      console.log(\"show account\")\n      setChain(\"Nile\");\n      document.location.href = \"\"\n    }\n    \n  }\n\n  if(isConnected){\n    document.location.href = \"\"\n    \n  }\n\n  return (\n    <div id={'auth'}>\n       {\n        showSnackbar && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={showSnackbar}\n            onClose={() => setShowSnackbar(false)}\n            message={`Please login to TronLink extention wallet first. If you don't have then please download from the link below!`}\n            action={\n              <React.Fragment>\n                <a style={{color: '#fff'}} href={'https://chrome.google.com/webstore/detail/tronlink/ibnejdfjmmkpcnlpebklmnkoeoihofec'}>Tronlink wallet</a>\n              </React.Fragment>\n            }\n          />\n      }\n       <div className=\"auth-container\">\n      <Grid container>\n        <Grid item xs={12} sm={3}></Grid>\n        <Grid item xs={12} sm={6}>\n          <Card className=\"auth-container-card\">\n            <CardContent>\n              <Typography align={\"center\"} gutterBottom variant=\"h5\" component=\"h2\">\n                Welcome to Stablecoin Dashboard\n              </Typography>\n              <Typography align={\"center\"} variant=\"body2\" color=\"textSecondary\" style={{marginBottom: '60px'}} >\n                <p>\n                  Please login to one of the wallet below.\n                </p>\n              </Typography>\n              <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                <div>\n                  <ConnectButton chainStatus={\"none\"} />\n                </div>\n                <div>\n                  <button\n                    onClick={loginWithTron}\n                    className={\"tronlinkBtn\"}\n                    style={{padding: '11px'}}\n                  >\n                    Tronlink Wallet\n                  </button>\n                </div>\n              </div>\n              \n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={3}></Grid>\n      </Grid>\n     \n    </div>\n    </div>\n  )\n}\n\nexport default Auth","/*!\n\n =========================================================\n * Material Dashboard React - v1.8.0 based on Material Dashboard - v1.2.0\n =========================================================\n\n * Product Page: http://www.creative-tim.com/product/material-dashboard-react\n * Copyright 2019 Creative Tim (http://www.creative-tim.com)\n * Licensed under MIT (https://github.com/creativetimofficial/material-dashboard-react/blob/master/LICENSE.md)\n\n =========================================================\n\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n */\n\n// ##############################\n// // // Function that converts from hex color to rgb color\n// // // Example: input = #9c27b0 => output = 156, 39, 176\n// // // Example: input = 9c27b0 => output = 156, 39, 176\n// // // Example: input = #999 => output = 153, 153, 153\n// // // Example: input = 999 => output = 153, 153, 153\n// #############################\nconst hexToRgb = input => {\n  input = input + \"\";\n  input = input.replace(\"#\", \"\");\n  let hexRegex = /[0-9A-Fa-f]/g;\n  if (!hexRegex.test(input) || (input.length !== 3 && input.length !== 6)) {\n    throw new Error(\"input is not a valid hex color.\");\n  }\n  if (input.length === 3) {\n    let first = input[0];\n    let second = input[1];\n    let last = input[2];\n    input = first + first + second + second + last + last;\n  }\n  input = input.toUpperCase(input);\n  let first = input[0] + input[1];\n  let second = input[2] + input[3];\n  let last = input[4] + input[5];\n  return (\n    parseInt(first, 16) +\n    \", \" +\n    parseInt(second, 16) +\n    \", \" +\n    parseInt(last, 16)\n  );\n};\n\n// ##############################\n// // // Variables - Styles that are used on more than one component\n// #############################\n\nconst drawerWidth = 220;\n\nconst transition = {\n  transition: \"all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)\"\n};\n\nconst container = {\n  padding: \"30px 15px\",\n  marginRight: \"auto\",\n  overflow: 'scroll',\n  height: '100%',\n  marginLeft: \"auto\"\n};\n\nconst defaultFont = {\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  fontWeight: \"300\",\n  lineHeight: \"1.5em\"\n};\n\nconst primaryColor = [\"#6c5fc7\", \"#5a4eb2\", \"#3e319b\", \"#af2cc5\"];\nconst warningColor = [\"#ff9800\", \"#ffa726\", \"#fb8c00\", \"#ffa21a\"];\nconst dangerColor = [\"#f44336\", \"#ef5350\", \"#e53935\", \"#f55a4e\"];\nconst successColor = [\"#4caf50\", \"#66bb6a\", \"#43a047\", \"#5cb860\"];\nconst infoColor = [\"#00acc1\", \"#26c6da\", \"#00acc1\", \"#00d3ee\"];\nconst roseColor = [\"#e91e63\", \"#ec407a\", \"#d81b60\", \"#eb3573\"];\nconst grayColor = [\n  \"#999\",\n  \"#777\",\n  \"#3C4858\",\n  \"#AAAAAA\",\n  \"#D2D2D2\",\n  \"#DDD\",\n  \"#b4b4b4\",\n  \"#555555\",\n  \"#333\",\n  \"#a9afbb\",\n  \"#eee\",\n  \"#e7e7e7\"\n];\nconst blackColor = \"#000\";\nconst whiteColor = \"#FFF\";\n\nconst boxShadow = {\n  boxShadow:\n    \"0 10px 30px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 4px 25px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\"\n};\n\nconst primaryBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(primaryColor[0]) +\n    \",.4)\"\n};\nconst infoBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(infoColor[0]) +\n    \",.4)\"\n};\nconst successBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(successColor[0]) +\n    \",.4)\"\n};\nconst warningBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(warningColor[0]) +\n    \",.4)\"\n};\nconst dangerBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(dangerColor[0]) +\n    \",.4)\"\n};\nconst roseBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(roseColor[0]) +\n    \",.4)\"\n};\n\nconst warningCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + warningColor[1] + \", \" + warningColor[2] + \")\",\n  ...warningBoxShadow\n};\nconst successCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + successColor[1] + \", \" + successColor[2] + \")\",\n  ...successBoxShadow\n};\nconst dangerCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + dangerColor[1] + \", \" + dangerColor[2] + \")\",\n  ...dangerBoxShadow\n};\nconst infoCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + infoColor[1] + \", \" + infoColor[2] + \")\",\n  ...infoBoxShadow\n};\nconst primaryCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + primaryColor[1] + \", \" + primaryColor[2] + \")\",\n  ...primaryBoxShadow\n};\nconst roseCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + roseColor[1] + \", \" + roseColor[2] + \")\",\n  ...roseBoxShadow\n};\n\nconst cardActions = {\n  margin: \"0 20px 10px\",\n  paddingTop: \"10px\",\n  borderTop: \"1px solid \" + grayColor[10],\n  height: \"auto\",\n  ...defaultFont\n};\n\nconst cardHeader = {\n  margin: \"-20px 15px 0\",\n  borderRadius: \"3px\",\n  padding: \"15px\"\n};\n\nconst card = {\n  display: \"inline-block\",\n  position: \"relative\",\n  width: \"100%\",\n  margin: \"25px 0\",\n  boxShadow: \"0 1px 4px 0 rgba(\" + hexToRgb(blackColor) + \", 0.14)\",\n  borderRadius: \"3px\",\n  color: \"rgba(\" + hexToRgb(blackColor) + \", 0.87)\",\n  background: whiteColor\n};\n\nconst defaultBoxShadow = {\n  border: \"0\",\n  borderRadius: \"3px\",\n  boxShadow:\n    \"0 10px 20px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 3px 20px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\",\n  padding: \"10px 0\",\n  transition: \"all 150ms ease 0s\"\n};\n\nconst title = {\n  color: grayColor[2],\n  textDecoration: \"none\",\n  fontWeight: \"300\",\n  marginTop: \"30px\",\n  marginBottom: \"25px\",\n  minHeight: \"32px\",\n  fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n  \"& small\": {\n    color: grayColor[1],\n    fontWeight: \"400\",\n    lineHeight: \"1\"\n  }\n};\n\nconst cardTitle = {\n  ...title,\n  marginTop: \"0\",\n  marginBottom: \"3px\",\n  minHeight: \"auto\",\n  \"& a\": {\n    ...title,\n    marginTop: \".625rem\",\n    marginBottom: \"0.75rem\",\n    minHeight: \"auto\"\n  }\n};\n\nconst cardSubtitle = {\n  marginTop: \"-.375rem\"\n};\n\nconst cardLink = {\n  \"& + $cardLink\": {\n    marginLeft: \"1.25rem\"\n  }\n};\n\nexport {\n  hexToRgb,\n  //variables\n  drawerWidth,\n  transition,\n  container,\n  boxShadow,\n  card,\n  defaultFont,\n  primaryColor,\n  warningColor,\n  dangerColor,\n  successColor,\n  infoColor,\n  roseColor,\n  grayColor,\n  blackColor,\n  whiteColor,\n  primaryBoxShadow,\n  infoBoxShadow,\n  successBoxShadow,\n  warningBoxShadow,\n  dangerBoxShadow,\n  roseBoxShadow,\n  warningCardHeader,\n  successCardHeader,\n  dangerCardHeader,\n  infoCardHeader,\n  primaryCardHeader,\n  roseCardHeader,\n  cardActions,\n  cardHeader,\n  defaultBoxShadow,\n  title,\n  cardTitle,\n  cardSubtitle,\n  cardLink\n};\n","import {\n      drawerWidth,\n      transition,\n      container\n    } from \"./material-dashboard-react.js\";\n    \n    const appStyle = theme => ({\n      wrapper: {\n        position: \"relative\",\n        top: \"0\",\n        height: \"100%\"\n      },\n      mainPanel: {\n        [theme.breakpoints.up(\"md\")]: {\n          width: `calc(100% - ${drawerWidth}px)`\n        },\n        overflow: \"auto\",\n        position: \"relative\",\n        float: \"right\",\n        ...transition,\n        height: \"100%\",\n        width: \"100%\",\n        overflowScrolling: \"touch\"\n      },\n      content: {\n        position: 'relative',\n        // marginTop: \"70px\",\n        // padding: \"30px 0\",\n        height: '100%',\n        // minHeight: \"calc(100vh - 123px)\"\n      },\n      container,\n      map: {\n        marginTop: \"70px\"\n      }\n    });\n    \n    export default appStyle;\n    ","import {\n  drawerWidth,\n  transition,\n  defaultFont,\n  whiteColor,\n  grayColor,\n  blackColor,\n  hexToRgb\n} from \"../material-dashboard-react.js\";\n\nconst sidebarStyle = theme => ({\n  drawerPaper: {\n    border: \"none\",\n    position: \"fixed\",\n    top: \"0\",\n    backgroundColor: '#2d004c',\n    bottom: \"0\",\n    left: \"0\",\n    zIndex: \"1\",\n    width: drawerWidth,\n    [theme.breakpoints.up(\"md\")]: {\n      width: drawerWidth,\n      position: \"fixed\",\n      height: \"100%\"\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      width: drawerWidth,\n      position: \"fixed\",\n      display: \"block\",\n      top: \"0\",\n      height: \"100vh\",\n      right: \"0\",\n      left: \"auto\",\n      zIndex: \"1032\",\n      visibility: \"visible\",\n      overflowY: \"visible\",\n      borderTop: \"none\",\n      textAlign: \"left\",\n      paddingRight: \"0px\",\n      paddingLeft: \"0\",\n      transform: `translate3d(${drawerWidth}px, 0, 0)`,\n      ...transition\n    }\n  },\n  logo: {\n    position: \"relative\",\n    padding: \"15px 15px\",\n    zIndex: \"4\",\n    \"&:after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      bottom: \"0\",\n\n      height: \"1px\",\n      right: \"15px\",\n      width: \"calc(100% - 30px)\",\n      backgroundColor: \"rgba(\" + hexToRgb(grayColor[6]) + \", 0.3)\"\n    }\n  },\n  logoLink: {\n    ...defaultFont,\n    padding: \"5px 0\",\n    display: \"block\",\n    fontSize: \"25px\",\n    fontWeight: \"200\",\n    textAlign: 'center',\n    lineHeight: \"30px\",\n    textDecoration: \"none\",\n    backgroundColor: \"transparent\",\n    \"&,&:hover\": {\n      color: whiteColor\n    }\n  },\n  logoLinkRTL: {\n    textAlign: \"right\"\n  },\n  logoImage: {\n    width: \"30px\",\n    display: \"inline-block\",\n    maxHeight: \"30px\",\n    marginLeft: \"10px\",\n    marginRight: \"15px\"\n  },\n  img: {\n    width: \"35px\",\n    top: \"22px\",\n    position: \"absolute\",\n    verticalAlign: \"middle\",\n    border: \"0\"\n  },\n  background: {\n    position: \"absolute\",\n    zIndex: \"1\",\n    height: \"100%\",\n    width: \"100%\",\n    display: \"block\",\n    top: \"0\",\n    left: \"0\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center center\",\n    \"&:after\": {\n      position: \"absolute\",\n      zIndex: \"3\",\n      width: \"100%\",\n      height: \"100%\",\n      content: '\"\"',\n      display: \"block\",\n      background: blackColor,\n      opacity: \".8\"\n    }\n  },\n  list: {\n    marginTop: \"20px\",\n    paddingLeft: \"0\",\n    paddingTop: \"0\",\n    paddingBottom: \"0\",\n    marginBottom: \"0\",\n    listStyle: \"none\",\n    position: \"unset\"\n  },\n  item: {\n    position: \"relative\",\n    display: \"block\",\n    textDecoration: \"none\",\n    color: 'rgb(149, 134, 165)',\n    \"&:hover,&:focus,&:visited,&.active\": {\n      color: '#fff'\n    }\n  },\n  itemLink: {\n    width: \"auto\",\n    transition: \"all 300ms linear\",\n    margin: \"0\",\n    borderRadius: \"3px\",\n    position: \"relative\",\n    display: \"block\",\n    padding: \"10px\",\n    backgroundColor: \"transparent\",\n    ...defaultFont\n  },\n  itemIcon: {\n    width: \"24px\",\n    height: \"30px\",\n    fontSize: \"24px\",\n    lineHeight: \"30px\",\n    float: \"left\",\n    margin: \"0 15px\",\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    // color: 'rgb(149, 134, 165)'\n  },\n  itemText: {\n    ...defaultFont,\n    margin: \"0\",\n    lineHeight: \"30px\",\n    fontWeight: 'bold',\n    fontSize: \"14px\",\n    // color: 'rgb(149, 134, 165)'\n  },\n  sidebarWrapper: {\n    position: \"relative\",\n    height: \"calc(100vh - 75px)\",\n    overflow: \"auto\",\n    width: \"220px\",\n    zIndex: \"4\",\n    overflowScrolling: \"touch\"\n  },\n  fab: {\n    position: 'fixed',\n    bottom: 15,\n    right: 15\n  }\n});\n\nexport default sidebarStyle;\n","import { makeStyles } from \"@material-ui/core/styles\"\nimport { NavLink } from \"react-router-dom\"\nimport classNames from \"classnames\"\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from \"@material-ui/core/Drawer\"\nimport Fab from '@material-ui/core/Fab'\nimport Hidden from \"@material-ui/core/Hidden\"\nimport Icon from \"@material-ui/core/Icon\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport MenuIcon from '@material-ui/icons/Menu'\nimport React from \"react\"\nimport styles from \"../../styles/components/sidebarStyle.js\"\nimport useCore from \"../../hooks/useCore\"\nimport { useGetActiveBlockChain } from \"../../state/chains/hooks\"\n\n\n// @ts-ignore\nconst useStyles = makeStyles(styles)\n\n\nexport default function Sidebar () {\n  const {myAccount} = useCore()\n  const chain = useGetActiveBlockChain()\n  const [state, setState] = React.useState<boolean>(false)\n\n  const toggleDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) return\n    setState(open)\n  }\n\n\n  const classes = useStyles()\n  // verifies if routeName is the one active (in browser input)\n  function activeRoute(routeName: any) {\n    if (!routeName) return false\n    return window.location.href.indexOf(routeName.url) > -1 ? true : false\n  }\n\n  const routes = [\n    {\n      url: '/dashboard/mint',\n      icon: 'construction',\n      name: 'Mint token'\n    },\n    {\n      url: '/dashboard/burn',\n      icon: 'whatshot',\n      name: 'Burn token'\n    },\n    {\n      url: '/dashboard/freeze',\n      icon: 'ac_unit',\n      name: 'Freeze'\n    },\n    {\n      url: '/dashboard/admin',\n      icon: 'supervisor_account',\n      name: 'Admin'\n    },\n    // {\n    //   url: '/statistics',\n    //   icon: 'signal_cellular_alt',\n    //   name: 'Statistics'\n    // },\n  ]\n\n  const links = (\n    <List className={classes.list}>\n      {\n        routes.map(r => {\n          return (\n            <NavLink onClick={() => {\n              setTimeout(() => {window.location.reload()}, 1500)\n              }}\n              key={r.name} to={\n                chain == \"Nile\" && window.tronWeb?.defaultAddress.hex ? r.url : chain == \"Goerli\" && myAccount ? r.url : \"/dashboard\"\n              } className={({isActive}) => isActive ? `active ${classes.item}` : classes.item}>\n              <ListItem button className={classes.itemLink}>\n                <Icon className={classNames(classes.itemIcon)}>{r.icon}</Icon>\n                <ListItemText primary={r.name} className={classNames(classes.itemText)} disableTypography={true} />\n              </ListItem>\n            </NavLink>\n          )\n        })\n      }\n    </List>\n  )\n\n  var brand = (\n    <div className={classes.logo}>\n      <div className={classNames(classes.logoLink)}>Stablecoin Dashboard</div>\n    </div>\n  )\n\n  return (\n    <div>\n      <Hidden mdUp implementation=\"css\">\n        <Fab\n          size=\"small\"\n          color=\"secondary\" aria-label=\"add\"\n          style={{ outline: 'none', position: 'fixed', bottom: 15, right: 15, zIndex: 100 }}>\n          <MenuIcon onClick={toggleDrawer(true)} />\n        </Fab>\n\n        <Drawer\n          variant=\"temporary\"\n          open={state}\n          anchor={\"right\"}\n          classes={{ paper: classNames(classes.drawerPaper) }}\n          onClose={toggleDrawer(false)}\n          >\n          {brand}\n          <Divider />\n          <div className={classes.sidebarWrapper}>{links}</div>\n        </Drawer>\n      </Hidden>\n\n      <Hidden smDown implementation=\"css\">\n        <Drawer\n          anchor={\"left\"}\n          variant=\"permanent\"\n          open\n          classes={{ paper: classNames(classes.drawerPaper) }}>\n          {brand}\n          <Divider />\n          <div className={classes.sidebarWrapper}>{links}</div>\n        </Drawer>\n      </Hidden>\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/tronIcon.350f3509.jpeg\";","import React, { useEffect, useState } from 'react'\nimport { Outlet } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useWallet } from \"use-wallet\";\nimport {Button, MenuItem, Snackbar, TextField} from '@material-ui/core'\nimport { useAccount, useSwitchNetwork, useNetwork } from 'wagmi'\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\nimport TronWeb from \"tronweb\"\nimport styles from '../../styles/adminStyle.js'\nimport Sidebar from './Sidebar';\nimport { noOp } from '../../utils/constants';\nimport { truncateMiddle } from '../../utils/index';\nimport Navigation from '../../navigation';\nimport { useGetActiveBlockChain, useHandleBlokchainChange } from '../../state/chains/hooks';\nimport useCore from '../../hooks/useCore';\nimport tronIcon from \"../../icons/tronIcon.jpeg\"\n\nexport const chains = [\n  {\n    label: 'Goerli',\n    chainID: 'Goerli'\n  },\n  {\n    label: \"Nile\",\n    chainID: 'Nile',\n  }\n]\n\n// @ts-ignore\nconst useStyles = makeStyles(styles);\nfunction Dashbaord() {\n  const classes = useStyles();\n  const {myAccount} = useCore()\n\n  // const { address: account, isConnecting, isDisconnected, connector } = useAccount()\n  // const { data, error, isLoading, pendingChainId, switchNetwork, status, isSuccess } = useSwitchNetwork()\n  // const { chain  } = useNetwork()\n  // const { isConnected } = useAccount()\n  const [tronObj, setTronObj] = useState<any>()\n  const [tronSnackbar, setTronSnackbar] = useState<boolean>(false)\n\n  useEffect(() => {\n    checkIfTronConnected()\n  }, [])\n\n  // const { tronLink } = window;\n  const chain = useGetActiveBlockChain()\n  const setChain = useHandleBlokchainChange()\n\n\n  // useEffect(() => {\n  //   if(myAccount){\n  //     setChain(\"Goerli\")\n  //   }else{\n  //     setChain(\"Nile\")\n  //   }\n\n  // },[myAccount])\n\n  useEffect(() => {\n    if(!myAccount && !window.tronWeb){\n      // window.location.reload()\n    }\n  }, [myAccount, window.tronWeb])\n\n  const loginWithTron = () => {\n    if(window.tronWeb.ready){\n      console.log(\"show account\")\n      setChain(\"Nile\");\n      document.location.href = \"\"\n    }else{\n      setTronSnackbar(true)\n    }\n  }\n\n  const handleChainChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChain(event.target.value);\n  };\n\n  const checkIfTronConnected = async() => {\n    // let res = await window.tronLink.ready\n    console.log(\"checkIfTronConnected\",!myAccount)\n  }\n\n  var obj = setInterval(() => {\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n        clearInterval(obj)\n        var tronweb = window.tronWeb\n        setTronObj(tronweb)\n      }\n  }, 10)\n\n\n  if(window.location.href.includes(\"login\")) return <div />\n  return (\n \n    <div>\n      <div className={classes.wrapper} style={{padding: '15px 15px 40px 0'}}>\n      {\n        tronSnackbar && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={tronSnackbar}\n            onClose={() => setTronSnackbar(false)}\n            message=\"Please login to TronLink extention wallet first.\"\n          />\n      }\n\n      {/* {\n        (!myAccount) && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={connectMetamask}\n            onClose={() => setConnectMetamask(false)}\n            message=\"Please connect to the Metamask on Goerli network or Tronlink on Nile network\"\n          />\n      } */}\n      <div style={{padding: '28px', display: 'flex', justifyContent: 'flex-end'}}>\n        <TextField\n          required\n          id=\"standard-select-currency\"\n          select\n          label=\"Chain\"\n          value={chain}\n          onChange={handleChainChange}\n          // fullWidth\n          variant=\"outlined\"\n          size='small'\n          style={{marginRight: '15px', width: '150px'}}\n        >\n          {chains.map((option) => (\n            <MenuItem alignItems={\"center\"} key={option.chainID} value={option.label}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        {\n          (\n            <div>\n             \n              {chain == 'Nile' ?  \n                <button\n                  className={\"tronlinkBtn\"}\n                  style={{backgroundColor: \"#fff\", color: \"#000\", display: 'flex', justifyContent: \"space-between\", alignItems: \"center\"}}\n                  onClick={() => setTronSnackbar(true)}\n                ><div><img src={tronIcon} alt={\"tronIcon\"} style={{width: \"18px\", height: \"18px\", borderRadius: '50%', marginRight: '6px'}} /></div>\n                  {\n                   tronObj ?  <div>{window.tronWeb.defaultAddress.base58.slice(0, 4) + '...' + window.tronWeb.defaultAddress.base58.slice(30, 34)}</div>\n                    : <div>Tronlink Wallet</div>\n                  }\n                </button>\n                : \n                <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                  <ConnectButton chainStatus={\"none\"} showBalance={false} />\n                </div> \n              }\n            </div>\n          )\n        }\n      </div>\n\n      <Sidebar />\n      <Outlet />\n    </div>\n    </div>\n\n  )\n}\n\nexport default Dashbaord\n","\n\nfunction Textfield(props: any) {\n  const {text, color, fontSize, fontWeight,className} = props\n  return (\n    <div \n      className={className}\n      style={{\n            color, fontSize, fontWeight\n      }}>\n      {text}\n    </div>\n  )\n}\n\nexport default Textfield","import {createAction} from '@reduxjs/toolkit';\n\nimport {PopupContent} from '../../utils/interface';\n\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>(\n  'app/updateBlockNumber',\n);\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\n\nexport const loaderVisibile = createAction<{isVisible: boolean}>('app/updateLoader')\n","import {useWallet} from 'use-wallet';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useNetwork } from 'wagmi'\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal,loaderVisibile} from './actions';\nimport {AppState} from '../index';\nimport {PopupContent} from '../../utils/interface';\n\nexport function useBlockNumber(): number | undefined {\n  // const {chainId} = useWallet();\n  const { chain} = useNetwork()\n\n  const test = useSelector((state: AppState) => state)\n\n  console.log('useBlockNumber', chain?.id, test, test.application.blockNumber[chain?.id ?? -1])\n\n  return useSelector((state: AppState) => state.application.blockNumber[chain?.id ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// Returns a function that allows adding a popup.\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({content, key}));\n\n      setTimeout(() => {\n        window.location.reload()\n      }, 5000)\n    },\n    [dispatch],\n  );\n}\n\n// Returns a function that allows removing a popup via its key.\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({key}));\n    },\n    [dispatch],\n  );\n}\n\n// Get the list of active popups.\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n\n// Get the loader\nexport function useGetLoader(): boolean {\n  return useSelector((state: AppState) => state.application.isVisible);\n}\n\n\nexport function useUpdateLoader(): (isVisible: boolean) => void {\n  const dispatch = useDispatch();\n  return useCallback((isVisible: boolean) => dispatch((loaderVisibile({isVisible}))), [dispatch]);\n}","const formatErrorMessage = (message: string): string => {\n  message = message.toLowerCase();\n\n  if (message.includes('cannot add to expired lock. withdraw')) return 'Cannot add to an expired lock. You need to Withdraw.';\n  if (message.includes(`withdraw old tokens first`)) return 'Withdraw old tokens first.';\n  if (message.includes('can only lock until time in the future')) return `Can only lock for future unlock time.`;\n  if (message.includes('voting lock can be 4 years max')) return `Voting lock cannot be greater than 4 Years.`;\n  if (message.includes('no existing lock found')) return 'No lock found.';\n  if (message.includes('nothing is locked')) return 'Nothing is locked.';\n  if (message.includes('can only increase lock duration')) return 'Can only increase the lock duration.';\n  if (message.includes('lock expired')) return 'The lock has expired.';\n  if (message.includes(\"the lock didn't expire\")) return 'The lock did not expire.';\n  if (message.includes(\"fallback not initiated\")) return 'Emergency withdraw is not enabled.';\n  if (message.includes(\"amount < left\")) return 'Amount has to be more than the current rewards. Else try after the reward period has finished.';\n  if (message.includes(\"transaction is already confirmed\")) return \"Transaction is already confirmed by you.\";\n  if (message.includes(\"owner does not exist\")) return \"Not owner\";\n\n\n  // Fail safes like overflows etc.;\n  return 'Error Occured, Please try again later.';\n};\n\nexport default formatErrorMessage;\n","import { ethers } from 'ethers';\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { useNetwork } from 'wagmi'\nimport { useAddPopup } from '../../state/application/hooks';\nimport formatErrorMessage from '../../utils/formatErrorMessage';\nimport MultiSig from \"../../protocol/deployments/abi/MultiSig.json\"\n\nimport useCore from \"../useCore\"\nimport { useGetActiveBlockChain } from '../../state/chains/hooks';\n\n// confirmation hooks = required // current confirmation count of a txn\n// is transaction confirmed(true/false) // get addresses who confirmed the transaction\n\nexport const useGetRequiredCount = () => {\n    const core = useCore();\n    // const { chain } = useNetwork()\n    const chain = useGetActiveBlockChain()\n    const [response, setResponse] = useState<number>(0)\n\n    const fetchData = useCallback(async () => {\n        console.log(\"useGetRequiredCount\", core.contracts)\n        const contract = await core.contracts[`${core._activeNetwork}`].MultiSig;\n        console.log(\"useGetRequiredCount\", contract)\n\n        const res = await contract.required()\n\n        setResponse(res.toNumber())\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    console.log('useGetRequiredCount err', err)\n                    setResponse(0)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetConfirmationCount = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n\n    const fetchData = async (txnId: number) => {\n        const contract = core.contracts[`${chain?.id || core._activeNetwork}`].MultiSig\n\n        const res = await contract.getConfirmationCount(txnId);\n        console.log('useGetConfirmationCount', res);\n        let count = res.toNumber();\n        console.log(\"count\", count)\n        return count\n\n    }\n\n    return fetchData\n}\n\n\nexport const useIsTxnConfirmed = (txnId: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<boolean>(false)\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.isConfirmed(txnId)\n        setResponse(res)\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse(false)\n                    console.log('useIsTxnConfirmed err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetConfirmaByAddresses = (txnId: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.getConfirmations(txnId)\n        setResponse(res)\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse([])\n                    console.log('useGetConfirmaByAddresses err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\n// get owner hooks\n\nexport const useGetOwners = () => {\n    const core = useCore();\n\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id || core._activeNetwork}`].MultiSig;\n        const res = await contract.getOwners()\n        setResponse(res)\n    }, [chain, core._activeNetwork])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    console.log('useGetOwners err', err)\n                    setResponse([])\n                })\n        }\n    }, [fetchData, chain, core._activeNetwork])\n\n    return response\n}\n\n// Transaction count and get all transactions\n\nexport const useGetTransactionCount = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<number>(0)\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.transactionCount()\n        setResponse(res.toNumber())\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse(0)\n                    console.log('useGetTransactionCount err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetTransactions = (count: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<any[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        setResponse([])\n        for (let i = 0; i < count; i++) {\n            const res = await contract.transactions(i)\n            setResponse(prev => [...prev, res])\n        }\n\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse([])\n                    console.log('useGetTransaction err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetSingleTransaction = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n\n\n    const sendRes = async (txId: number) => {\n\n        const contract = core.contracts[`${chain?.id || core._activeNetwork}`].MultiSig\n        const res = await contract.transactions(txId)\n        console.log(\"useGetSingleTransaction res\", res.executed)\n        let executed = res.executed\n\n        return executed\n    }\n\n    return sendRes\n}\n\nexport const useGetTxnFromHash = () => {\n    const core = useCore();\n    const { provider } = core\n\n    // const [test, setTest] = useState<any>()\n    let data, from, blockNumber\n    let toAdrs, val, token, typeOfTxn, timestamp, returnRes\n\n    const sendRes = (hash: string) => {\n\n        const testFn = async () => {\n\n            const res = await provider.getTransaction(hash)\n            console.log('useGetTxnFromHash res', res.data)\n            data = res.data\n            from = res.from\n            blockNumber = res.blockNumber\n\n            token = data.slice(10, 74)\n            typeOfTxn = data.slice(266, 274)\n            toAdrs = data.slice(274, 338)\n            val = data.slice(338, 402)\n\n            const methodID = data?.slice(0, 10)\n\n            // if(blockNumber)\n            //     {\n            //         const res = await provider.getBlock(blockNumber)\n            //         timestamp = res.timestamp\n\n            //         returnRes = {\n            //             methodID,\n            //             token: `0x${token.slice(24, token.length)}`,\n            //             typeOfTxn: typeOfTxn == \"40c10f19\" ? \"Mint\" : \"Burn\",\n            //             toAdrs: `0x${toAdrs.slice(24, toAdrs.length)}`,\n            //             val: ethers.utils.formatEther(`0x${val}`),\n            //             from,\n            //             timestamp\n            //         }\n            //     }\n\n            const blockres = await provider.getBlock(blockNumber)\n            timestamp = blockres.timestamp\n\n            returnRes = {\n                methodID,\n                token: `0x${token.slice(24, token.length)}`,\n                typeOfTxn: typeOfTxn == \"40c10f19\" ? \"Mint\" : \"Burn\",\n                toAdrs: `0x${toAdrs.slice(24, toAdrs.length)}`,\n                val: ethers.utils.formatEther(`0x${val}`),\n                from,\n                timestamp\n            }\n\n            return returnRes\n\n        }\n\n        let test = testFn()\n        console.log(\"useGetTxnFromHash final\", test)\n\n        return returnRes\n        // console.log('getTxnFromHash res', ethers.utils.formatEther(`0x${'0000000000000000000000000000000000000000000000008ac7230489e80000'}`))\n\n    }\n\n    return sendRes\n}\n\n\n// Add Owner / Remove Owner / Replace owner / ChangeRequirement\n\n\nexport const useAddOwner = (address: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.addOwner(address)\n\n            const txresult = await res.wait()\n            console.log('useAddOwner txresult', txresult)\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'New owner Added'\n                    }\n                })\n            }\n        } catch (e: any) {\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [address, chain])\n}\n\nexport const useRemoveOwner = (address: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.removeOwner(address)\n\n            const txresult = await res.wait()\n            console.log('useRemoveOwner txresult', txresult)\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useRemoveOwner error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [address, chain])\n}\n\nexport const useReplaceOwner = (oldAddress: string, newAddress: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.replaceOwner(oldAddress, newAddress)\n\n            const txresult = await res.wait()\n            console.log('useReplaceOwner txresult', txresult)\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useReplaceOwner error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [oldAddress, newAddress, chain])\n}\n\nexport const useChangeRequirement = (requiredCount: number) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.changeRequirement(requiredCount)\n\n            const txresult = await res.wait()\n            console.log('useChangeRequirement txresult', txresult)\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useChangeRequirement error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [requiredCount, chain])\n}\n","import {createAction} from '@reduxjs/toolkit';\nimport { BigNumber } from 'ethers';\nimport { DashboardTxnDetails, TransactionDetails } from './reducer';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n  \n}\n\nexport const addTransaction = createAction<{\n  txIndex: number;\n  chainId: number;\n  hash: string;\n  // from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  creation?: TransactionDetails,\n  confirmation?: TransactionDetails,\n  execution?: TransactionDetails,\n  // approval?: { tokenAddress: string; spender: string };\n  // summary?: string;\n  // blockchain?: string;\n\n}>('transactions/addTransaction');\n\nexport const updateTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  blockchain?: string;\n}>('transactions/updateTransaction')\n\n\nexport const clearAllTransactions = createAction<{ chainId: number }>(\n  'transactions/clearAllTransactions',\n);\n\nexport const finalizeTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  // receipt: SerializableTransactionReceipt;\n  txIndex: number;\n  from: string;\n  creation: TransactionDetails,\n  confirmation?: { [txHash: string]: TransactionDetails; },\n  execution?: { [txHash: string]: TransactionDetails; },\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n\n\nexport const saveTxn = createAction<{\n  txIndex: number;\n  hash: string;\n  chainId: number;\n\n}>('transactions/saveTxn')\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport useCore from \"./useCore\";\n\n\nconst useGetConfirmReq = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState('')\n\n  const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.numConfirmationsRequired()\n        setResponse(res.toNumber())\n  }, [chain]) \n\n  useEffect(() => {\n\n    if(core){\n        fetchData()\n            .catch((err) => setResponse(''))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetConfirmReq","import {TransactionResponse} from '@ethersproject/providers';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport { useNetwork, useAccount } from 'wagmi'\nimport { BigNumber } from 'ethers';\n\nimport {useAddPopup} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {addTransaction, clearAllTransactions, updateTransaction} from './actions';\nimport {DashboardTxnDetails, newTxnState, TransactionDetails, TxnData} from './reducer';\nimport {useGetActiveChainId} from \"../chains/hooks\";\nimport useGetConfirmReq from '../../hooks/useGetConfirmReq';\n\n/**\n * Helper that can take a ethers library transaction response and\n * add it to the list of transactions.\n */\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  transDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n  // const {chainId, account} = useWallet();\n\n  const { address: account } = useAccount()\n  const dispatch = useDispatch<AppDispatch>();\n  const addPopup = useAddPopup();\n  const { chain} = useNetwork()\n  let confirmReq = useGetConfirmReq()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n \n  // chainId, creation, confirmation, execution, txDetail, txIndex\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      transDetail: {\n        _numConfirmations: any, \n        _typeOfTx: any, \n        _createdTime: any, \n        _executed: boolean, \n        _value: BigNumber, \n        _token: string, \n        txIndex: any, \n        _executedTime: any, \n        _to: string,\n      },\n      {\n        summary,\n        approval,\n      }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chain) return;\n\n      const {hash} = response;\n      \n      const {_numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = transDetail\n\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n\n      addPopup(\n        {\n          txn: {\n            hash,\n            loading: true,\n            success: false,\n            summary: summary,\n          },\n        },\n        hash,\n      );\n\n      // if(_numConfirmations < confirmReq){\n      //   dispatch(addTransaction({hash, txIndex, chainId, confirmation: {confirmedTime: Date.now(), from: account}, txDetail: {\n      //     _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      //   }}));\n      // }\n \n      dispatch(addTransaction({hash, txIndex, chainId, creation: {confirmedTime: Date.now(), from: account}, confirmation: {confirmedTime: Date.now(), from: account}, txDetail: {\n        _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      }}));\n    },\n    // eslint-disable-next-line\n    [dispatch, chain, account],\n  );\n}\n\nexport function useTransactionUpdater(): (\n  response: TransactionResponse,\n  transDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n   // const {chainId, account} = useWallet();\n   const { chain} = useNetwork()\n   const { address: account } = useAccount()\n   let chainId\n\n   if(chain){\n     chainId = chain.id\n   }\n  const dispatch = useDispatch<AppDispatch>();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      transDetail: {\n        _numConfirmations: any, \n        _typeOfTx: any, \n        _createdTime: any, \n        _executed: boolean, \n        _value: BigNumber, \n        _token: string, \n        txIndex: any, \n        _executedTime: any, \n        _to: string,\n      },\n      {\n        summary,\n        approval,\n      }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chain) return;\n\n      const {hash} = response;\n\n      const {_numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = transDetail\n\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n\n      addPopup(\n        {\n          txn: {\n            hash,\n            loading: true,\n            success: false,\n            summary: summary,\n          },\n        },\n        hash,\n      );\n\n      dispatch(updateTransaction({hash, from: account, chainId, approval, summary, txDetail: {\n        _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      }}));\n    },\n    // eslint-disable-next-line\n    [dispatch, chainId, account],\n  );\n}\n\n// Returns all the transactions for the current chain.\nexport function useAllTransactions() {\n  // const {chainId} = useWallet();\n  const { chain} = useNetwork()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n  \n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n  console.log(\"useAllTransactions\", state)\n  // return {}\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\n// export function isTransactionRecent(tx: TransactionDetails): boolean {\n//   return new Date().getTime() - tx.addedTime < 86_400_000;\n// }\n\n// Returns whether a token has a pending approval transaction.\nexport function useHasPendingApproval(\n  tokenAddress: string | undefined,\n  spender: string | undefined,\n): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return (\n            approval.spender === spender &&\n            approval.tokenAddress === tokenAddress \n            // &&\n            // isTransactionRecent(tx)\n          );\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  );\n}\n\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\n  const activeChainId = useGetActiveChainId()\n  console.log('activeChainId', activeChainId)\n  const dispatch = useDispatch<AppDispatch>();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({chainId: activeChainId})), [\n      activeChainId,\n      dispatch,\n    ]),\n  };\n}\n\n\n","import { BigNumber } from 'ethers';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\n\nexport function getBalance(\n  balance: BigNumber,\n  decimals = 18\n): string {\n  try {\n    return formatUnits(balance, decimals);\n  } catch (err) {\n    return '0';\n  }\n};\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 3\n): string => {\n  try {\n    const formattedBalance: string = getBalance(balance, decimals);\n    const decimalsPointIndex = formattedBalance.indexOf('.');\n    if (decimalsPointIndex === -1) return formattedBalance;\n    return (\n      formattedBalance.slice(0, decimalsPointIndex) +\n      '.' +\n      formattedBalance.slice(decimalsPointIndex + 1, decimalsPointIndex + 1 + fractionDigits)\n    );\n  } catch (error) {\n    return '0';\n  }\n};\n\nexport const formatToBN = (\n  value: number | string,\n  decimals = 18\n): BigNumber => {\n  try {\n    const [beforeDecimals, afterDecimal] = `${value}`.split('.');\n\n    const beforeDecimalsPrecisionText = beforeDecimals?.slice(0, 18) || '0';\n    const afterDecimalsPrecisionText = afterDecimal?.slice(0, decimals) || '0';\n    const fixedPrecisionValue = `${beforeDecimalsPrecisionText}.${afterDecimalsPrecisionText}`;\n\n    return BigNumber.from(parseUnits(`${fixedPrecisionValue}`, decimals));\n  } catch (error) {\n    return BigNumber.from('0');\n  }\n};\n","import {BigNumber, Contract, utils} from 'ethers';\nimport {useCallback, useEffect, useState} from 'react';\nimport { useAccount } from 'wagmi'\n\nimport ABIS from '../protocol/deployments/abi';\nimport {useWallet} from 'use-wallet';\nimport useCore from './useCore';\n\nexport type TokenDetailsState = {\n  isLoading: boolean,\n  value: {\n    symbol: string;\n    decimals: number;\n    balance: BigNumber;\n    totalSupply: BigNumber;\n  }\n}\n\nconst LOADING_DEFAULT_BASIC_STATE = {\n  isLoading: true,\n  value: {\n    symbol: '',\n    decimals: 18,\n    balance: BigNumber.from(0),\n    totalSupply: BigNumber.from(0)\n  }\n}\n\nconst NON_LOADING_DEFAULT_BASIC_STATE = {\n  isLoading: false,\n  value: {\n    symbol: '',\n    decimals: 18,\n    balance: BigNumber.from(0),\n    totalSupply: BigNumber.from(0)\n  }\n}\n\nconst useGetTokenDetails = () => {\n  const [tokenDetails, setTokenDetails] = useState<TokenDetailsState>(LOADING_DEFAULT_BASIC_STATE);\n\n  const core = useCore();\n  const {myAccount: account, provider } = core\n\n  const fetch = async (address: string) => {\n    if (!utils.isAddress(address) || !account) {\n      setTokenDetails(NON_LOADING_DEFAULT_BASIC_STATE);\n      \n    } else {\n\n      const contract = new Contract(address, ABIS.ERC20, core.signer);\n      const symbol = await contract.symbol();\n      const decimals = await contract.decimals();\n      const balance = await contract.balanceOf(account);\n      const totalSupply = await contract.totalSupply()\n\n      setTokenDetails({isLoading: false, value: {symbol, decimals: decimals, balance, totalSupply}});\n      return({isLoading: false, value: {symbol, decimals: decimals, balance, totalSupply}})\n    }\n  }\n\n  return {fetch, tokenDetails};\n};\n\nexport default useGetTokenDetails;\n","import { BigNumber, ethers } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionAdder } from \"../state/transactions/hooks\";\nimport { truncateMiddle } from \"../utils\";\nimport { formatToBN, getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport { AppDispatch, AppState } from \"../state/index\";\nimport useCore from \"./useCore\";\nimport { saveTxn } from \"../state/transactions/actions\";\nimport StablecoinImpl from \"../protocol/deployments/abi/StablecoinImpl.json\";\nimport MultiSig from \"../protocol/deployments/abi/MultiSig.json\";\nimport useGetTokenDetails from \"./useGetTokenDetails\";\nimport { useGetActiveChainId } from \"../state/chains/hooks\";\n\nconst useMultiSig = (\n  typeOfTx: string,\n  to: string,\n  amount: string,\n  destinationAdrs: string\n) => {\n  const core = useCore();\n  const { _activeNetwork } = core;\n  const updateLoader = useUpdateLoader();\n  const activeID = useGetActiveChainId();\n  console.log(\"activeID\", activeID);\n\n  const { chain } = useNetwork();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n  const { fetch } = useGetTokenDetails();\n\n  return useCallback(\n    async (onSuccess: () => void, onFailure: () => void): Promise<void> => {\n      try {\n        // typeOfTx // mint, burnFrom, addOwner, removeOwner, replaceOwner, changeRequirement\n\n        let iface;\n        let data;\n\n        if (typeOfTx == \"mint\" || typeOfTx == \"burn\") {\n          iface = new ethers.utils.Interface(StablecoinImpl);\n          data = iface.encodeFunctionData(typeOfTx, [\n            to,\n            ethers.utils.parseEther(amount),\n          ]);\n\n        } else {\n          iface = new ethers.utils.Interface(MultiSig);\n          if (typeOfTx == \"changeRequirement\") {\n            data = iface.encodeFunctionData(typeOfTx, [Number(amount)]);\n            console.log(\"changeRequirement\", data);\n          } else {\n            data = iface.encodeFunctionData(typeOfTx, [to]);\n          }\n        }\n\n        console.log(\"useMultiSigdata\", data);\n\n\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const response = await contract.submitTransaction(\n          core.contracts[`${chain?.id}`][destinationAdrs].address,\n          formatToBN(0),\n          data\n        );\n        const tx = await response.wait();\n\n        setTimeout(async () => {\n          if (tx?.status === 1) {\n            let txnsCount = await contract.transactionCount();\n            let summary;\n\n            dispatch(\n              saveTxn({\n                txIndex: txnsCount - 1,\n                hash: tx.transactionHash,\n                chainId: chain?.id || _activeNetwork,\n              })\n            );\n\n            if (typeOfTx == \"mint\" || typeOfTx == \"burn\") {\n              let tokenDetails = await fetch(destinationAdrs);\n              summary = `Submitted to ${\n                typeOfTx == \"mint\" ? \"Mint\" : \"Burn\"\n              } ${Number(amount)} ${tokenDetails?.value.symbol}`;\n            }\n\n            if (typeOfTx == \"addOwner\") summary = \"Submitted to add owner\";\n            if (typeOfTx == \"removeOwner\")\n              summary = \"Submitted to remove owner\";\n            if (typeOfTx == \"changeRequirement\")\n              summary = \"Submitted to change requirement\";\n            updateLoader(false);\n            addPopup({\n              txn: {\n                hash: tx.transactionHash,\n                success: true,\n                summary,\n              },\n            });\n          }\n        }, 1000);\n\n        if (tx?.status !== 1) {\n        }\n      } catch (e: any) {\n        console.error(\"useMultiSig error\", e);\n        onFailure();\n        updateLoader(false);\n\n        addPopup({\n          error: {\n            message: formatErrorMessage(e?.data?.message || e?.message),\n            stack: e?.stack,\n          },\n        });\n      }\n    },\n    [core, amount, addTransaction, to, destinationAdrs]\n  );\n};\n\nexport default useMultiSig;\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useNetwork } from 'wagmi'\nimport { addPopup } from \"../state/application/actions\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionUpdater } from \"../state/transactions/hooks\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport useCore from \"./useCore\";\nimport { saveTxn } from \"../state/transactions/actions\";\nimport {AppDispatch, AppState} from \"../state/index\";\n \nconst useConfirmTxn = () => {\n  const core = useCore();\n  const { chain} = useNetwork()\n  const updateTransaction = useTransactionUpdater();\n  const addPopup = useAddPopup()\n  const dispatch = useDispatch<AppDispatch>();\n  const updateLoader = useUpdateLoader()\n\n  const confirmCallback = async (index: number, typeOfTx: string) => {\n      \n    try {\n      const contract = await core.contracts[`${chain?.id}`].MultiSig;\n      const response = await contract.confirmTransaction(index)\n      console.log('useConfirmTxn response', response)\n  \n      const tx = await response.wait();\n      console.log('useConfirmTxn tx', tx)\n\n      setTimeout(async() => {\n        if (tx?.status === 1){\n          updateLoader(false)\n          dispatch(saveTxn({txIndex: index, hash: tx.transactionHash, chainId: chain?.id || core._activeNetwork}))\n          let summary = `Confirmed ID ${index}`\n          \n          addPopup({\n            txn: {\n              hash: tx.transactionHash,\n              success: true,\n              summary\n            }\n          });\n\n        }\n      }, 1000)\n\n    } catch (e: any) {\n      console.log('useConfirmTxn error', e.reason);\n      updateLoader(false)\n\n      addPopup({\n        error: {\n          message: formatErrorMessage(e?.data?.message || e?.message || e?.reason),\n          stack: e?.stack,\n        }\n      });\n    }\n\n  }\n\n  return confirmCallback\n}\n\nexport default useConfirmTxn\n\n","import { BigNumber } from 'ethers';\nimport useCore from '../hooks/useCore';\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nexport const truncateMiddle = function (\n  fullStr: string = '',\n  strLen: number,\n  separator?: string,\n) {\n  if (fullStr.length <= strLen) return fullStr;\n  separator = separator || '...';\n\n  var sepLen = separator.length,\n    charsToShow = strLen - sepLen,\n    frontChars = Math.ceil(charsToShow / 3),\n    backChars = Math.floor(charsToShow / 3);\n\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n\nexport const InputValidation = function (\n  value: string = \" \",\n  balance: BigNumber,\n  collateral: string,\n  toCheckFor: [\"MAX\", \"DECIMALS\"]\n) {\n  let returnObj = {\n    status: \"Success\",\n    restrict: false,\n    msg: \"\",\n  };\n\n  if (toCheckFor.includes(\"MAX\")) {\n    if (Number(value) > Number(balance)) {\n      returnObj = {\n        status: \"Warning\",\n        restrict: true,\n        msg: \"Input cannot be more than your wallet balance\",\n      }\n\n      return returnObj;\n    }\n  }\n};\n\n","import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport {Puff} from \"react-loader-spinner\"\nimport { useUpdateLoader } from '../state/application/hooks';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function ProgressModal({currentLoaderState}) {\n  const [open, setOpen] = React.useState(currentLoaderState);\n  const updateLoader = useUpdateLoader()\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n    updateLoader(false)\n  };\n\n  return (\n    <div>\n      <Dialog  onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={currentLoaderState} fullWidth >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Please wait..! \n        </DialogTitle>\n        <DialogContent dividers>\n          <div style={{display: 'flex', justifyContent: 'space-between'}}>\n            <div>Transaction is in progress.</div> \n            <Puff\n                height=\"30\"\n                width=\"30\"\n                ariaLabel=\"progress-bar-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"progress-bar-wrapper\"\n                radius={1}\n                color={`#444`}\n                visible={true}\n            />\n          </div>\n          \n        </DialogContent>\n        \n      </Dialog>\n    </div>\n  );\n}\n","import _ from \"lodash\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\n\nconst useGetAllTokenDetails = () => {\n  const {tokens, _activeNetwork, contracts} = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState<any>('')\n\n  const fetchData = useCallback(async () => {\n    Object.entries(tokens[chain?.id || _activeNetwork]).forEach(async(item) => {\n        const contract = await contracts[`${chain?.id || _activeNetwork}`][item[0]]\n        const res = await contract.totalSupply()\n                const bal = {\n            totalSupply: getDisplayBalance(res),\n            symbol: item[1].symbol\n        }\n        setResponse(prev => _.uniqWith([...prev, bal], (arrVal, othVal) => arrVal.symbol == othVal.symbol))\n\n    })\n    \n  }, [chain]) \n\n  useEffect(() => {\n    fetchData()\n  }, [tokens, _activeNetwork, chain])\n\n  return response\n\n}\n\nexport default useGetAllTokenDetails","import { BigNumber, ethers } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useAddPopup, useUpdateLoader } from \"../../state/application/hooks\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport { formatToBN, getDisplayBalance } from \"../../utils/formatBalance\";\nimport formatErrorMessage from \"../../utils/formatErrorMessage\";\nimport useCore from \"../useCore\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useSubmit = (typeOfTx: string,\n  to: string,\n  amount: string,\n  destinationAdrs: string) => {\n  \n  const addPopup = useAddPopup()\n  const updateLoader = useUpdateLoader();\n  \n  return useCallback(\n    async () => {\n      \n      try {\n        let summary, parameter, triggerContractRes, data\n\n        if (typeOfTx == \"mint\" || typeOfTx == \"burn\"){\n          parameter = [\n            {type:'address',value: to},{type:'uint256',value: ethers.utils.parseEther(amount)}\n          ] \n          triggerContractRes = await window.tronWeb.transactionBuilder.triggerSmartContract(destinationAdrs, `${typeOfTx}(address,uint256)`, {},\n            parameter, window.tronWeb.defaultAddress.base58);\n          data = `0x${triggerContractRes.transaction.raw_data.contract[0].parameter.value.data}`\n          summary = `Submitted to ${typeOfTx == \"mint\" ? \"Mint\" : \"Burn\"} ${Number(amount)}`\n        }else {\n          if (typeOfTx == \"changeRequirement\"){\n            parameter = [{type: 'uint256', value: amount}]\n            triggerContractRes = await window.tronWeb.transactionBuilder.triggerSmartContract(destinationAdrs, `${typeOfTx}(uint256)`, {},\n            parameter, window.tronWeb.defaultAddress.base58);\n            data = `0x${triggerContractRes.transaction.raw_data.contract[0].parameter.value.data}`\n            summary = \"Submitted to change requirement\";\n          }else {\n            parameter = [{type: 'address', value: to}]\n            triggerContractRes = await window.tronWeb.transactionBuilder.triggerSmartContract(destinationAdrs, `${typeOfTx}(address)`, {},\n            parameter, window.tronWeb.defaultAddress.base58);\n            data = `0x${triggerContractRes.transaction.raw_data.contract[0].parameter.value.data}`\n            if (typeOfTx == \"addOwner\") summary = \"Submitted to add owner\"\n            if (typeOfTx == \"removeOwner\")\n              summary = \"Submitted to remove owner\";\n          }\n        }\n\n        let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n\n        const response = await contract.submitTransaction(destinationAdrs,\n        formatToBN(0),\n        data).send()\n        let txnInfo = await window.tronWeb.trx.getTransaction(response);\n\n        console.log(\"useSubmit txnInfo\", txnInfo)\n        updateLoader(false);\n        // if (typeOfTx == \"mint\" || typeOfTx == \"burn\") {\n        //   let tokenDetails = await fetch(destinationAdrs);\n        //   summary = `Submitted to ${\n        //     typeOfTx == \"mint\" ? \"Mint\" : \"Burn\"\n        //   } ${Number(amount)}`;\n        // }\n\n        if(txnInfo.ret[0].contractRet == \"SUCCESS\"){\n          addPopup({\n            txn: {\n              hash: response,\n              success: true,\n              summary\n            }\n          });\n        }\n      } catch (e: any) {\n        console.log('useSubmit error', e);\n        updateLoader(false);\n\n        // addPopup({\n        //   error: {\n        //     message: formatErrorMessage(e?.data?.message || e?.message),\n        //     stack: e?.stack,\n        //   },\n        // });\n      }\n    },\n    [amount, to, typeOfTx],\n  );\n}\n\nexport default useSubmit\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useAddPopup } from \"../../state/application/hooks\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useConfirm = () => {\n  const addPopup = useAddPopup()\n \n  const confirmCallback = async (index: number) => {\n      \n    try {\n\n        let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n        const response = await contract.confirmTransaction(index).send()\n        let txnInfo = await window.tronWeb.trx.getTransaction(response);\n        let summary = `Confirmed ID ${index}`\n       \n        if(txnInfo.ret[0].contractRet == \"SUCCESS\"){\n          addPopup({\n            txn: {\n              hash: response,\n              success: true,\n              summary\n            }\n          });\n        }\n        console.log('useConfirmcontract', response, index)\n\n    } catch (e: any) {\n        console.log('useConfirm error', e);\n\n    }\n  }\n\n  return confirmCallback\n}\n\nexport default useConfirm\n\n","import _, { set } from \"lodash\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\nimport { useGetActiveBlockChain } from \"../../state/chains/hooks\";\nimport { tronMultiSigContract, tronStableCoins } from \"../../utils/constants\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n\nconst useGetTronTokenDetails = () => {\n  const chain = useGetActiveBlockChain()\n\n  const [response, setResponse] = React.useState<any>([])\n \n  const fetchData = () => {\n\n   tronStableCoins.forEach(async(item) => {\n    const contract = await window.tronWeb.contract().at(item.contractAdrs)\n    const res = await contract.totalSupply().call()\n    setResponse(prev => _.uniqWith([...prev, {totalSupply: getDisplayBalance(res), symbol: item.symbol}], (arrVal, othVal) => arrVal.symbol == othVal.symbol))\n\n})\n\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [chain])\n\n  return response\n\n}\n\nexport default useGetTronTokenDetails","import _ from \"lodash\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\nconst useGetTronOwners = () => {\n\n  const [response, setResponse] = React.useState<any>([])\n\n  const fetchOwners = useCallback(async () => {\n\n    let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n    \n    const res = await contract.getOwners().call()\n    \n    console.log(\"useGetTronOwners\", res)\n\n    res.map(async(owner) => {\n      console.log(\"txnRes\", owner)\n      let txnRes = window.tronWeb.address.fromHex(`${owner}`);\n      setResponse(prev => _.uniqWith([...prev, txnRes], (arrVal, othVal) => arrVal == othVal))\n      console.log(\"txnRes\", txnRes)\n    })\n\n  }, []) \n\n  useEffect(() => {\n    fetchOwners()\n      .catch((err) => setResponse([]))\n  }, [fetchOwners])\n\n  return response\n\n}\n\nexport default useGetTronOwners","import {useCallback, useEffect, useState} from \"react\"\nimport { tronMultiSigContract } from \"../../utils/constants\"\n\n\nexport const useTronGetIsExecuted = () => {\n\n    const setTronIsExecuted = async (txId: number) => {\n\n       try {\n        console.log(\"inside useTronGetIsExecuted\",  window.tronWeb.defaultAddress.base58)\n\n        let instance = await  window.tronWeb.contract().at(tronMultiSigContract)\n        // console.log(\"useTronGetIsExecuted res\", instance)\n\n        let res = await instance.transactions(txId).call()\n        console.log(\"useTronGetIsExecuted res\", res)\n        res = res.executed\n\n        return res\n       } catch (error) {\n            console.error(\"useTronGetIsExecuted\", error)\n       }\n\n    }\n\n\n    return setTronIsExecuted\n\n}\n\nexport const useGetTronConfirmationCount = () => {\n\n    const fetchData = async (txnId: number) => {\n        let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n\n        const res = await contract.getConfirmationCount(txnId).call();\n        console.log('useGetTronConfirmationCount', res);\n        let count = res.toNumber();\n\n        return count\n\n    }\n\n    return fetchData\n}\n\nexport const useGetTronTokenDetails = () => {\n\n    const fetchData = async (token: string) => {\n        let contract = await window.tronWeb.contract().at(token)\n\n        const symbol = await contract.symbol().call();\n        const decimals = await contract.decimals().call();\n        const name = await contract.name().call();\n        console.log('useGetTronTokenDetails');\n        let details = {\n            symbol,\n            decimals,\n            name\n        };\n\n        return details\n\n    }\n\n    return fetchData\n}\n\nexport const useTronGetRequiredCount = () => {\n\n    const [response, setResponse] = useState<number>(0)\n\n    const fetchData = useCallback(async () => {\n        let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n\n        const res = await contract.required().call()\n        console.log('useGetTronTokenDetails', res);\n        \n        setResponse(res.toNumber())\n\n        return res\n\n    }, [])\n\n    useEffect(() => {\n        fetchData()\n            .catch((err) => {\n                console.log('useGetRequiredCount err', err)\n                setResponse(0)\n            })\n    }, [fetchData])\n\n    return response\n}","import { useEffect, useState } from 'react'\nimport { Button, Card, CardContent, Grid, TextField } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useNetwork } from \"wagmi\"\n\nimport Textfield from '../../../components/Textfield'\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks'\nimport { useAddOwner, useRemoveOwner, useChangeRequirement, useGetConfirmationCount, useGetSingleTransaction, useGetRequiredCount, useGetOwners } from '../../../hooks/multisig/useMultiSig'\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction'\nimport useCore from '../../../hooks/useCore';\nimport { ethers } from 'ethers';\nimport _ from 'lodash';\nimport useConfirmTxn from '../../../hooks/useConfirmTxn';\nimport { truncateMiddle } from '../../../utils';\nimport { PersonalVideo } from '@material-ui/icons';\nimport ProgressModal from '../../../components/ProgressModal';\nimport useGetTokenDetails from '../../../hooks/useGetTokenDetails';\nimport useGetAllTokenDetails from '../../../hooks/useGetAllTokenDetails';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport { useGetActiveBlockChain, useGetActiveChainId } from '../../../state/chains/hooks';\nimport useConfirm from '../../../hooks/tron/useConfirm';\nimport { tronMultiSigContract } from '../../../utils/constants';\nimport useGetTronTokenDetails from '../../../hooks/tron/useGetTronTokenDetails';\nimport useGetTronOwners from '../../../hooks/tron/useGetTronOwners';\nimport { useGetTronConfirmationCount, useTronGetIsExecuted, useTronGetRequiredCount } from '../../../hooks/tron/useTronMultisig';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction createData(id: number, details: any, outOfCount: string, status: string, action: string, hash: string[]) {\n  return { id, details, outOfCount, status, action, hash };\n}\n\nfunction Admin({ ethTxns, tronTxns }) {\n  const { provider, tokens, _activeNetwork, contracts, config } = useCore()\n  const classes = useStyles();\n  const { chain: chainName } = useNetwork()\n\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  let contractOwners: any = useGetOwners()\n  const chain = useGetActiveBlockChain()\n\n  const [adddressToAdd, setAddressToAdd] = useState<string>('')\n  const [adddressRemove, setAddressToRemove] = useState<string>('')\n  const [noOfConfirmations, setNoOfConfirmations] = useState<string>(\"\")\n  const [finalData, setFinalData] = useState<any[]>([])\n  const [finalEthTxns, setFinalEthTxns] = useState<any>([])\n  const [finalTronTxns, setFinalTronTxns] = useState<any>([])\n\n  // Ethereum blockchain\n  const addOwnerAction = useSubmitTransaction(\"addOwner\", adddressToAdd, '0', \"MultiSig\")\n  const removeOwnerAction = useSubmitTransaction(\"removeOwner\", adddressRemove, '0', \"MultiSig\")\n  const noConfirmAction = useSubmitTransaction(\"changeRequirement\", \"\", noOfConfirmations, \"MultiSig\")\n  const setConfirmationCount = useGetConfirmationCount()\n  const setIsExecuted = useGetSingleTransaction()\n  let confirmReq = useGetRequiredCount()\n  const confirmTxnAction = useConfirmTxn()\n  const { fetch } = useGetTokenDetails();\n  const allTokensTotalSupply = useGetAllTokenDetails()\n  const chaindId = useGetActiveChainId()\n  \n  // Tron blockchain\n  const addTronOwnerAction = useSubmit(\"addOwner\", adddressToAdd, '0', tronMultiSigContract)\n  const removeTronOwnerAction = useSubmit(\"removeOwner\", adddressRemove, '0', tronMultiSigContract)\n  const noConfirmActionTron = useSubmit(\"changeRequirement\", \"\", noOfConfirmations, tronMultiSigContract)\n  const confirmTronTxnAction = useConfirm()\n  const allTronTokensTotalSupply = useGetTronTokenDetails()\n  const tronContractOwners = useGetTronOwners()\n  const confirmTronRequired = useTronGetRequiredCount()\n  const numOfConfirmationCountTron = useGetTronConfirmationCount()\n  const isTronExecuted = useTronGetIsExecuted()\n  console.log(\"confirmTronRequired\", confirmTronRequired)\n\n  let etherscanUrl = config[chainName?.id || _activeNetwork].etherscanUrl\n \n  useEffect(() => {\n    sortTransactions()\n  }, [ethTxns, tronTxns, chain])\n\n  const handleAddOwner = () => {\n    if(chain == \"Nile\"){\n      addTronOwnerAction()\n    }else {\n      addOwnerAction(() => { }, () => { })\n    }\n    updateLoader(true)\n  }\n\n  const handleRemoveOwner = () => {\n    if(chain == \"Nile\"){\n      removeTronOwnerAction()\n    }else {\n      removeOwnerAction(() => { }, () => { })\n    }\n    updateLoader(true)\n  }\n\n  const handleChangeConfirmation = () => {\n    if(chain == \"Nile\"){\n      noConfirmActionTron()\n    }else{\n      noConfirmAction(() => { }, () => { })\n    }\n    updateLoader(true)\n  }\n\n  const handleConfirm = (id: number, typeOfTxn: string) => {\n    if(chain == \"Nile\"){\n      confirmTronTxnAction(id)\n    }else{\n      confirmTxnAction(id, typeOfTxn)\n    }\n    updateLoader(true)\n\n  }\n\n  const handleExecute = () => {}\n\n  const sortTransactions = () => {\n\n    const mutlisigAddr = contracts[chaindId].MultiSig.address.replace('0x', '').toLowerCase()\n\n    let arr1: any[] = []\n    let arr2: any[] = []\n\n    ethTxns?.map((item: any, i: number) =>  {\n      if (item.submitResponse.input.toLowerCase().includes(mutlisigAddr)) {\n        arr1.push(item)\n      }\n    })\n\n\n    let token, value, symbol, toAdrs, typeOfTxn, typeOfTxnID\n\n\n    arr1?.map(async(item: any, i: number) => {\n      const executed = await setIsExecuted(Number(item.index))\n      let numConfirmations = await setConfirmationCount(Number(item.index))\n\n      token = item.submitResponse.input.slice(10, 74)\n      token =  `0x${token.slice(24, token.length)}`\n      toAdrs = item.submitResponse.input.slice(274, 338)\n      toAdrs = `0x${toAdrs.slice(24, toAdrs.length)}`\n      typeOfTxnID = item.submitResponse.input.slice(266, 274)\n\n      if (typeOfTxnID == \"ba51a6df\") value = item.submitResponse.input.slice(337, 338)\n      else {\n        value = \"0\"\n      }\n      if(typeOfTxnID == \"173825d9\") typeOfTxn = \"removeOwner\"\n      if(typeOfTxnID == \"7065cb48\") typeOfTxn = \"addOwner\"\n      if(typeOfTxnID == \"ba51a6df\") typeOfTxn = \"changeRequirement\"\n      arr2.push({...item, token, value, toAdrs, typeOfTxn, executed, numConfirmations})\n\n      setFinalEthTxns(arr2)\n          \n    }) \n    \n    // setFinalEthTxns(arr2)\n    \n    let tronArr1: any[] = []\n    tronTxns?.map((item: any, i: number) =>  {\n      // console.log(\"TEST\", item, window.tronWeb.address.toHex(tronMultiSigContract).slice(2, -1))\n\n      if (item.submitResponse.input.toLowerCase().includes(window.tronWeb.address.toHex(tronMultiSigContract).toLowerCase().slice(2, window.tronWeb.address.toHex(tronMultiSigContract).length))) {\n        tronArr1.push(item)\n\n      }\n    })\n\n    // console.log(\"TEST\", tronArr1)\n\n    let tronArr2: any[] = []\n\n    tronArr1?.forEach(async(item: any, i: number) => {\n      const executed = await isTronExecuted(Number(item.index))\n      let numConfirmations = await numOfConfirmationCountTron(item.index)\n      console.log(\"TEST\",executed, numConfirmations, item.index)\n      token = item.submitResponse.input.slice(8, 72)\n      token =  window.tronWeb.address.fromHex(`41${token.slice(24, token.length)}`)\n      toAdrs = item.submitResponse.input.slice(272, 336)\n      toAdrs = window.tronWeb.address.fromHex(`41${toAdrs.slice(24, toAdrs.length)}`)\n      typeOfTxnID = item.submitResponse.input.slice(264, 272)\n\n      if (typeOfTxnID == \"ba51a6df\") value = item.submitResponse.input.slice(336, 337)\n      else {\n        value = \"0\"\n      }\n      if(typeOfTxnID == \"173825d9\") typeOfTxn = \"removeOwner\"\n      if(typeOfTxnID == \"7065cb48\") typeOfTxn = \"addOwner\"\n      if(typeOfTxnID == \"ba51a6df\") typeOfTxn = \"changeRequirement\"\n      tronArr2.push({...item, token, value, toAdrs, typeOfTxn, executed, numConfirmations})\n\n      setFinalTronTxns(tronArr2)\n    })\n  \n   \n  }\n\n  const disableChangeConfirmCount = noOfConfirmations && noOfConfirmations < tronContractOwners.length && noOfConfirmations != \"0\"\n  const disableAddOwner = chain == \"Goerli\" ? ethers.utils.isAddress(adddressToAdd) : window.tronWeb?.isAddress(adddressToAdd)\n  const disableRemoveOwner = chain == \"Goerli\" ? ethers.utils.isAddress(adddressRemove) : window.tronWeb?.isAddress(adddressRemove)\n  console.log(\"finalEthTxns\", finalEthTxns)\n  \n  // console.log(\"Admin test\", finalEthTxns, finalTronTxns)\n  // console.log(\"Admin\", ethTxns, tronTxns)\n\n  // return (<div></div>)\n  return (\n    <div style={{ marginLeft: '260px', marginRight: '20px', position: 'relative', paddingTop: '50px' }}>\n      <ProgressModal currentLoaderState={currentLoaderState} />\n\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Textfield\n                text={'Total Supply'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid item xs={2}>\n                {\n                  chain == \"Goerli\" ? allTokensTotalSupply && allTokensTotalSupply?.map((item, i) => (\n                    <div className={\"row-spacebetween-center\"} key={i}>\n                      <Textfield\n                        text={item.symbol + \":\"}\n                        fontSize={'15px'}\n                        fontWeight={'500'}\n                        className={'m-b-15'}\n                      />\n                      <Textfield\n                        text={item.totalSupply}\n                        fontSize={'15px'}\n                        fontWeight={'bold'}\n                        className={'m-b-15'}\n                      />\n                    </div>\n                  )) :\n\n                  allTronTokensTotalSupply && allTronTokensTotalSupply?.map((item, i) => (\n                    <div className={\"row-spacebetween-center\"} key={i}>\n                        <Textfield\n                          text={item.symbol + \":\"}\n                          fontSize={'15px'}\n                          fontWeight={'500'}\n                          className={'m-b-15'}\n                        />\n                        <Textfield\n                          text={item.totalSupply}\n                          fontSize={'15px'}\n                          fontWeight={'bold'}\n                          className={'m-b-15'}\n                        />\n                      </div>\n                  ))\n                }\n                \n\n              </Grid>\n\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card style={{ marginBottom: '30px' }}>\n\n            <CardContent>\n              <Textfield\n                text={'Add an owner'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText=\"Enter the valid address you want to add as an owner\"\n                    required\n                    label=\"Address\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setAddressToAdd(e.target.value)}\n                    value={adddressToAdd}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleAddOwner}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    disabled={!disableAddOwner}\n                    style={{ position: 'relative' }}>Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card style={{ marginBottom: '30px' }}>\n            <CardContent>\n              <Textfield\n                text={'Remove an owner'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText=\"Enter the valid address you want to remove as an owner\"\n                    required\n                    label=\"Address\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setAddressToRemove(e.target.value)}\n                    value={adddressRemove}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleRemoveOwner}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    disabled={!disableRemoveOwner}\n                    style={{ position: 'relative' }}>Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card style={{ marginBottom: '30px' }}>\n            <CardContent>\n              <Textfield\n                text={'Change the number of confirmations'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText={`Enter the count that needs to be updated. Current count: ${chain == \"Goerli\" ? confirmReq : confirmTronRequired}`}\n                    required\n                    label=\"Confirmation count\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setNoOfConfirmations(e.target.value)}\n                    value={noOfConfirmations}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleChangeConfirmation}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    disabled={!disableChangeConfirmCount}\n                    style={{ position: 'relative' }}>Change\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card style={{ marginBottom: '30px', maxHeight: '200px', height: '200px' }} className={\"scrollable\"}>\n            <CardContent>\n              <Textfield\n                text={'Current Owners list'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <div className={\"scrollable\"}>\n                {\n                  chain == \"Goerli\" ?\n                  contractOwners.map((owner, i) =>\n                    <Textfield\n                      key={i}\n                      text={`${i + 1}. ${owner}`}\n                      fontSize={'13px'}\n                      // fontWeight={'bold'}\n                      className={'m-b-15'}\n                    />\n                  ) :\n\n                  tronContractOwners.map((owner, i) =>\n                    <Textfield\n                      key={i}\n                      text={`${i + 1}. ${owner}`}\n                      fontSize={'13px'}\n                      // fontWeight={'bold'}\n                      className={'m-b-15'}\n                    />\n                  )\n\n                  \n                }\n              </div>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <TableContainer>\n              <Table className={classes.table} aria-label=\"simple table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>ID</TableCell>\n                      <TableCell>Details</TableCell>\n                      <TableCell align=\"right\">Confirmation Count</TableCell>\n                      <TableCell align=\"right\">Staus</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {(chain == \"Goerli\" ? finalEthTxns : finalTronTxns).sort((a, b) => b.index - a.index)?.map((row) => {\n                      const {confirmData, executed, index, numConfirmations, submitResponse, toAdrs, token, typeOfTxn, value} = row\n                      let confirmCount = chain == \"Goerli\" ? confirmReq : confirmTronRequired\n                      let action = executed ? \"\" : numConfirmations <  confirmCount ? \"Confirm\" : \"\"\n                      let confirmHash = confirmData ? confirmData?.map((item) => item.hash) : []\n                      let hash = [submitResponse.hash].concat(confirmHash)\n                      let details = `Transaction (${typeOfTxn} to ${typeOfTxn == \"changeRequirement\" ? value : toAdrs}) is Submitted by ${truncateMiddle(submitResponse.from, 12, \"...\")}.` +\n                      `${numConfirmations > 1 ? `Confirmed by ${truncateMiddle(submitResponse.from, 12, \"...\")} ${confirmData?.map((data) => \"and \" + truncateMiddle(data.from, 12, \"...\"))}` : \"\"} ${executed && !!confirmData?.length ? `Excuted by ${truncateMiddle(confirmData[confirmData?.length - 1].from, 12, \"...\")}.` : \"\"}`\n                      return(\n                        <TableRow key={index}>\n                          <TableCell>{index}</TableCell>\n                          <TableCell component=\"th\" scope=\"row\">\n                            {details}\n                            {\n                              action.length ?\n                                <div style={{ margin: '15px 0 15px 0' }}>\n                                  <Button onClick={() => {\n                                    if (action == \"Confirm\") handleConfirm(index, typeOfTxn)\n                                    else handleExecute()\n                                  }}>{action}</Button>\n                                </div>\n                                :\n                                <div />\n                            }\n                            Click on the links for more details. &nbsp;&nbsp;\n                            {\n                              hash.map((singleHash, i) =>\n                                <span key={i}><a target=\"_blank\" href={chain == \"Goerli\" ? `${etherscanUrl}/tx/${singleHash}` : `https://nile.tronscan.org/#/transaction/${singleHash}`} rel=\"noreferrer\"> {truncateMiddle(singleHash, 22, \"...\")}</a>\n                                  &nbsp;&nbsp;</span>\n                              )\n                            }\n                          </TableCell>\n                          <TableCell align=\"right\"> { executed ? `Fullfilled` : `${numConfirmations} out of ${chain == \"Goerli\" ? confirmReq : confirmTronRequired}` } </TableCell>\n                          <TableCell align=\"right\">{ executed ? \"Success\" : numConfirmations < confirmCount ? 'Needs Confirmation' : 'Needs Execution' }</TableCell>\n                        </TableRow>\n                      )\n                    }\n                    \n                    )}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Admin\n","import {useState, useEffect} from 'react'\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport { makeStyles, Typography, createStyles, Theme } from '@material-ui/core';\nimport _moment from \"moment\"\nimport {useNetwork} from \"wagmi\"\n\nimport { truncateMiddle } from '../utils';\nimport useCore from '../hooks/useCore';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n      marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n      padding: theme.spacing(3),\n    },\n  }),\n);\n\nfunction getSteps() {\n      return ['Creation', 'Confirmations', 'Execution'];\n}\n\nconst getDate = (val: number) => {\n      let timestamp\n      if(val.toString().length > 10){\n            timestamp = val/1000\n      }else {\n            timestamp = val\n      }\n      let date = _moment.unix(timestamp).utc().format(\"MMM Do YYYY h:mm:ss a\");\n      if(timestamp == 0) return 'N/A'\n      return `${date}`\n}\n\nconst timeAgo = (val: number) => {\n      let timestamp\n      if(val.toString().length > 10){\n            timestamp = val/1000\n      }else {\n            timestamp = val \n      }\n      let date = _moment.unix(timestamp).fromNow();\n      return date\n}\n\nfunction getStepContent(step: number, stepData: any, core: any, chainName, chain) {\n\n      const {submitHash, submitFrom, submitTime, executed ,numConfirmations, confirmData} = stepData;\n      console.log(\"getStepContent confirmData\", stepData)\n      \n      const {config, _activeNetwork} = core\n\n      let etherscanUrl = config[chainName?.id || _activeNetwork].etherscanUrl\n\n      switch (step) {\n        case 0:\n          return (\n            <div style={{padding: '10px 0'}}>\n                  Created by&nbsp;\n                  <a \n                        target=\"_blank\"\n                        href={chain == \"Goerli\" ? `${etherscanUrl}/tx/${submitHash}` : `https://nile.tronscan.org/#/transaction/${submitHash}`}>\n                              {truncateMiddle(submitFrom, 12, \"...\")}\n                  </a>&nbsp;\n                   on {getDate(submitTime)}&nbsp;+UTC\n            </div>\n          );\n        case 1:\n            if( numConfirmations > 0 ) return (\n                  <div style={{padding: '10px 0'}}>\n                        Confirmed by&nbsp;\n                        <a \n                              target=\"_blank\"\n                              href={chain == \"Goerli\" ? `${etherscanUrl}/tx/${submitHash}` : `https://nile.tronscan.org/#/transaction/${submitHash}`}>\n                                    {truncateMiddle(submitFrom, 12, \"...\")}\n                        </a>&nbsp; and&nbsp;\n                        {\n                              confirmData?.map((data, i) => \n                                    <span key={i}><a key={i} target=\"_blank\" href={chain == \"Goerli\" ?  `${etherscanUrl}/tx/${data.hash}` : `https://nile.tronscan.org/#/transaction/${data.hash}`}>{truncateMiddle(data.from, 12, \"...\")}</a></span>\n                              )\n                        }\n                        &nbsp;on {getDate(submitTime)}&nbsp;+UTC \n                        {\n                              confirmData && <div>and&nbsp; \n                              {\n                                    confirmData?.map((data) => getDate(data.timeStamp))\n                              }&nbsp;+UTC&nbsp;respectively.</div>\n                        }\n                        \n                        \n                  </div>\n            )\n          return <div />\n        case 2:\n          return (\n            <div style={{padding: '10px 0'}}>\n                  {\n                        (executed && confirmData) && \n                        <div>\n                              Executed by&nbsp; \n                              <a \n                                    target=\"_blank\" \n                                    href={chain == \"Goerli\" ? `${etherscanUrl}/tx/${confirmData[confirmData?.length - 1]}` : `https://nile.tronscan.org/#/transaction/${confirmData[confirmData?.length - 1]}`}>\n                                          {truncateMiddle(confirmData[confirmData?.length - 1].from, 12, \"...\")} \n                              </a>&nbsp;\n                              on {getDate(confirmData[confirmData?.length - 1].timeStamp)}&nbsp;+UTC\n                        </div>\n                  }\n                 \n            </div>\n          );\n        default:\n          return 'Unknown step';\n      }\n\n}\n\n\nfunction Steps(props: any) {\n      const classes = useStyles();\n      const core = useCore()\n      const { chain: chainName} = useNetwork()\n\n      const {stepState, activeStep,  chain, stepData} = props\n      console.log(\"stepData\", stepData)\n      const [stepLabelColor, setStepLabelColor] = useState('#999');\n      \n      const steps = getSteps();\n\n      useEffect(() => {\n            if(stepState == 'successful') setStepLabelColor('#369e94')\n            if(stepState == 'inProgress') setStepLabelColor('#ed7117')\n\n      }, [stepState])\n\n  return (\n      <div className={classes.root}>\n            <Stepper activeStep={activeStep} orientation=\"vertical\">\n                  {\n                        steps.map((step: any, i: number) => (\n                              <Step active={true} key={step}>\n                                    <StepLabel style={{color: 'green'}}>{step}</StepLabel>\n                                    <StepContent style={{paddingLeft: '20px'}}>\n                                          <div>\n                                                {\n                                                      getStepContent(i, stepData, core, chainName, chain)\n                                                }\n                                          </div>\n                                    </StepContent>\n                              </Step>\n                        ))\n                  }\n            </Stepper>\n      </div>\n      \n  )\n}\n\nexport default Steps","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionUpdater } from \"../state/transactions/hooks\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport useCore from \"./useCore\";\nimport {AppDispatch, AppState} from \"../state/index\";\nimport { saveTxn } from \"../state/transactions/actions\";\n\nconst useExecuteTxn = () => {\n  const core = useCore();\n  const { chain} = useNetwork()\n  const updateTransaction = useTransactionUpdater();\n  const addPopup = useAddPopup()\n  const dispatch = useDispatch<AppDispatch>();\n  const updateLoader = useUpdateLoader()\n\n  const executeCallback = async (index: number, typeOfTx: string) => {\n      \n    try {\n      const contract = await core.contracts[`${chain?.id}`].MultiSig;\n      const response = await contract.executeTransaction(index)\n      const tx = await response.wait();\n\n    setTimeout(async() => {\n      if (tx?.status === 1){\n        updateLoader(false)\n        dispatch(saveTxn({txIndex: index, hash: tx.transactionHash, chainId: chain?.id || core._activeNetwork}))\n        let summary = `Executed ID ${index}`\n\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary\n          }\n        });\n       \n      }\n    }, 1000)\n\n    } catch (e: any) {\n      console.log('useExecuteTxn error', e);\n      updateLoader(false)\n\n      addPopup({\n        error: {\n          message: formatErrorMessage(e?.data?.message || e?.message),\n          stack: e?.stack,\n        }\n      });\n    }\n  }\n\n  return executeCallback\n}\n\nexport default useExecuteTxn\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useExecute = () => {\n\n    const confirmCallback = async (index: number) => {\n      \n        try {\n            let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n    \n            const response = await contract.executeTransaction(index).send()\n           \n            console.log('response', response)\n    \n        } catch (e: any) {\n            console.log('useExecute error', e);\n    \n        }\n      }\n    \n      return confirmCallback\n}\n\nexport default useExecute\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useNoOfConfimReq = () => {\n  \n    const [response, setResponse] = useState<number>(0)\n  \n    const fetchData = useCallback(async () => {\n        let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n\n        const response = await contract.numConfirmationsRequired().call()\n       \n        setResponse(response.toNumber())\n\n    }, []) \n  \n    useEffect(() => {\n        fetchData()\n            .catch((err) => setResponse(0))\n  \n    }, [fetchData])\n  \n    return response\n}\n\nexport default useNoOfConfimReq\n\n","import { useEffect, useState } from 'react'\nimport Icon from \"@material-ui/core/Icon\"\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport _moment from \"moment\"\nimport {Button} from \"@material-ui/core\";\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport {useNetwork} from \"wagmi\"\nimport _ from \"lodash\"\nimport Steps from './Steps'\nimport Textfield from './Textfield';\nimport { truncateMiddle } from '../utils';\n// import { tronWeb } from '../views/dashboard/TestTron';\n\nimport { formatToBN, getBalance, getDisplayBalance } from '../utils/formatBalance';\nimport useCore from '../hooks/useCore';\nimport useConfirmTxn from '../hooks/useConfirmTxn';\nimport { BigNumber, ethers } from 'ethers';\nimport useGetConfirmReq from '../hooks/useGetConfirmReq';\nimport useExecuteTxn from '../hooks/useExecuteTxn';\nimport useConfirm from '../hooks/tron/useConfirm';\nimport useExecute from '../hooks/tron/useExecute';\nimport useNoOfConfimReq from '../hooks/tron/useNoOfConfimReq';\nimport { useGetActiveBlockChain, useGetActiveChainId } from '../state/chains/hooks';\nimport { useGetLoader, useUpdateLoader } from '../state/application/hooks';\nimport { useGetRequiredCount, useGetSingleTransaction, useGetOwners, useGetConfirmationCount, useGetTxnFromHash } from '../hooks/multisig/useMultiSig';\nimport useGetTokenDetails from '../hooks/useGetTokenDetails';\nimport ProgressModal from './ProgressModal';\nimport { useGetTronConfirmationCount, useGetTronTokenDetails, useTronGetIsExecuted } from '../hooks/tron/useTronMultisig';\n\n\nfunction ConfirmationStep({allTransactions}) {\n      const core = useCore()\n\n      const {myAccount, provider, config, _activeNetwork, contracts } = core\n      const { chain: chainName} = useNetwork()\n      const chain = useGetActiveBlockChain()\n      const updateLoader = useUpdateLoader()\n      const currentLoaderState = useGetLoader()\n      const {fetch} = useGetTokenDetails();\n      const fetchTronTokenDetails = useGetTronTokenDetails()\n\n      const [finalData, setFinalData] = useState<any[]>([])\n      const [finalTronData, setFinalTronData] = useState<any[]>([])\n\n      // Goerli network\n      let testOwners: any = useGetOwners()\n      let confirmReq = useGetRequiredCount()\n      const disableConfirm = testOwners?.includes(myAccount)\n      const confirmTxnAction = useConfirmTxn()\n      const executeTxAction = useExecuteTxn()\n      const setIsExecuted = useGetSingleTransaction()\n      const getTxnFromHash = useGetTxnFromHash()\n      const setConfirmationCount = useGetConfirmationCount()\n      let etherscanUrl = config[chainName?.id || _activeNetwork].etherscanUrl\n      // const chaindId = useGetActiveChainId()\n            \n      // Nile network\n      let noOfConfirmReq = useNoOfConfimReq()\n      const confirmTronTxnAction = useConfirm()\n      const executeTronTxnAction = useExecute()\n      const setTronIsExecuted = useTronGetIsExecuted()\n      const setTronConfirmationCount = useGetTronConfirmationCount()\n\n      useEffect(() => {\n            getFinalData()\n      }, [allTransactions, chain])\n\n\n      const ConfirmTxn = (txIndex: number, _typeOfTx: string) => {\n\n            updateLoader(true)\n\n            if(chain != \"Goerli\"){\n                  confirmTronTxnAction(txIndex)  \n            }else{\n                  confirmTxnAction(txIndex, _typeOfTx)\n            }\n\n      }\n\n      const executeTxn = (txIndex: number, _typeOfTx: string) => {\n            updateLoader(true)\n\n            if(chain != \"Goerli\"){\n                  executeTronTxnAction(txIndex)  \n            }else{\n                  executeTxAction(txIndex, _typeOfTx)\n            }\n\n      }\n\n      const getDate = (val: number) => {\n            let timestamp\n            if(val.toString().length > 10){\n                  timestamp = val/1000\n            }else {\n                  timestamp = val\n            }\n            let date = _moment.unix(timestamp).utc().format(\"MMM Do YYYY h:mm:ss a\");\n            if(timestamp == 0) return 'N/A'\n            return `${date}`\n      }\n\n      const timeAgo = (val: number) => {\n            let timestamp\n            if(val.toString().length > 10){\n                  timestamp = val/1000\n            }else {\n                  timestamp = val \n            }\n            let date = _moment.unix(timestamp).fromNow();\n            return date\n      }\n\n      const activeStepHandler = (confirmCount, isExecuted) => {\n\n            if(chain == \"Goerli\"){\n                  if(isExecuted) return 3\n                  else if(confirmCount < confirmReq) return 1\n                  else if(confirmCount == confirmReq) return 2\n                  else return\n            }else{\n                  if(isExecuted) return 3\n                  else if(confirmCount < noOfConfirmReq) return 1\n                  else if(confirmCount == noOfConfirmReq) return 2\n                  else return \n            }\n      }\n\n      const getFinalData = () => {\n            let token, value, symbol, toAdrs\n\n            if(chain == \"Goerli\"){\n                  _.uniqWith(allTransactions).map(async(item: any, i: number) => {\n                        const executed = await setIsExecuted(Number(item.index))\n                        let numConfirmations = await setConfirmationCount(Number(item.index))\n                        token = item.submitResponse.input.slice(10, 74)\n                        token =  `0x${token.slice(24, token.length)}`\n                        let tokenDetails = await fetch(token)\n                        symbol = tokenDetails?.value.symbol\n                        value = item.submitResponse.input.slice(338, 402) \n                        value = ethers.utils.formatEther(`0x${value}`)\n                        toAdrs = item.submitResponse.input.slice(274, 338)\n                        toAdrs = `0x${toAdrs.slice(24, toAdrs.length)}`\n      \n                        setFinalData(prev => {\n      \n                              if(prev.length) {\n                                    const newState = prev.map((txns) => {\n                    \n                                          if(txns.index == item.index){\n                                            return {...item, token, symbol, value, executed, numConfirmations, toAdrs}\n                                          }\n                                          return txns\n                                        })\n                                    return newState;\n                              }else{\n                                    return [...prev, item]\n                              }\n                            })\n                  })\n            }else {\n                  let arr1: any[] = []\n\n                  _.uniqWith(allTransactions).map(async(item: any, i: number) => {\n                        \n                        const executed = await setTronIsExecuted(item.index)\n                        let numConfirmations = await setTronConfirmationCount(Number(item.index))\n                        token = item.submitResponse.input.slice(8, 72)\n                        token =  `${token.slice(24, token.length)}`\n                        let tokenDetails = await fetchTronTokenDetails(`41${token}`)\n                        symbol = tokenDetails?.symbol\n                        toAdrs = item.submitResponse.input.slice(272, 336)\n                        toAdrs = `${toAdrs.slice(24, toAdrs.length)}`\n\n                        value = item.submitResponse.input.slice(336, 400) \n                        value = ethers.utils.formatEther(`0x${value}`)\n\n                        // arr1.push({...item, token, symbol, value, executed, numConfirmations, toAdrs})\n                              \n                        setFinalTronData(prev => [...prev, {...item, token, symbol, value, executed, numConfirmations, toAdrs}])\n                  })\n\n                  \n            }\n\n            \n      }\n\n      console.log(\"ConfirmationStep\", finalData, finalTronData)\n\n//   return <div />\n  return (\n      <div>\n            <ProgressModal currentLoaderState={currentLoaderState} />\n            <Textfield\n                  text={'Transactions'}\n                  fontSize={'24px'}\n                  fontWeight={'bold'}\n                  className={'m-b-15'}\n            />\n            {/* <button onClick={() => ConfirmTxn(1, \"mint\")}>confirm</button> */}\n            {\n                   _.uniqWith(chain == \"Goerli\" ? finalData : finalTronData, (arrVal, othVal) => arrVal.index == othVal.index)?.sort((a, b) => b.index - a.index).map((item: any, i) => {\n                        const {submitResponse, toAdrs: submitTo, index, token, symbol, value, confirmData, typeOfTxn, executed, numConfirmations} = item\n                        const {from: submitFrom, hash: submitHash, timeStamp: submitTime } = submitResponse\n                        \n                        return(\n                              <Accordion key={i} style={{marginBottom: '16px'}}>\n                                    <AccordionSummary\n                                          // expandIcon={<ExpandMoreIcon />}\n                                          >\n                                          <div\n                                                className={'grid-item header'}   \n                                                style={{width: '100%'}}                                 \n                                          >\n                                                <div>\n                                                      <Textfield \n                                                            text={index}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}    \n                                                      />\n                                                </div>\n                                                <div>\n                                                      <Textfield \n                                                            text={`${typeOfTxn} (${value} ${symbol})`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </div>\n                                                <div>\n                                                      <Textfield \n                                                            text={`${timeAgo(submitTime)}`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </div>\n                                                <div className='row-left-center'>\n                                                      <div><Icon className='m-r-5 headerIcon'>supervisor_account</Icon> </div>\n                                                      <Textfield \n                                                            text={ executed ? `Fullfilled` : `${numConfirmations} out of ${confirmReq}`}\n                                                            color={'#aaa'}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                </div>\n                                                <div style={{width: '180px'}} className={\"row-allcenter\"}>\n                                                      <Textfield \n                                                            text={`${\n                                                                  chain == 'Goerli' ? \n                                                                  executed ? \"Success\" : numConfirmations < confirmReq ? 'Needs Confirmation' : 'Needs Execution' :\n                                                                  executed ? \"Success\" : numConfirmations < noOfConfirmReq ? 'Needs Confirmation' : 'Needs Execution'\n                                                                  // numConfirmations < noOfConfirmReq ? 'Needs Confirmation' : !executed ? 'Needs Execution' : 'Success'\n                                                            }`}\n                                                            // color={'#ed7117'}\n                                                            color={`${\n                                                                  chain == 'Goerli' ? \n                                                                  // _numConfirmations < confirmReq ? '#FF4500' : !_executed ? '#FF4500' : '#228B22' :\n                                                                  executed ? '#228B22' : numConfirmations < confirmReq ? '#FF4500' : \"\" :\n                                                                  executed ? '#228B22' :  numConfirmations < noOfConfirmReq ? '#FF4500' : \"\"\n                                                                  // numConfirmations < noOfConfirmReq ? '#FF4500' : !executed ? '#FF4500' : '#228B22'\n                                                            }`}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                      \n                                                </div>  \n                                                <div>&nbsp; &nbsp; <KeyboardArrowUpIcon /> </div>\n                                          </div>\n                                    </AccordionSummary>\n                                    <AccordionDetails>\n                                          <div className='flex' style={{width: '100%'}}>\n                                                <div style={{flex: 3, display: 'flex', flexDirection: 'column'}}>\n                                                      <div className=\"grid-item flex1\">\n                                                            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                                                            <Textfield \n                                                                  text={`${typeOfTxn} ${value} ${symbol} (${ truncateMiddle(chain == \"Goerli\" ? token : window.tronWeb.address.fromHex(`41${token}`), 12, '...')}) to ${ chain == \"Goerli\" ? submitTo : window.tronWeb.address.fromHex(`41${submitTo}`)}`}\n                                                                  color={'#000'}\n                                                                  fontSize={'15px'}\n                                                                  className={'m-b-15'}\n                                                                  fontWeight={'bold'}\n                                                            />\n                              \n                                                                  {/* <div>\n                                                                        <Icon className='cardIcon'>content_copy</Icon>\n                                                                  </div>  */}\n                              \n                                                            </div>\n                                                      \n                                                            <div>\n                                                                  {\n                                                                        chain == \"Goerli\" ?\n\n                                                                        executed ? <div /> :\n                                                                        numConfirmations < confirmReq  ?\n                                                                        <Button\n                                                                              onClick={() => ConfirmTxn(index, typeOfTxn)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n                                                                              disabled={currentLoaderState}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Confirm\n                                                                        </Button> :\n                                                                        <Button\n                                                                              onClick={() => executeTxn(index, typeOfTxn)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n\n                                                                              disabled={currentLoaderState}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Execute\n                                                                        </Button>  :\n\n                                                                        numConfirmations < noOfConfirmReq ?\n                                                                                                                                          \n                                                                        <Button\n                                                                              onClick={() => ConfirmTxn(index, typeOfTxn)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n\n                                                                              // disabled={!disableConfirm}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Confirm\n                                                                        </Button> :\n                                                                        !executed ?\n                                                                        <Button\n                                                                              onClick={() => executeTxn(index, typeOfTxn)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n\n                                                                              // disabled={!disableConfirm}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Execute\n                                                                        </Button> : <div /> \n                                                                  }\n                                                            </div>\n                              \n                                                      </div>  \n                                                      <div className=\"grid-item flex1\">\n                                                            <div className='flex m-b-10'>\n                                                                  <Textfield \n                                                                        text={'Transaction ID:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  <div className='flex flex4'style={{alignItems: 'flex-start'}}>\n                                                                        <Textfield \n                                                                              text={index}\n                                                                              color={'#000'}\n                                                                              fontSize={'14px'}\n                                                                              className={'m-r-10'}\n                                                                        />\n                                                                        {/* <Icon className='m-r-5 cardIcon'>content_copy</Icon> */}\n                                                                  </div>\n                                                            </div>\n                                                            <div className='flex m-b-10'>\n                                                                  <Textfield \n                                                                        text={'Created:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  <Textfield \n                                                                        text={timeAgo(submitTime) + ` (${getDate(submitTime)} +UTC)`}\n                                                                        color={'#000'}\n                                                                        fontSize={'14px'}\n                                                                        className={'flex4'}\n                                                                  />\n                                                            </div>\n                                                            <div className='flex' style={{ marginBottom: '20px'}}>\n                                                                  <Textfield \n                                                                        text={'Executed:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  \n                                                                  {\n                                                                        (executed && numConfirmations > 0 && confirmData ) && \n                                                                        <Textfield \n                                                                              text={timeAgo(confirmData[confirmData?.length - 1].timeStamp) + ` (${getDate(confirmData[confirmData?.length - 1].timeStamp)} +UTC)`}\n                                                                              color={'#000'}\n                                                                              fontSize={'14px'}\n                                                                              className={'flex4'}\n                                                                        />\n                                                                  }\n                                                            \n                                                            </div>\n                                                            <div style={{paddingBottom: '15px', fontSize: '16px'}}>\n                                                                  <a \n                                                                        target=\"_blank\"\n                                                                        href={ chain == \"Goerli\" ?`${etherscanUrl}/tx/${submitHash}` : `https://nile.tronscan.org/#/transaction/${submitHash}`}>\n                                                                              View on explorer\n                                                                  </a>\n\n                                                            </div>\n                                                            \n                                                      </div>\n                                                </div>\n                                                <div className=\"grid-item \" style={{flex: 2}}>\n                                                      <Steps\n                                                            chain={chain}\n                                                            activeStep={activeStepHandler(numConfirmations, executed)}\n                                                            stepState={executed}\n                                                            stepData={{submitHash, submitFrom, submitTime, executed ,numConfirmations, confirmData}}\n                                                      />\n                                                </div>\n                                                \n                                          </div>\n\n                                    </AccordionDetails>\n                              </Accordion>\n                        )\n                  })\n            }\n      </div>\n     \n  )\n}\n\nexport default ConfirmationStep","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport useCore from \"./useCore\";\n\n\nconst useGetOwners = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState([])\n\n  const fetchData = useCallback(async () => {\n    const contract = await core.contracts[`${chain?.id}`].MultiSig;\n    const res = await contract.getOwners()\n\n    setResponse(res)\n  }, [chain]) \n\n  useEffect(() => {\n\n    if(core){\n      fetchData()\n        .catch((err) => setResponse([]))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetOwners","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\n\nconst useGetTokenBalance = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  let balance\n  const fetchData = async (address: string, stableCoin: string) => {\n    const contract = await core.contracts[`${chain?.id || core._activeNetwork}`][stableCoin];\n    const res = await contract.balanceOf(address)\n    console.log(\"useGetTokenBalance res\", res)\n    balance = getDisplayBalance(res)\n\n    return balance\n  }\n\n\n  return {fetchData}\n\n}\n\nexport default useGetTokenBalance","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n\n\nconst useGetTronTokenBalance = () => {\n\n  let balance\n  const fetchTronTokenBal = async (address: string, stableCoin: string) => {\n    let contract = await window.tronWeb.contract().at(stableCoin);\n    const res = await contract.balanceOf(address).call()\n    console.log(\"useGetTronTokenBalance res\", res)\n    balance = getDisplayBalance(res)\n\n    return balance\n  }\n\n  return {fetchTronTokenBal}\n\n}\n\nexport default useGetTronTokenBalance","import React, { useEffect, useState } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Snackbar,\n  Grid,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { useAccount, useNetwork } from 'wagmi'\n\nimport { formatToBN, getBalance } from '../../../utils/formatBalance';\nimport ConfirmationStep from '../../../components/ConfirmationStep';\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction';\nimport useGetAllMultiSigTxns from '../../../hooks/useGetAllMultiSigTxns';\nimport useGetOwners from '../../../hooks/useGetOwners';\nimport useCore from '../../../hooks/useCore';\nimport { BigNumber, ethers } from 'ethers';\nimport useGetAllTronTxns from '../../../hooks/tron/useGetAllTronTxns';\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport Textfield from '../../../components/Textfield';\nimport { useAllTransactions } from '../../../state/transactions/hooks';\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\nimport useGetTokenBalance from '../../../hooks/useGetTokenBalance';\nimport useGetTokenDetails from '../../../hooks/useGetTokenDetails';\nimport useGetTronOwners from '../../../hooks/tron/useGetTronOwners';\nimport { tronStableCoins } from '../../../utils/constants';\nimport useGetTronTokenBalance from '../../../hooks/tron/useGetTronTokenBalance';\n\nfunction Burn({ ethTxns, tronTxns }) {\n  const { tokens, _activeNetwork } = useCore()\n  const { chain: chainName } = useNetwork()\n\n  // const { myAccount } = core\n  const { address: myAccount } = useAccount()\n\n  console.log(\"BurnmyAccount\", myAccount)\n  const chain = useGetActiveBlockChain()\n\n  let contractOwners: any = useGetOwners()\n  const tronContractOwners = useGetTronOwners()\n\n  // let allTx = Object.entries(allTransactions)?.map((key) => key[1])?.filter((tx) => tx.txDetail._typeOfTx == 1)\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n\n  // let allTronTxns = useGetAllTronTxns()\n  // allTronTxns = allTronTxns.filter((tx) => tx._typeOfTx.toNumber() == 1)\n\n  const [address, setAddress] = useState<string>('')\n  const [amount, setAmount] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [stableCoinDetails, setStableCoinDetails] = useState<any>()\n  const [allTransactions, setAllTransactions] = useState<any>([])\n  const [finalEthTxns, setFinalEthTxns] = useState<any>([])\n  const [finalTronTxns, setFinalTronTxns] = useState<any>([])\n\n  const burnTokenAction = useSubmitTransaction(\"burn\", address, amount, stableCoin)\n  const submitTronTxnAction = useSubmit(\"burn\", address, amount, stableCoin)\n  const { fetchData } = useGetTokenBalance();\n  const { fetchTronTokenBal } = useGetTronTokenBalance();\n\n  useEffect(() => {\n    if (address.length > 0 && stableCoin.length > 0)\n      getTokenDetails()\n  }, [stableCoin, address])\n\n  useEffect(() => {\n    sortTransactions()\n  }, [ethTxns, tronTxns, chain])\n\n  const sortTransactions = async () => {\n    let ethTxnsArr: any[] = [], tronTxnsArr: any[] = []\n    ethTxns.forEach(async (item) => {\n      if (item.submitResponse.input.includes(\"9dc29fac\")) {\n        ethTxnsArr.push({...item, typeOfTxn: \"Burn\"})\n      }\n    })\n\n    setFinalEthTxns(ethTxnsArr)\n\n    tronTxns.forEach(async (item) => {\n      if (item.submitResponse.input.includes(\"9dc29fac\")) {\n        tronTxnsArr.push({...item, typeOfTxn: \"Burn\"})\n      }\n    })\n\n    setFinalTronTxns(tronTxnsArr)\n\n  }\n\n  const submitTx = async () => {\n    updateLoader(true)\n\n    if (chain == 'Goerli') {\n      burnTokenAction(() => { }, () => { })\n    }\n    if (chain == \"Nile\") {\n      submitTronTxnAction()\n    }\n  }\n\n  const handleCoinChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const getTokenDetails = async () => {\n    console.log(\"getTokenDetails stableCoin\", stableCoin, address)\n    let tokenDetails\n    if(chain == \"Goerli\"){\n      tokenDetails = await fetchData(address, stableCoin)\n    }else {\n      tokenDetails = await fetchTronTokenBal(address, stableCoin)\n    }\n    console.log(\"getTokenDetails\", tokenDetails)\n    setStableCoinDetails(tokenDetails)\n  }\n\n  const disableSubmitBtn = address && (chain == \"Goerli\" ? ethers.utils.isAddress(address) :  window.tronWeb.isAddress(address)) \n    && amount && Number(amount) <= Number(stableCoinDetails) && !!stableCoin && chain && \n    (chain == \"Goerli\" ? contractOwners?.includes(myAccount) : tronContractOwners?.includes(window.tronWeb.defaultAddress.base58))\n\n  console.log(\"allTransactions\", allTransactions)\n\n  return (\n    <div style={{ marginLeft: '260px', marginRight: '20px' }}>\n\n      <Card style={{ marginBottom: '15px' }}>\n        <CardContent className='p15'>\n          <Textfield\n            text={'Burn the Stablecoin'}\n            fontSize={'24px'}\n            fontWeight={'bold'}\n            className={'m-b-15'}\n          />\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                helperText=\"This is the address to which token to be burned\"\n                required\n                id=\"outlined-email\"\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e: any) => setAddress(e.target.value)}\n                value={address}\n                fullWidth\n                size='small'\n              // variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText={`This is the amount of token to be burned. ${stableCoin && `Max value: ${stableCoinDetails}`} `}\n                required\n                label=\"Amount\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e: any) => setAmount(e.target.value)}\n                value={amount}\n                fullWidth\n                size='small'\n              // variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the token to be burned\"\n                required\n                select\n                label=\"Stablecoin\"\n                value={stableCoin}\n                onChange={handleCoinChange}\n                fullWidth\n                // variant=\"outlined\"\n                size='small'\n              >\n\n                {\n                    chain == \"Nile\" ? \n                      tronStableCoins?.map((coin) => \n                        (<MenuItem\n                          key={coin.symbol}\n                          value={coin.contractAdrs}>\n                            {coin.symbol}\n                        </MenuItem>)\n                      ) \n                      :\n\n                      tokens[chainName?.id || _activeNetwork] ? Object.entries(tokens[chainName?.id || _activeNetwork])?.map((option) => (\n                        <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                          {option[1].symbol}\n                        </MenuItem>\n                      ))\n                      : <MenuItem>No coins available on this chain</MenuItem>\n                  }\n              </TextField>\n            </Grid>\n            <Grid item xs={9}></Grid>\n            <Grid item xs={3}>\n              <Button\n                disabled={!disableSubmitBtn}\n                onClick={submitTx}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                style={{ position: 'relative' }}\n              >\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n\n\n        </CardContent>\n\n      </Card>\n\n      {\n        chain == \"Goerli\" ? \n        <ConfirmationStep allTransactions={finalEthTxns} /> :\n        <ConfirmationStep allTransactions={finalTronTxns} /> \n      }\n\n    </div>\n  )\n}\n\nexport default Burn\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport useCore from \"./useCore\";\n \nconst useFreezeToken = () => {\n  const core = useCore();\n  const { chain } = useNetwork();\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  const freeze = async (to: string, stableCoin: string) => {\n    try {\n      const contract = await core.contracts[`${chain?.id || core._activeNetwork}`][stableCoin];\n      console.log(\"contract\", contract)\n      const res = await contract.freeze(to);\n      const tx = await res.wait();\n\n      if (tx?.status === 1) {\n        let summary = \"Wallet address is frozen!\";\n\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useFreezeToken error\", e);\n      addPopup({\n        error: {\n          message: formatErrorMessage(e?.data?.message || e?.message),\n          stack: e?.stack,\n        },\n      });\n    }\n  }\n\n  return freeze\n}\nexport default useFreezeToken;\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\nconst useUnFreezeToken = () => {\n  const core = useCore();\n  const { chain } = useNetwork();\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  const unfreeze = async (to: string, stableCoin: string) => {\n    try {\n      const contract = await core.contracts[`${chain?.id || core._activeNetwork}`][stableCoin];\n      console.log(\"contract\", contract, stableCoin)\n\n      const res = await contract.unfreeze(to);\n      const tx = await res.wait();\n\n      if (tx?.status === 1) {\n        let summary = \"Wallet address is unfrozen!\";\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useUnFreezeToken error\", e);\n      addPopup({\n        error: {\n          message: e?.data?.message || e?.message,\n          stack: e?.stack,\n        },\n      });\n    }\n  }\n\n  return unfreeze\n};\n\nexport default useUnFreezeToken;\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport formatErrorMessage from \"../../utils/formatErrorMessage\";\n\n \nconst useFreezeTokenTron = () => {\n\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  const freeze = async (to: string, stableCoin: string) => {\n    try {\n      const contract = await window.tronWeb.contract().at(stableCoin)\n      console.log(\"contract\", contract)\n      const res = await contract.freeze(to).send()\n      console.log(\"freeze res\", res)\n      let txnInfo = await window.tronWeb.trx.getTransaction(res);\n      console.log(\"freeze txnInfo\", txnInfo)\n      if (txnInfo.ret[0].contractRet == \"SUCCESS\") {\n        let summary = \"Wallet address is frozen!\";\n\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: res,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useFreezeTokenTron error\", e);\n    //   addPopup({\n    //     error: {\n    //       message: formatErrorMessage(e?.data?.message || e?.message),\n    //       stack: e?.stack,\n    //     },\n    //   });\n    }\n  }\n\n  return freeze\n}\nexport default useFreezeTokenTron;\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport formatErrorMessage from \"../../utils/formatErrorMessage\";\n\n \nconst useUnFreezeTokenTron = () => {\n\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  const unfreeze = async (to: string, stableCoin: string) => {\n    try {\n      const contract = await window.tronWeb.contract().at(stableCoin)\n      console.log(\"contract\", contract)\n      const res = await contract.unfreeze(to).send()\n      let txnInfo = await window.tronWeb.trx.getTransaction(res);\n\n      console.log(\"freeze txnInfo\", txnInfo)\n      if (txnInfo.ret[0].contractRet == \"SUCCESS\") {\n        let summary = \"Wallet address is unfrozen!\";\n\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: res,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useUnFreezeTokenTron error\", e);\n    //   addPopup({\n    //     error: {\n    //       message: formatErrorMessage(e?.data?.message || e?.message),\n    //       stack: e?.stack,\n    //     },\n    //   });\n    }\n  }\n\n  return unfreeze\n}\nexport default useUnFreezeTokenTron;\n","import {useEffect, useState} from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  MenuItem\n} from \"@material-ui/core\";\nimport {Puff} from \"react-loader-spinner\"\nimport { useNetwork } from 'wagmi'\nimport Textfield from '../../../components/Textfield'\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\n\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport useFreezeToken from '../../../hooks/useFreezeToken';\nimport useUnFreezeToken from '../../../hooks/useUnFreezeToken';\nimport ProgressModal from '../../../components/ProgressModal';\nimport useCore from '../../../hooks/useCore';\nimport { tronStableCoins } from '../../../utils/constants';\nimport useFreezeTokenTron from '../../../hooks/tron/useFreezeTokenTron';\nimport useUnFreezeTokenTron from '../../../hooks/tron/useUnFreezeTokenTron';\nimport { ethers } from 'ethers';\n\nfunction Freeze() {\n  const {tokens, _activeNetwork} = useCore()\n  const { chain: chainName} = useNetwork()\n  \n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  const chain = useGetActiveBlockChain()\n\n  const [addressToFreeze, setAddressToFreeze] = useState<string>('')\n  const [addressToUnFreeze, setAddressToUnFreeze] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [stableCoinUnfreeze, setStableCoinUnfreeze] = useState<string>('')\n\n  const freezeAction = useFreezeToken()\n  const unFreezeAction = useUnFreezeToken()\n\n  const freezeActionTron = useFreezeTokenTron()\n  const unFreezeActionTron = useUnFreezeTokenTron()\n\n  const handleCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const handleUnfreezeCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoinUnfreeze(event.target.value);\n  };\n\n  console.log('stableCoin', stableCoin)\n\n  const handleFreeze = () => {\n    if(chain == \"Goerli\"){\n      freezeAction(addressToFreeze, stableCoin)\n    }else {\n      freezeActionTron(addressToFreeze, stableCoin)\n    }\n    updateLoader(true)\n  }\n\n  const handleUnFreeze = () => {\n    if(chain == \"Goerli\"){\n      unFreezeAction(addressToUnFreeze, stableCoinUnfreeze)\n    }else {\n      unFreezeActionTron(addressToFreeze, stableCoin)\n    }\n    updateLoader(true)\n  }\n\n  const disableFreeze = stableCoin && addressToFreeze && chain == \"Goerli\" ? ethers.utils.isAddress(addressToFreeze) : window.tronWeb?.isAddress(addressToFreeze)\n  const disableUnFreeze = stableCoinUnfreeze && addressToUnFreeze  && chain == \"Goerli\" ? ethers.utils.isAddress(addressToUnFreeze) : window.tronWeb?.isAddress(addressToUnFreeze)\n  \n  return (\n    <div style={{marginLeft: '260px', marginRight: '20px', position: 'relative'}}>\n      <ProgressModal currentLoaderState={currentLoaderState} />\n      <Textfield\n        text={'Freeze a wallet'}\n        fontSize={'24px'}\n        fontWeight={'bold'}\n        className={'m-b-15'}\n        />\n      <Card style={{marginBottom: '30px'}}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the address to be frozen.\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddressToFreeze(e.target.value)}\n                value={addressToFreeze}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                  helperText=\"This is the stable coin to be frozen.\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoin}\n                  onChange={handleCoinChange}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                > \n                  {\n                    chain == \"Goerli\" ?\n                      Object.entries(tokens[chainName?.id || _activeNetwork]).map((option) => (\n                      <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                        {option[1].symbol}\n                      </MenuItem>\n                    )) :\n                    tronStableCoins.map((option) => (\n                      <MenuItem key={option.symbol} value={option.contractAdrs}>\n                        {option.symbol}\n                      </MenuItem>\n                    ))\n                }\n                </TextField> \n            </Grid>\n            <Grid item xs={9}></Grid>\n            <Grid item xs={3}>\n                      \n            <Button\n              onClick={handleFreeze}\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={!disableFreeze}\n              style={{position: 'relative'}}\n            >\n              <div>\n                Freeze\n              </div>\n            </Button>      \n            </Grid>\n          </Grid>\n          \n        </CardContent>\n\n      </Card>\n\n      <Textfield\n        text={'Unfreeze a wallet'}\n        fontSize={'24px'}\n        fontWeight={'bold'}\n        className={'m-b-15'}\n        />\n      <Card style={{marginBottom: '30px'}}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the address to be unfrozen.\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddressToUnFreeze(e.target.value)}\n                value={addressToUnFreeze}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                  helperText=\"This is the stable coin to be unfrozen.\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoinUnfreeze}\n                  onChange={handleUnfreezeCoinChange}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                >\n                   {\n                    chain == \"Goerli\" ?\n                      Object.entries(tokens[chainName?.id || _activeNetwork]).map((option) => (\n                      <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                        {option[1].symbol}\n                      </MenuItem>\n                    )) :\n                    tronStableCoins.map((option) => (\n                      <MenuItem key={option.symbol} value={option.contractAdrs}>\n                        {option.symbol}\n                      </MenuItem>\n                    ))\n                  }\n                </TextField> \n            </Grid>\n            <Grid item xs={9}></Grid>\n            <Grid item xs={3}>\n                      \n            <Button\n              onClick={handleUnFreeze}\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={!disableUnFreeze}\n              style={{position: 'relative'}}\n            >\n              <div>\n                Unfreeze\n              </div>\n            </Button>      \n            </Grid>\n          </Grid>\n          \n        </CardContent>\n\n      </Card>\n    </div>\n  )\n}\n\nexport default Freeze","import React, { useState, useEffect, useMemo } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  MenuItem\n} from \"@material-ui/core\";\nimport Web3 from 'web3';\nimport { useNetwork } from 'wagmi'\nimport { formatToBN, getBalance } from '../../../utils/formatBalance';\nimport useCore from '../../../hooks/useCore';\nimport ConfirmationStep from '../../../components/ConfirmationStep';\nimport { useWallet } from 'use-wallet';\nimport { BigNumber, ethers, utils } from 'ethers';\nimport useGetOwners from '../../../hooks/useGetOwners';\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction';\nimport { useAllTransactions, useClearAllTransactions } from '../../../state/transactions/hooks';\nimport useGetAllMultiSigTxns from '../../../hooks/useGetAllMultiSigTxns';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport useGetAllTronTxns from '../../../hooks/tron/useGetAllTronTxns';\nimport { useGetActiveBlockChain, useGetActiveChainId } from '../../../state/chains/hooks';\nimport Textfield from '../../../components/Textfield';\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\nimport Test from '../Test';\nimport { tronStableCoins } from '../../../utils/constants';\nimport useGetTronOwners from '../../../hooks/tron/useGetTronOwners';\n\nfunction Mint({ethTxns, tronTxns}) {\n\n  const core = useCore()\n  const {myAccount, provider, _activeNetwork, tokens, contracts } = core\n\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  const { chain: chainName} = useNetwork()\n\n  const chain = useGetActiveBlockChain()\n  const chaindId = useGetActiveChainId()\n  const fetchOwners = useGetTronOwners()\n\n  const [address, setAddress] = useState<string>('')\n  const [amount, setAmount] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [allTransactions, setAllTransactions] = useState<any>([])\n  const [finalTxns, setFinalTxns] = useState<any>([])\n  const [finalEthTxns, setFinalEthTxns] = useState<any>([])\n  const [finalTronTxns, setFinalTronTxns] = useState<any>([])\n  // let allTx = Object.entries(allTransactions)?.map((key) => key[1])?.filter((tx) => tx.txDetail._typeOfTx == 0)\n  // let allTronTxns = useGetAllTronTxns()\n  // allTronTxns = allTronTxns.filter((tx) => tx._typeOfTx.toNumber() == 0)\n\n  const contractOwners: any = useGetOwners()\n  const tronContractOwners = useGetTronOwners()\n \n  useEffect(() => {\n    sortTransactions()\n  }, [ethTxns, tronTxns, chain])\n\n\n  const sortTransactions = async () => {\n    let ethTxnsArr: any[] = [], tronTxnsArr: any[] = []\n    ethTxns.forEach(async (item) => {\n      if (item.submitResponse.input.includes(\"40c10f19\")) {\n        ethTxnsArr.push({...item, typeOfTxn: \"Mint\"})\n      }\n    })\n\n    setFinalEthTxns(ethTxnsArr)\n    console.log(\"Mint ethTxnsArr\", ethTxnsArr)\n\n    tronTxns.forEach(async (item) => {\n      if (item.submitResponse.input.includes(\"40c10f19\")) {\n        tronTxnsArr.push({...item, typeOfTxn: \"Mint\"})\n      }\n    })\n    console.log(\"sortTransactionsethTxnsArr\", tronTxnsArr)\n\n    setFinalTronTxns(tronTxnsArr)\n    console.log(\"Mint tronTxnsArr\", tronTxnsArr)\n\n  }\n\n  const handleCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const mintTokenAction = useSubmitTransaction(\"mint\", address, amount, stableCoin)\n  const submitTronTxnAction = useSubmit(\"mint\", address, amount, stableCoin)\n\n  const submitTx = async() => {\n    updateLoader(true)\n    if(chain == 'Goerli'){\n      mintTokenAction(() => {},() => {})\n    }\n\n    if(chain == 'Nile') {\n      submitTronTxnAction()\n    }\n  }\n\n  const disableMint = address && (chain == \"Goerli\" ? ethers.utils.isAddress(address) :  window.tronWeb.isAddress(address)) && amount && stableCoin && chain && (chain == \"Goerli\" ? contractOwners?.includes(myAccount) : tronContractOwners?.includes(window.tronWeb.defaultAddress.base58))\n\n  console.log(\"finalTxns\", finalEthTxns, finalTronTxns)\n\n  return (\n    <div style={{marginLeft: '260px', marginRight: '20px', position: 'relative',}}>      \n      <Card style={{marginBottom: '30px'}}>\n        <CardContent className='p15'>\n          <Textfield\n            text={'Mint the Stablecoin'}\n            fontSize={'24px'}\n            fontWeight={'bold'}\n            className={'m-b-15'}\n            />\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                helperText=\"This is the address to which token to be minted\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddress(e.target.value)}\n                value={address}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the amount of token to be minted\"\n                required\n                label=\"Amount\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAmount(e.target.value)}\n                value={amount}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                  helperText=\"This is the token to be minted\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoin}\n                  onChange={handleCoinChange}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                >\n                  {\n                    chain == \"Nile\" ? \n                      tronStableCoins?.map((coin) => \n                        (<MenuItem\n                          key={coin.symbol}\n                          value={coin.contractAdrs}>\n                            {coin.symbol}\n                        </MenuItem>)\n                      ) \n                      :\n\n                      tokens[chainName?.id || _activeNetwork] ? Object.entries(tokens[chainName?.id || _activeNetwork])?.map((option) => (\n                        <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                          {option[1].symbol}\n                        </MenuItem>\n                      ))\n                      : <MenuItem>No coins available on this chain</MenuItem>\n                  }\n                  \n                </TextField>           \n            </Grid>\n            <Grid item xs={6}></Grid>\n            <Grid item xs={3}>\n            </Grid>\n            <Grid item xs={3}>\n              <Button\n                onClick={submitTx}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                disabled={!disableMint}\n                style={{position: 'relative'}}\n              >\n                <div>Submit</div>\n\n              </Button>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    \n      {\n        chain == \"Goerli\" ? \n        <ConfirmationStep allTransactions={finalEthTxns} /> :\n        <ConfirmationStep allTransactions={finalTronTxns} /> \n\n      }\n    </div>\n  )\n}\n\nexport default Mint\n\n","import React from 'react'\n\nfunction Stats() {\n  return (\n    <div style={{marginLeft: '260px'}}>\n      <h1>Statistics</h1>\n    </div>\n  )\n}\n\nexport default Stats","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\nconst useGetTronTransactionCount = () => {\n\n  const [response, setResponse] = React.useState<any>()\n  \n\n  const fetchData = useCallback(async () => {\n    let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n    const res = await contract.transactionCount().call()\n    console.log(\"useGetTronTransactionCount\", res.toNumber())\n    setResponse(res.toNumber())\n  }, []) \n\n  useEffect(() => {\n      fetchData()\n        .catch((err) => setResponse([]))\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetTronTransactionCount","import axios from 'axios';\nimport { BigNumber, ethers } from 'ethers';\nimport web3 from \"web3\"\nimport React, { useEffect, useState } from 'react';\nimport {\n  BrowserRouter,\n  HashRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport useCore from './hooks/useCore';\nimport { useGetActiveChainId } from './state/chains/hooks';\n\nimport { useAllTransactions } from './state/transactions/hooks';\n\nimport Auth from './views/Auth';\nimport Dashboard from './views/dashboard';\nimport Dashbaord from './views/dashboard';\nimport Admin from './views/dashboard/Admin';\nimport Burn from './views/dashboard/Burn';\nimport Freeze from './views/dashboard/Freeze';\nimport Mint from './views/dashboard/Mint';\nimport Stats from './views/dashboard/Stats';\nimport { useGetConfirmationCount, useGetSingleTransaction } from './hooks/multisig/useMultiSig';\nimport useGetTokenDetails from './hooks/useGetTokenDetails';\nimport _ from 'lodash';\nimport { tronMultiSigContract } from './utils/constants';\nimport useGetTronTransactionCount from './hooks/tron/useGetTronTransactionCount';\n\n\nfunction Navigation() {\n  const { provider, contracts, } = useCore()\n\n  const [allApiTxns, setAllApiTxns] = useState<any>([])\n  const [allApiTronTxns, setAllApiTronTxns] = useState<any>([])\n  const tronTxnCount = useGetTronTransactionCount()\n\n  useEffect(() => {\n    getSubmitTxnsFromAPI()\n    if(tronTxnCount){\n      setAllApiTronTxns([])\n      getTronTxnsFromAPI()\n    }\n    \n  }, [tronTxnCount])\n\n\n  const getSubmitTxnsFromAPI = async() => {\n    let txns = await axios.get(`https://api-goerli.etherscan.io/api?module=account&action=txlist&address=${contracts[chaindId].MultiSig.address}&page=1&sort=asc&apikey=${process.env.REACT_APP_ETHERSCAN_API_KEY}`)\n    let index = -1\n    let arr = txns.data.result\n\n   if(!!arr){\n    arr?.forEach(async(res, i, arr) => {\n      if(res.functionName.toLowerCase().includes(\"submittransaction\")){\n        index = index + 1\n        setAllApiTxns(prev => [...prev, {index, submitResponse: res}])\n      }\n      else if(res.functionName.toLowerCase().includes(\"confirmtransaction\")) {\n        let txIndex = web3.utils.hexToNumberString(`0x${res.input.slice(10, res.input.length)}`)\n        setAllApiTxns(prev => {\n          const newState = prev.map((txns) => {\n\n            if(txns.index == txIndex){\n              let confirmData: any[] = []\n              if(txns.confirmData){\n               \n                confirmData = txns.confirmData\n                confirmData.push(res)\n              }else {\n                confirmData.push(res)\n              }\n              \n              return {...txns, confirmData}\n            }\n            return txns\n          })\n          return newState;\n        })\n      }else {}\n\n    })\n   }\n\n  }\n\n  const getTronTxnsFromAPI = async() => {\n    let timnow = Date.now() / 1000\n    console.log(\"allApiTronTxns timnow\", timnow, tronTxnCount)\n    let res = await axios.get(`https://nile.trongrid.io/v1/accounts/${tronMultiSigContract}/transactions?limit=200&min_timestamp=${timnow}`)\n \n    let data = res.data.data\n    let index = tronTxnCount\n\n    if(!!data){\n      data?.forEach((item) => {\n        if(item.raw_data?.contract[0].parameter.value.data?.includes(\"c6427474\") && item.ret[0].contractRet === \"SUCCESS\"){\n          index = index - 1\n          setAllApiTronTxns(prev => [...prev, {index, submitResponse: {from: window.tronWeb.address.fromHex(item.raw_data?.contract[0].parameter.value.owner_address), input: item.raw_data?.contract[0].parameter.value.data, hash: item.txID, timeStamp: item.raw_data.timestamp}}])\n        }else if(item.raw_data?.contract[0].parameter.value.data?.includes(\"c01a8c84\") && item.ret[0].contractRet === \"SUCCESS\"){\n          let txIndex = web3.utils.hexToNumberString(`0x${item.raw_data?.contract[0].parameter.value.data.slice(10, item.raw_data?.contract[0].parameter.value.data.length)}`)\n          console.log(\"txIndex\", txIndex)\n          setAllApiTronTxns(prev => {\n            const newState = prev.map((txns) => {\n              if(txns.index == txIndex){\n                let confirmData: any[] = []\n                if(txns.confirmData){\n                  confirmData = txns.confirmData\n                  confirmData.push({from: window.tronWeb.address.fromHex(item.raw_data?.contract[0].parameter.value.owner_address), input: item.raw_data?.contract[0].parameter.value.data, hash: item.txID, timeStamp: item.raw_data.timestamp})\n                }else {\n                  confirmData.push({from: window.tronWeb.address.fromHex(item.raw_data?.contract[0].parameter.value.owner_address), input: item.raw_data?.contract[0].parameter.value.data, hash: item.txID, timeStamp: item.raw_data.timestamp})\n                }\n                return {...txns, confirmData}\n              }\n              return txns\n            })\n            return newState;\n          })\n\n        }else {}\n      })\n    }\n\n  }\n\n  console.log(\"allApiTronTxns\", allApiTronTxns)\n  console.log(\"allApiTxns\", allApiTxns)\n  const chaindId = useGetActiveChainId()\n\n\n  return (\n    <HashRouter>\n      <div style={{ paddingBottom: '200px', backgroundColor: '#f2e6e6', minHeight: '100vh' }}>\n        <Dashboard />\n\n        <Routes>\n          <Route path={'/login'} element={<Auth />} />\n          <Route path={'/dashboard'}>\n            <Route path={'/dashboard/mint'} element={<Mint ethTxns={allApiTxns} tronTxns={allApiTronTxns} />} />\n            <Route path={'/dashboard/burn'} element={<Burn ethTxns={allApiTxns} tronTxns={allApiTronTxns} />} />\n            <Route path={'/dashboard/freeze'} element={<Freeze />} />\n            <Route path={'/dashboard/admin'} element={<Admin ethTxns={allApiTxns} tronTxns={allApiTronTxns} />} />\n            <Route path={'/dashboard/statistics'} element={<Stats />} />\n            <Route path='*' element={<div />} />\n\n          </Route>\n        </Routes>\n      </div>\n\n    </HashRouter>\n  );\n}\n\nexport default Navigation\n","import {createReducer, nanoid} from '@reduxjs/toolkit';\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal, updateBlockNumber, loaderVisibile} from './actions';\nimport {INITIAL_APP_STATE} from '../../utils/constants';\n\nexport default createReducer(INITIAL_APP_STATE, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const {chainId, blockNumber} = action.payload;\n      // console.log('reducer state action', state, action)\n \n      if (typeof state.blockNumber[chainId] !== 'number') {\n        console.log('reducer update if', )\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        console.log('reducer update else', )\n\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\n      state.popupList = (key\n          ? state.popupList.filter((popup) => popup.key !== key)\n          : state.popupList\n      ).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, {payload: {key}}) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    })\n    .addCase(loaderVisibile, (state, {payload: {isVisible}}) => {\n      console.log(state.isVisible, isVisible)\n      state.isVisible = isVisible;\n    })\n);\n","import {createReducer} from '@reduxjs/toolkit';\nimport { BigNumber } from 'ethers';\nimport _ from 'lodash';\n\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  saveTxn,\n  SerializableTransactionReceipt,\n  updateTransaction\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  // hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime?: number;\n  confirmedTime?: number;\n  from?: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: \n    {\n      [txIndex: number]: {\n        hash: string,\n        creation?: {\n          // hash: string;\n          approval?: { tokenAddress: string; spender: string };\n          summary?: string;\n          receipt?: SerializableTransactionReceipt;\n          lastCheckedBlockNumber?: number;\n          addedTime?: number;\n          confirmedTime?: number;\n          from?: string;\n        },\n        confirmation?: \n          { \n            // hash: string;\n            from?: string;\n            confirmedTime?: number;\n          }\n        ,\n        execution?: \n          { \n            // hash: string;\n            from?: string;\n            confirmedTime?: number;\n          }\n        ,\n        txDetail: {\n          _numConfirmations: any, \n          _typeOfTx: any, \n          _createdTime: any, \n          _executed: boolean, \n          _value: BigNumber, \n          _token: string, \n          txIndex: any, \n          _executedTime: any, \n          _to: string,\n        },\n        \n      },\n    }\n\n}\n\nexport interface TxnData {\n  hash: string[];\n}\n\n \nexport interface newTxnState {\n  [chainId: number]:\n    {\n      [txIndex: number]: TxnData\n    }\n\n}\n\n\nexport interface DashboardTxnDetails {\n  _numConfirmations: BigNumber, \n  _typeOfTx: BigNumber, \n  _createdTime: BigNumber, \n  _executed: boolean, \n  _value: BigNumber, \n  _token: string, \n  txIndex: BigNumber, \n  _executedTime: BigNumber, \n  _to: string\n}\n\nexport const initialState: newTxnState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      (transactions, {payload: \n        {chainId, txDetail, txIndex, hash, creation, confirmation, execution}}) => {\n        if (transactions[chainId]?.[txIndex]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n        let txs = transactions[chainId] ?? {};\n        // txs[txIndex] = {txDetail, hash, creation, confirmation, execution};\n\n        // let creationTxns = transactions[chainId][txIndex].creation ?? {};\n        // const {hash, approval, summary, from, addedTime, confirmedTime} = creation.txHash\n        // creationTxns[creation.txHash.hash] = {hash, approval, summary, from, addedTime: now(), confirmedTime};\n\n        // let confirmationTxns = transactions[chainId][txIndex].confirmation ?? {};\n        // const {hash: confirmHash, approval: confirmApproval, summary: confirmSummary, from: confirmFrom, addedTime: confirmAddedTime, confirmedTime: confirmConTime} = confirmation.txHash;\n        // confirmationTxns[confirmation.txHash.hash] = {hash: confirmHash, approval: confirmApproval, summary: confirmSummary, from: confirmFrom, addedTime: now(), confirmedTime: confirmConTime}\n\n        // let executionTxns = transactions[chainId][txIndex].execution ?? {};\n        // const {hash: executeHash, approval: executeApproval, summary: executeSummary, from: executeFrom, addedTime: executeAddedTime, confirmedTime: executeConTime} = execution.txHash;\n        // executionTxns[execution.txHash.hash] = {hash: executeHash, approval: executeApproval, summary: executeSummary, from: executeFrom, addedTime: now(), confirmedTime: executeConTime}\n\n        // txs[txIndex] = {creation: creationTxns, confirmation: confirmationTxns, execution: executionTxns, txDetail}\n\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(\n      updateTransaction,\n      (transactions, {payload: \n        {chainId, from, hash, approval, summary, txDetail}}) => {\n        // if (transactions[chainId]?.[hash]) {\n        //   throw Error('Attempted to add existing transaction.');\n        // }\n        \n        // let txs = transactions[chainId] ?? {};\n        // const mappedTxns = Object.entries(txs)\n        // const index = mappedTxns.findIndex(obj => obj[1].txDetail.txIndex == txDetail.txIndex)\n        // mappedTxns.splice(index, 1)\n        // txs = Object.fromEntries(mappedTxns) \n               \n        // txs[hash] = {hash, approval, summary, from, addedTime: now(), txDetail};\n        // transactions[chainId] = txs;\n\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(\n      checkedTransaction,\n      (transactions, {payload: {chainId, hash, blockNumber}}) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (!tx.lastCheckedBlockNumber) {\n          tx.lastCheckedBlockNumber = blockNumber;\n        } else {\n          tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n        }\n      },\n    )\n    .addCase(finalizeTransaction, (transactions, {payload: {chainId, txIndex, from, hash, creation, confirmation, execution}}) => {\n      const tx = transactions[chainId]?.[txIndex];\n      if (!tx) {\n        return;\n      }\n\n      // tx.creation = {receipt: creation.receipt, confirmedTime: Date.now(),}\n\n      // tx.creation.hash.receipt = receipt;\n      // tx.creation.hash.confirmedTime = now();\n    })\n    .addCase(saveTxn, (transactions, {payload: {txIndex, hash, chainId}}) => {\n      let txs = transactions[chainId] ?? {};\n\n      if(_.isEmpty(txs) || !txs[txIndex]){\n        txs[txIndex] = {hash: [hash]}\n      }else {\n        txs[txIndex].hash.push(hash)\n      }\n\n      transactions[chainId] = txs;\n\n    })\n);\n","import {createReducer} from '@reduxjs/toolkit';\n\nimport {ChainIdInitialState, BlockChaianitialState} from '../../utils/chains/constant';\n\nimport {updateChainId, updateBlockchain} from './actions';\n\nexport const chainId = createReducer(ChainIdInitialState, (builder) =>\n    builder\n      .addCase(updateChainId, (chainsConfig, {payload: {chainId}}) => {\n        chainsConfig.active = chainId;\n      })\n  /* .addCase(updateAvailableChains, (chainsConfig, {payload: {chains}}) => {\n     chainsConfig.availableNetworks = chains;\n   }),*/\n);\n\nexport const blockChain = createReducer(BlockChaianitialState, (builder) =>\n    builder\n      .addCase(updateBlockchain, (blockChainConfig, {payload: {chain}}) => {\n        blockChainConfig.active = chain;\n      })\n);\n\n","import {IChainIdInitialState, IBlockChaianitialState} from './interface';\n\nexport const ChainIdInitialState: IChainIdInitialState = {\n  active: 1,\n};\n\nexport const BlockChaianitialState: IBlockChaianitialState = {\n  active: 'Goerli'\n}\n","import {createLogger} from 'redux-logger';\nimport {load, save} from 'redux-localstorage-simple';\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport { composeWithDevTools } from '@redux-devtools/extension';\n\nimport application from './application/reducer';\nimport transactions from './transactions/reducer';\nimport {blockChain, chainId} from './chains/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions', 'slippage'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n    chainId,\n    blockChain,\n  },\n  \n  middleware: [\n    ...getDefaultMiddleware({serializableCheck: false, thunk: false}),\n    save({states: PERSISTED_KEYS}),\n    createLogger(),\n  ]\n  ,\n  preloadedState: load({states: PERSISTED_KEYS}),\n}\n\n);\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import {useCallback, useEffect, useState} from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import {useWallet} from 'use-wallet';\nimport {useDispatch} from 'react-redux';\nimport {useCallback, useEffect, useState} from 'react';\nimport { useNetwork } from 'wagmi'\n\nimport config from '../../config';\nimport {updateBlockNumber} from './actions';\nimport useDebounce from '../../hooks/useDebounce';\nimport {getDefaultProvider} from '../../utils/provider';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport {useGetActiveChainId} from \"../chains/hooks\";\n\nexport default function Updater(): null {\n  // const {ethereum, chainId} = useWallet();\n  const { chain } = useNetwork()\n\n  let id\n  if(chain){\n    id = chain.id\n  }\n  \n  const dispatch = useDispatch();\n  const windowVisible = useIsWindowVisible();\n  const activeChainId = useGetActiveChainId();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId: id,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state: any) => {\n        if (id === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return {chainId: id, blockNumber};\n          return {chainId: id, blockNumber: Math.max(blockNumber, state.blockNumber)};\n        }\n        return state;\n      });\n    },\n    [chain?.id, setState],\n  );\n\n  // The attach/detach listeners.\n  useEffect(() => {\n    if (!window.ethereum || !id|| !windowVisible) return undefined;\n    setState({chainId: chain?.id, blockNumber: null});\n\n    const provider = getDefaultProvider(config[activeChainId]);\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error: any) =>\n        console.error(`Failed to get block number for chainId: ${chain?.id}`, error),\n      );\n\n    provider.on('block', blockNumberCallback);\n\n    return () => {\n      provider.removeListener('block', blockNumberCallback);\n    };\n  }, [dispatch, chain?.id, window.ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  console.log('debouncedState', debouncedState)\n\n  useEffect(() => {\n    console.log('debouncedState', !debouncedState.chainId, !debouncedState.blockNumber, !windowVisible)\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import {useEffect, useState} from 'react';\n\n/**\n * Modified from https://usehooks.com/useDebounce/\n */\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay.\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport { useNetwork, useAccount } from 'wagmi'\n\nimport config from '../../config';\nimport useCore from '../../hooks/useCore';\nimport {getDefaultProvider} from '../../utils/provider';\nimport {useAddPopup, useBlockNumber, useUpdateLoader} from '../application/hooks';\nimport {useGetActiveChainId} from '../chains/hooks';\nimport {AppDispatch, AppState} from '../index';\n\nimport {checkedTransaction, finalizeTransaction} from './actions';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  console.log('shouldCheck', lastBlockNumber, tx)\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // Every 10 blocks if pending for longer than an hour.\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // Every 3 blocks if pending more than 5 minutes.\n    return blocksSinceCheck > 2;\n  } else {\n    // Otherwise every block.\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  // const {chainId, ethereum} = useWallet();\n  const core = useCore()\n\n  const { chain} = useNetwork()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n\n  const lastBlockNumber = useBlockNumber();\n  const activeChainId = useGetActiveChainId();\n  const updateLoader = useUpdateLoader()\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // Show d on confirm.\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !window.ethereum || !lastBlockNumber) {\n      {\n        console.log('updater if failed', !chainId, !window.ethereum, !lastBlockNumber, lastBlockNumber)\n        return;\n      }\n    }\n\n    const provider = getDefaultProvider(config[activeChainId]);\n\n    Object.entries(transactions)\n      .filter((tx, i) => shouldCheck(lastBlockNumber, {addedTime: Date.now()}))\n      .forEach((tx, i) => {\n\n        const hash = tx[1].hash[tx[1].hash.length - 1]\n\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              console.log(\"receipt if\")\n              dispatch(\n                finalizeTransaction({\n                  hash,\n                  chainId,\n                  txIndex: Number(tx[0]),\n                  from: receipt.from,\n                  creation: {\n                    receipt: {\n                      blockHash: receipt.blockHash,\n                      blockNumber: receipt.blockNumber,\n                      contractAddress: receipt.contractAddress,\n                      from: receipt.from,\n                      status: receipt.status,\n                      to: receipt.to,\n                      transactionHash: receipt.transactionHash,\n                      transactionIndex: receipt.transactionIndex,\n                    }\n                  }\n\n                }),\n              );\n              // console.log(\"loadertest upif\")\n              \n              // updateLoader(false)\n              // addPopup(\n              //   {\n              //     txn: {\n              //       hash,\n              //       success: receipt.status === 1,\n              //       summary: transactions[tx[1].txDetail.txIndex]?.summary,\n              //     },\n              //   },\n              //   hash,\n              // );\n            } else {\n              console.log(\"receipt else\")\n              console.log(\"loader upelse\")\n              updateLoader(false)\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, window.ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","import React from 'react';\n\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater/>\n    <TransactionUpdater/>\n  </>\n);\n\nexport default Updaters;\n","import styled from 'styled-components'\nimport React, {createContext, useCallback, useState} from 'react';\n\nimport {ModalsContext} from '../../utils/interface';\n \nexport const Context = createContext<ModalsContext>({\n  onPresent: (content) => {},\n  onDismiss: () => {},\n})\n\nconst Modals: React.FC = ({children}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [content, setContent] = useState<React.ReactNode>()\n\n  const handlePresent = useCallback((modalContent: React.ReactNode) => {\n    setContent(modalContent)\n    setIsOpen(true)\n  }, [setContent, setIsOpen])\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined)\n    setIsOpen(false)\n  }, [setContent, setIsOpen])\n\n  return (\n    <Context.Provider value={{\n      content,\n      isOpen,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss,\n    }}>\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss}/>\n          {React.isValidElement(content) && React.cloneElement(content)}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  )\n}\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nexport default Modals;\n","import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport Slide from '@material-ui/core/Slide';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {makeStyles, Theme} from '@material-ui/core/styles';\nimport {TransitionProps} from '@material-ui/core/transitions';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\n// import theme from '../../theme';\n// import '../../customCss/Custom-Snackbar.css';\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\nimport config from '../../config';\nimport {PopupContent} from '../../utils/interface';\nimport {useGetActiveBlockChain, useGetActiveChainId} from \"../../state/chains/hooks\";\nimport { useUpdateLoader } from '../../state/application/hooks';\n\ninterface TxButtonProps {\n  notificationCount?: number;\n  index?: number;\n  open?: boolean;\n  content?: PopupContent;\n  handleCancel?: Function;\n}\n\n\nconst CustomizedSnackbars: React.FC<TxButtonProps> = ({\n  open,\n  content,\n  handleCancel,\n}) => {\n\n  const [openSnackbar, setOpen] = React.useState(open);\n\n  const isScucess = content?.txn?.success;\n  const isLoading = content?.txn?.loading;\n  const chainId = useGetActiveChainId();\n  const updateLoader = useUpdateLoader()\n  const chain = useGetActiveBlockChain()\n\n  useEffect(() => {\n    setOpen(true)\n    console.log(\"loadertest CustomizedSnackbars\")\n    updateLoader(false)\n  }, [isScucess, isLoading])\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    \n    if (reason === 'clickaway') return;\n\n    setOpen(false);\n    if (handleCancel) handleCancel();\n\n    // setTimeout(() => {\n    //   window.location.reload()\n    // }, 2000)\n  };\n\n  function SlideTransition(props: TransitionProps) {\n    return <Slide {...props} direction=\"left\"/>;\n  }\n\n  const SnackHeader = () => {\n    if (isLoading) {\n      return (\n        <SnackBarInnerContainer>\n          <div className=\"row-left-center\">\n            <div onClick={handleClose} className={'m-r-10'}><WarningIcon /></div>\n            Transaction Pending\n          </div>\n          <div onClick={handleClose}> <CancelIcon /> </div>\n        </SnackBarInnerContainer>\n      )\n    } else if (isScucess) {\n      return (\n        <SnackBarInnerContainer> \n          <div className=\"row-left-center\">\n            <div onClick={handleClose} className={'m-r-10'}><CheckCircleIcon /></div>\n            <div>Transaction Successful</div>\n          </div>\n          <div onClick={handleClose}><CancelIcon /> </div>\n        </SnackBarInnerContainer> \n      )\n    } else {\n      return (\n        <SnackBarInnerContainer style={{background: '#B61500'}}>\n          <div className=\"row-left-center\">\n          <div onClick={handleClose} className={'m-r-10'}><WarningIcon /></div>\n            Transaction Failed\n          </div>\n          <div onClick={handleClose}><CancelIcon /></div>\n        </SnackBarInnerContainer>\n      )\n    }\n  }\n\n  const SnackBody = () => {\n    return (\n      <SnackBarBody>\n        <div>\n          {\n            content?.txn?.success || content?.txn?.loading\n            ? content?.txn?.summary || \"\"\n            : content?.error?.message || \"Error Occured\"\n          }\n        </div>\n        { \n          config[chainId].etherscanUrl !== '' && content?.txn?.hash && (\n            <AnchorTag\n              href={chain == \"Nile\" ? `https://nile.tronscan.org/#/transaction/${content?.txn?.hash}`  :`${config[chainId].etherscanUrl}/tx/${content?.txn?.hash}`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <div className={'m-r-5'}>View on Explorer</div>\n              <div onClick={handleClose} style={{display: 'flex', alignItems: 'center'}}>\n                <TrendingFlatIcon />\n              </div>\n\n            </AnchorTag>\n          )\n        }\n      </SnackBarBody>\n    )\n  }\n\n  return (\n    <div>\n      {openSnackbar && (\n        <Snackbar\n          open={openSnackbar}\n          autoHideDuration={5000}\n          TransitionComponent={SlideTransition}\n          onClose={handleClose}\n          anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n          <SnackBarParent>\n            {SnackHeader()}\n            {SnackBody()}\n          </SnackBarParent>\n        </Snackbar>\n      )}\n    </div>\n  );\n};\n\nconst AnchorTag = styled.a`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin-top: 4px;\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst SnackBarInnerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 50px;\n  padding: 0 12px 0 18px;\n  justify-content: space-between;\n  border-radius: 4px 4px 0 0;\n  background: #3f046d;\n  color: white;\n`;\n\nconst SnackBarBody = styled.div`\n  background: rgba(0, 0, 0, 0.2);\n  backdrop-filter: blur(70px);\n  border-radius: 0 0 4px 4px;\n  padding: 12px 12px 12px 52px;\n  font-weight: 600;\n  font-size: 14px;\n  width: 100%;\n  color: black;\n`;\n\nconst SnackBarParent = styled.div`\n  background: rgba(255, 255, 255, 0.02);\n  backdrop-filter: blur(70px);\n  border-radius: 4px 4px 0 0;\n  border: 1px solid;\n  width: 378px;\n  border-image-source: linear-gradient(180deg,\n  rgba(255, 116, 38, 0.1) 0%,\n  rgba(255, 255, 255, 0) 100%);\n  color: #ffffff;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 20px;\n  @media (max-width: 600px) {\n    width: 100%;\n  }\n`;\n\nexport default CustomizedSnackbars;\n","import React from 'react';\n\nimport TransactionSnackbar from './TransactionSnackbar';\nimport {useActivePopups} from '../../state/application/hooks';\n\nexport default function Popups() {\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      {\n        activePopups.map((p, i) => (\n          <TransactionSnackbar\n            key={i}\n            index={i}\n            notificationCount={i + 1}\n            open\n            content={p.content}\n          />\n        ))\n      }\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { SnackbarProvider } from \"notistack\";\nimport {Provider} from \"react-redux\";\nimport dotenv from 'dotenv'\nimport '@rainbow-me/rainbowkit/styles.css';\nimport {\n  getDefaultWallets,\n  RainbowKitProvider,\n  connectorsForWallets,\n  wallet,\n  lightTheme,\n  Chain\n} from '@rainbow-me/rainbowkit';\nimport {\n  chain,\n  configureChains,\n  createClient,\n  WagmiConfig,\n} from 'wagmi';\nimport { jsonRpcProvider } from 'wagmi/providers/jsonRpc';\nimport { publicProvider } from 'wagmi/providers/public';\nimport { useAccount, useSwitchNetwork, useNetwork } from 'wagmi'\n\nimport config, { getSupportedChains } from './config';\nimport ProtocolProvider from './context/Provider';\n// import ModalsProvider from './context/Modals'\nimport Navigation from './navigation';\nimport useCore from './hooks/useCore';\nimport Dashbaord from './views/dashboard';\nimport store from './state';\nimport Updaters from './state/Updaters';\nimport ModalsProvider from './context/Modals'\nimport Popups from './components/Popups';\nimport { useGetActiveChainId, useGetUpdateActiveChainId } from './state/chains/hooks';\nimport { ethers } from 'ethers';\nimport { alchemyProvider } from 'wagmi/providers/alchemy'\n\ndotenv.config()\n\n// Rainbowkit starts\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.goerli],\n  [\n    alchemyProvider({ apiKey: process.env.REACT_APP_ALCHEMY_GOERLI_API_KEY}),\n    // publicProvider()\n  ]\n);\n\nconst connectors = connectorsForWallets([\n  {\n    groupName: 'Recommended',\n    wallets: [\n      wallet.injected({ chains }),\n      wallet.rainbow({ chains }),\n      wallet.metaMask({chains}),\n      wallet.ledger({chains})\n    ],\n  },\n]);\n\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors,\n  provider,\n})\n\nconst WalletProvider = ({ children }: any) => {\n  return (\n    <WagmiConfig client={wagmiClient}>\n      <RainbowKitProvider \n        chains={chains} \n        coolMode={true}\n        theme={lightTheme({\n          accentColor: '#3f046d',\n          // accentColorForeground: 'white',\n          // borderRadius: 'medium',\n          // fontStack: 'system',\n        })}\n        >\n        <Updaters/>\n        <ProtocolProvider>\n          <AppContent>{children}</AppContent>\n        </ProtocolProvider>\n      </RainbowKitProvider>\n    </WagmiConfig>\n  );\n}\n\n// Rainbow kit code ends\n\n\nconst Providers: React.FC = ({children}) => {\n  return (\n    <Provider store={store}>\n      <WalletProvider>{children}</WalletProvider>\n    </Provider>\n\n  );\n};\n\nconst AppContent: React.FC = ({children}) => {\n\n  const core = useCore()\n  const { chain } = useNetwork()\n  const { isConnected } = useAccount()\n\n  const newprovider = ((window.ethereum != null) ? new ethers.providers.Web3Provider(window.ethereum): ethers.providers.getDefaultProvider())\n\n  newprovider.on(\"network\", (newNetwork, oldNetwork) => {\n    // When a Provider makes its initial connection, it emits a \"network\"\n    // event with a null oldNetwork along with the newNetwork. So, if the\n    // oldNetwork exists, it represents a changing network\n    if (oldNetwork) {\n        window.location.reload();\n    }\n  });\n\n  console.log('core', core)\n\n  // const {ethereum, chainId} = useWallet();\n  const setChainId = useGetUpdateActiveChainId();\n\n\n  useEffect(() => {\n    if (isConnected) \n      // @ts-ignore\n      setChainId(chain.id)\n  }, [isConnected]);\n\n  // if (!window.ethereum) {\n  //   console.log('no window ethereum')\n  //   return <div />\n  // };\n  if (!core){\n    console.log('no core');\n    return <div />\n  };\n\n  return(\n    <ModalsProvider>\n      <SnackbarProvider\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        maxSnack={2}\n        autoHideDuration={2500}\n      >\n        <>\n          <Popups/>\n          {children}\n        </>\n      </SnackbarProvider>\n    </ModalsProvider>\n  )\n}\n\nfunction App() {\n\n  return (\n    <Providers>\n      <Navigation />\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/components/confirmation.css'\nimport './styles/common.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}