{"version":3,"sources":["chainConfig/ethereum.ts","chainConfig/maticMumbai.ts","config.ts","protocol/ERC20.ts","protocol/deployments/abi.ts","utils/constants.ts","utils/provider.ts","protocol/index.tsx","state/chains/actions.ts","state/chains/hooks.ts","context/Provider/Provider.tsx","views/Auth/index.tsx","styles/material-dashboard-react.js","styles/adminStyle.js","styles/components/sidebarStyle.js","views/dashboard/Sidebar.tsx","utils/index.tsx","views/dashboard/index.tsx","utils/formatBalance.ts","hooks/useCore.ts","components/Steps.tsx","components/Textfield.tsx","hooks/useGetOwners.ts","state/application/actions.ts","state/application/hooks.ts","state/transactions/actions.ts","state/transactions/hooks.tsx","utils/formatErrorMessage.ts","hooks/useConfirmTxn.ts","hooks/useGetConfirmReq.ts","hooks/useExecuteTxn.ts","hooks/tron/useConfirm.ts","hooks/tron/useExecute.ts","hooks/tron/useNoOfConfimReq.ts","components/ConfirmationStep.tsx","hooks/useMultiSig.ts","hooks/tron/useSubmit.ts","hooks/tron/useGetAllTronTxns.ts","views/dashboard/Mint/index.tsx","views/dashboard/Burn/index.tsx","views/dashboard/Stats/index.tsx","navigation.tsx","state/application/reducer.ts","state/transactions/reducer.ts","state/chains/reducer.ts","utils/chains/constant.ts","state/index.ts","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","context/Modals/Modals.tsx","components/Popups/TransactionSnackbar.tsx","components/Popups/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["configurations","ethereum","networkName","networkDisplayName","chainId","etherscanUrl","defaultProvider","deployments","require","refreshInterval","gasLimitMultiplier","blockchainToken","blockchainTokenName","blockchainTokenDecimals","networkSetupDocLink","supportedTokens","decimalOverrides","USDC","maticMumbai","getSupportedChains","Object","keys","map","i","Number","ERC20","address","provider","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFro","balance","formatUnits","supply","toFixed","name","type","anonymous","inputs","indexed","internalType","constant","outputs","payable","stateMutability","abis","IERC20","Token3","MultiSig","DAY_IN_MS","WEEK_IN_MS","noOp","BigNumber","from","Date","now","Math","floor","pow","getDefaultProvider","config","_window","window","ethers","providers","Web3Provider","web3","currentProvider","JsonRpcProvider","Protocol","cfg","myAccount","signer","contracts","tokens","_activeNetwork","entries","chainIdString","networkConfig","deployment","abi","includes","ABIS","e","console","log","newProvider","Web3","getSigner","connect","values","token","dispatch","id","gas","multiplied","toNumber","gasLimit","updateChainId","createAction","updateBlockchain","useGetActiveBlockChain","useSelector","state","blockChain","active","useGetActiveChainId","updateId","useGetUpdateActiveChainId","avaiableIds","changedId","chains","useDispatch","useCallback","Context","createContext","core","ProtocolProvider","props","children","useWallet","useState","setCore","useEffect","newCore","unlockWallet","Provider","value","Auth","React","email","password","setState","className","Card","CardContent","Typography","gutterBottom","variant","component","color","TextField","required","label","margin","onChange","target","fullWidth","CardActions","Button","disabled","validator","isEmail","length","onClick","hexToRgb","input","replace","test","Error","first","second","last","toUpperCase","parseInt","drawerWidth","transition","container","padding","marginRight","overflow","height","marginLeft","defaultFont","fontFamily","fontWeight","lineHeight","primaryColor","warningColor","dangerColor","successColor","infoColor","roseColor","grayColor","blackColor","whiteColor","primaryBoxShadow","boxShadow","infoBoxShadow","successBoxShadow","warningBoxShadow","dangerBoxShadow","roseBoxShadow","title","background","paddingTop","borderTop","textDecoration","marginTop","marginBottom","minHeight","appStyle","theme","wrapper","position","top","mainPanel","breakpoints","up","width","overflowScrolling","content","sidebarStyle","drawerPaper","border","backgroundColor","bottom","left","zIndex","down","display","right","visibility","overflowY","textAlign","paddingRight","paddingLeft","transform","logo","logoLink","fontSize","logoLinkRTL","logoImage","maxHeight","img","verticalAlign","backgroundSize","backgroundPosition","opacity","list","paddingBottom","listStyle","item","itemLink","borderRadius","itemIcon","float","itemText","sidebarWrapper","fab","useStyles","makeStyles","styles","Sidebar","toggleDrawer","open","event","key","classes","links","List","url","icon","r","to","isActive","ListItem","button","Icon","classNames","ListItemText","primary","disableTypography","brand","Hidden","mdUp","implementation","Fab","size","style","outline","Drawer","anchor","paper","onClose","Divider","smDown","truncateMiddle","fullStr","strLen","separator","sepLen","charsToShow","frontChars","ceil","backChars","substr","chainID","Dashbaord","connectWalletOnPageLoad","connector","chain","tronLink","setChain","useHandleBlokchainChange","connectMetamask","setConnectMetamask","localStorage","getItem","Snackbar","anchorOrigin","vertical","horizontal","message","justifyContent","select","option","MenuItem","alignItems","tronWeb","defaultAddress","base58","slice","then","setItem","removeItem","catch","getBalance","decimals","err","getDisplayBalance","fractionDigits","formattedBalance","decimalsPointIndex","indexOf","error","formatToBN","split","beforeDecimals","afterDecimal","beforeDecimalsPrecisionText","afterDecimalsPrecisionText","fixedPrecisionValue","parseUnits","useCore","useContext","getStepContent","step","flexDirection","Steps","stepState","activeStep","setStepLabelColor","steps","Stepper","orientation","Step","StepLabel","StepContent","Textfield","text","useGetOwners","response","setResponse","fetchData","getOwners","res","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","addPopup","removePopup","useAddPopup","addTransaction","updateTransaction","clearAllTransactions","finalizeTransaction","checkedTransaction","useTransactionUpdater","transDetail","summary","approval","hash","_numConfirmations","_typeOfTx","_createdTime","_executed","_value","_token","txIndex","_executedTime","_to","txn","loading","success","txDetail","useAllTransactions","transactions","formatErrorMessage","toLowerCase","useConfirmTxn","confirmCallback","index","typeOfTx","confirmTransaction","wait","tx","setTimeout","status","getTransactionCount","txnsCount","getTransaction","removeAfterMs","data","stack","useGetConfirmReq","numConfirmationsRequired","useExecuteTxn","executeCallback","executeTransaction","useConfirm","at","send","useExecute","useNoOfConfimReq","call","ConfirmationStep","allTx","testOwners","confirmReq","confirmTxnAction","executeTxAction","noOfConfirmReq","confirmTronTxnAction","executeTronTxnAction","ConfirmTxn","executeTxn","getDate","val","timestamp","date","_moment","unix","format","timeAgo","fromNow","sort","a","b","confirmCount","isExecuted","Accordion","AccordionSummary","AccordionDetails","flex","href","useMultiSig","useTransactionAdder","onSuccess","onFailure","tokenAdrs","submitTransaction","toLocaleString","useSubmit","trc20TokenAddress","useGetAllTronTxns","prevState","stableCoins","contractAdrs","Mint","allTransactions","adddress","setAddress","setAmount","stableCoin","setStableCoin","filter","allTronTxns","contractOwners","mintTokenAction","submitTronTxnAction","submitTx","disableMint","Grid","spacing","xs","helperText","c","Burn","burnTokenAction","disableSubmitBtn","Stats","Navigation","path","element","createReducer","blockNumber","popupList","walletModalOpen","settingsMenuOpen","builder","addCase","action","payload","max","popup","concat","nanoid","show","forEach","p","getTime","txs","addedTime","mappedTxns","findIndex","obj","splice","fromEntries","lastCheckedBlockNumber","receipt","confirmedTime","chainsConfig","blockChainConfig","PERSISTED_KEYS","store","configureStore","reducer","application","middleware","getDefaultMiddleware","serializableCheck","thunk","save","states","createLogger","preloadedState","load","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","activeChainId","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","useDebounce","lastBlockNumber","useBlockNumber","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","transactionHash","transactionIndex","Updaters","onPresent","onDismiss","StyledModalWrapper","styled","div","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","undefined","isValidElement","cloneElement","AnchorTag","SnackBarInnerContainer","SnackBarBody","SnackBarParent","CustomizedSnackbars","handleCancel","openSnackbar","setOpen","isScucess","isLoading","handleClose","reason","autoHideDuration","TransitionComponent","Slide","direction","rel","SnackBody","Popups","activePopups","useMemo","useActivePopups","TransactionSnackbar","notificationCount","dotenv","Providers","WalletProvider","connectors","injected","walletconnect","rpcUrl","AppContent","setChainId","maxSnack","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.70ce7a27.chunk.js","sourcesContent":["import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    ethereum: {\n        networkName: 'Ethereum',\n        networkDisplayName: 'Ethereum',\n        chainId: 1,\n        etherscanUrl: 'https://etherscan.io',\n        defaultProvider:'https://silent-black-frost.quiknode.pro/6fbee126d2692f4c84d1c11167b0d7c4a77b8fb5/',\n        deployments: require('../protocol/deployments/ethereum.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'MATIC',\n        blockchainTokenName: 'MATIC',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"DBT\"\n        ], \n        decimalOverrides: {\n          'ARTH-DP': 18,\n          USDC: 6,\n          \"DBT\": 18\n        },\n    },\n}\n\nexport default configurations;","import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    80001: {\n        networkName: 'Matic Mumbai Testnet',\n        networkDisplayName: 'Polygon testnet',\n        chainId: 80001,\n        etherscanUrl: 'https://mumbai.polygonscan.com',\n        defaultProvider:\n          'https://matic-mumbai.chainstacklabs.com',\n        deployments: require('../protocol/deployments/maticMumbai.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'MATIC',\n        blockchainTokenName: 'MATIC',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"DBT\"\n        ], \n        decimalOverrides: {\n          'ARTH-DP': 18,\n          USDC: 6,\n          \"DBT\": 18\n        },\n      },\n}\n\nexport default configurations;","import { Configuration } from './utils/interface';\nimport ethereum from './chainConfig/ethereum'\nimport maticMumbai from './chainConfig/maticMumbai'\n\nconst configurations: { [env: string]: Configuration } = {\n  ...ethereum,\n  ...maticMumbai\n};\n\nexport default configurations;\n\nexport const getSupportedChains = (): number[] =>\n  Object.keys(configurations).map((i) => Number(i));\n","import { BigNumber, Contract } from 'ethers';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { TransactionResponse } from '@ethersproject/providers';\n\nclass ERC20 {\n  protected contract: Contract;\n\n  symbol: string;\n  address: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(\n    sender: string,\n    recipient: string,\n    amount: BigNumber,\n  ): Promise<TransactionResponse> {\n    return this.contract.transferFro(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nexport const ABI = [\n  {\n    name: 'Approval',\n    type: 'event',\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'spender', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transfer',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: 'address', name: 'owner', type: 'address' },\n      { internalType: 'address', name: 'spender', type: 'address' },\n    ],\n    name: 'allowance',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'spender', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'sender', type: 'address' },\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transferFrom',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","import IERC20 from \"./abi/IERC20.json\";\n\nimport { IABIS } from \"../../utils/interface\";\nimport Token3 from \"./abi/Token3.json\"\nimport MultiSig from \"./abi/MultiSig.json\"\n\nconst abis: IABIS = {\n      IERC20,\n      Token3,\n      MultiSig\n}\n\nexport default abis","import { BigNumber } from 'ethers';\nimport {\n  BasicState,\n  LockedState,\n  RewardEarned,\n  ApplicationState,\n  TransactionState,\n  DateInput,\n  SingleDateInput,\n  EthereumConfig,\n  BasicStateString,\n  PoolTokenRateState,\n  DebtPoolTokenRateState\n} from './interface';\n\nexport const DAY = 86400;\nexport const DAY_IN_MS = 86400000;\n\nexport const YEAR = 365 * 86400;\nexport const YEAR_IN_MS = YEAR * 1000;\n\nexport const MONTH = 31 * 24 * 60 * 60;\nexport const MONTH_IN_MS = MONTH * 1000;\n\nexport const WEEK = 7 * 86400;\nexport const WEEK_IN_MS = 7 * 86400000;\n\nexport const MAXTIME = 4 * 365 * 86400;\nexport const MAXTIME_IN_MS = 4 * 365 * 86400000;\n\nexport const LOADING_DEFAULT_BASIC_STATE: BasicState = {\n  isLoading: true,\n  value: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEFAULT_BASIC_STATE: BasicState = {\n  isLoading: false,\n  value: BigNumber.from(0)\n};\n\nexport const LOADING_DEBTPOOLTOKEN_RATE_STATE: DebtPoolTokenRateState = {\n  isLoading: true,\n  poolToken: BigNumber.from(0),\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEBTPOOLTOKEN_RATE_STATE: DebtPoolTokenRateState = {\n  isLoading: false,\n  arth: BigNumber.from(0),\n  poolToken: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_LOCKED_STATE: LockedState = {\n  isLoading: true,\n  lockedOn: BigNumber.from(0),\n  lockedUntil: BigNumber.from(0),\n  amountLocked: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_BASIC_STATE_STRING: BasicStateString = {\n  isLoading: true,\n  value: \"\",\n};\n\nexport const LOADING_POOLTOKEN_RATE_STATE: PoolTokenRateState = {\n  isLoading: true,\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0),\n  scallop: BigNumber.from(0),\n};\n\nexport const NON_LOADING_POOLTOKEN_RATE_STATE: PoolTokenRateState = {\n  isLoading: false,\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0),\n  scallop: BigNumber.from(0),\n};\n\nexport const NON_LOADING_DEFAULT_BASIC_STATE_STRING: BasicStateString = {\n  isLoading: false,\n  value: \"0\",\n};\n\nexport const NON_LOADING_DEFAULT_LOCKED_STATE: LockedState = {\n  isLoading: false,\n  lockedOn: BigNumber.from(0),\n  lockedUntil: BigNumber.from(0),\n  amountLocked: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_REWARD_EARNED: RewardEarned = {\n  isLoading: true,\n  value: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEFAULT_REWARD_EARNED: RewardEarned = {\n  isLoading: false,\n  value: BigNumber.from(0)\n};\n\nexport const DEFAULT_ETHEREUM_CONFIG: EthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 1,\n  defaultGas: '6000000',\n  defaultGasPrice: '1000000000000',\n  ethereumNodeTimeout: 10000,\n};\n\nexport const DEFAULT_DATEINPUT_STATE: DateInput = {\n  startDate: new Date(),\n  endDate: new Date(\n    Date.now() % DAY_IN_MS === 0 ? Date.now() + WEEK_IN_MS + DAY_IN_MS : (Math.floor(Date.now() / DAY_IN_MS) * DAY_IN_MS) + WEEK_IN_MS + DAY_IN_MS\n  )\n};\n\nexport const DEFAULT_SINGLE_DATEINPUT_STATE: SingleDateInput = new Date(\n  Date.now() % DAY_IN_MS === 0 ? Date.now() + WEEK_IN_MS + DAY_IN_MS : (Math.floor(Date.now() / DAY_IN_MS) * DAY_IN_MS) + WEEK_IN_MS + DAY_IN_MS\n);\n\nexport const DECIMALS_18 = BigNumber.from(10).pow(18);\n\nexport const INITIAL_APP_STATE: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n};\n\nexport const INITIAL_TRANSACTION_STATE: TransactionState = {};\n\nexport const BNZERO = BigNumber.from(0);\n\nexport const noOp = () => { };\n\nexport const handleDate = (date: any) => {\n  return new Date(date.setHours(0, 0, 0, 0));\n}\n\nexport const addDays = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + (DAY_IN_MS) * no));\n}\n\nexport const addWeeks = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + (WEEK_IN_MS) * no));\n}\n\nexport const addMonths = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + MONTH_IN_MS * no));\n}\n\nexport const addYears = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + YEAR_IN_MS * no));\n}\n","import { ethers } from 'ethers';\n\nimport { Configuration } from './interface';\nimport { web3ProviderFrom } from './etherUtils';\n\nexport function getDefaultProvider(config: Configuration): ethers.providers.BaseProvider {\n  // @ts-ignore\n  const _window: { ethereum?: any, web3?: any } = window;\n\n  // Modern dapp browsers.\n  if (_window.ethereum) {\n    try {\n      // Request account access\n      // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      // App.YOUR_ADDRESS = accounts[0]\n    } catch (error) {\n      // User denied account access...\n      console.error(\"User denied account access\");\n    }\n\n    return new ethers.providers.Web3Provider(_window.ethereum);\n  }\n\n  // Legacy dapp browsers...\n  if (_window.web3) {\n    return new ethers.providers.Web3Provider(_window.web3.currentProvider);\n  }\n\n  // If no injected web3 instance is detected, fall back to backup node.\n  return new ethers.providers.JsonRpcProvider(config.defaultProvider);\n}\n\nexport function getGanacheProvider(config: Configuration): ethers.providers.JsonRpcProvider {\n  return new ethers.providers.JsonRpcProvider(\n    web3ProviderFrom(config.defaultProvider),\n    config.chainId\n  );\n}\n","import {BigNumber, Contract, ethers, Overrides} from 'ethers';\n\nimport ERC20 from './ERC20';\nimport ABIS from './deployments/abi';\nimport {configKeys, Configuration} from '../utils/interface';\nimport {getDefaultProvider} from '../utils/provider';\nimport Web3 from \"web3\";\n\n/**\n * An API module of ARTH contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class Protocol {\n  // @ts-ignore\n  myAccount: string;\n\n  // @ts-ignore\n  web3: Web3;\n\n  signer?: ethers.Signer;\n\n  config: {\n    [chainId: number]: Configuration;\n  };\n\n  contracts: {\n    [chainId: number]: { [name: string]: Contract };\n  };\n\n  // @ts-ignore\n  provider: ethers.providers.BaseProvider;\n\n  tokens: {\n    [chainId: number]: { [name: string]: ERC20 };\n  };\n\n  _activeNetwork: number;\n\n  constructor(cfg: { [chainId: number]: Configuration }, chainId: number) {\n    this._activeNetwork = chainId;\n    this.contracts = {};\n    this.tokens = {};\n    this.tokens = {};\n\n    try {\n      for (const [chainIdString, config] of Object.entries(cfg)) {\n        const chainId = Number(chainIdString);\n        const {deployments} = config;\n        this.provider = getDefaultProvider(config);\n        const networkConfig: { [name: string]: Contract } = {};\n        const tokens: { [name: string]: ERC20 } = {};\n\n        for (const [name, deployment] of Object.entries(deployments)) {\n          if (!deployment.abi) continue;\n          //to push all erc20 tokens in tokens array\n          if (cfg[chainId].supportedTokens.includes(name)) {\n            tokens[name] = new ERC20(\n              deployments[name].address,\n              this.provider,\n              name,\n              cfg[chainId].decimalOverrides[name] || 18,\n            );\n          }\n          //to push all others as contracts\n          networkConfig[name] = new Contract(\n            deployment.address,\n            ABIS[deployment.abi],\n            this.provider,\n          );\n\n        }\n        this.contracts[chainId] = networkConfig;\n        this.tokens[chainId] = tokens;\n      }\n    } catch (e) {\n      console.log('Error in contracts mapping', e);\n    }\n\n    this.config = cfg;\n  };\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  };\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    // @ts-ignore\n    const newProvider = new ethers.providers.Web3Provider(provider);\n    this.web3 = new Web3(provider);\n    this.provider = newProvider;\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [chainId, contracts] of Object.entries(this.contracts)) {\n      for (const [name, contract] of Object.entries(contracts)) {\n        this.contracts[Number(chainId)][name] = contract.connect(this.signer);\n      }\n    }\n\n    for (const tokens of Object.values(this.tokens)) {\n      for (const token of Object.values(tokens)) {\n        if (token && token.address) token.connect(this.signer);\n      }\n    }\n  }\n\n  updateActiveNetwork(chainId: number, dispatch: any) {\n    this._activeNetwork = chainId;\n  }\n\n  getConfig(id: configKeys, chainId: number) {\n    return this.config[chainId][id];\n  }\n\n  gasOptions(gas: BigNumber = BigNumber.from('6000000')): Overrides {\n    const multiplied = Math.floor(gas.toNumber() * this.config[137]['gasLimitMultiplier']);\n    return {\n      gasLimit: BigNumber.from(multiplied),\n    };\n  };\n\n}\n","import {createAction} from '@reduxjs/toolkit';\n\nexport const updateChainId = createAction<{ chainId: number }>('app/updateChainId');\n\nexport const updateBlockchain = createAction<{chain: string}>('app/updateBlockchain')\n\nexport const updateAvailableChains = createAction<{ chains: Array<number> }>(\n  'app/updateAvailableChains',\n);\n","import {useCallback} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {getSupportedChains} from '../../config';\nimport {AppDispatch, AppState} from '../index';\n\nimport {updateBlockchain, updateChainId} from './actions';\n\n\nexport function useGetActiveBlockChain(): string {\n\n  const chain = useSelector((state: AppState) => {\n    return state.blockChain.active\n  })\n  return chain\n}\n\n\nexport function useHandleBlokchainChange(): (chain: string) => void{\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chain: string) => {\n      dispatch(\n        updateBlockchain({\n          chain\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n}\n\n/**\n * Returns the active chainId\n */\nexport function useGetActiveChainId(): number {\n  const updateId = useGetUpdateActiveChainId();\n  // const updateIds = useUpdateAvailableChains();\n  const id = useSelector((state: AppState) => {\n    return state.chainId.active;\n  });\n  const avaiableIds = getSupportedChains();\n  if (avaiableIds.includes(id)) {\n    return id;\n  } else {\n    const changedId = avaiableIds[0];\n    // updateIds(avaiableIds);\n    updateId(changedId);\n    return changedId;\n  }\n}\n\n/**\n * Used to update the active chainId\n * @param chainId to update the active chainId\n */\nexport function useGetUpdateActiveChainId(): (chainId: number) => void {\n  const chains = getSupportedChains();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chainId: number) => {\n      if (chains.includes(chainId)) {\n        dispatch(\n          updateChainId({\n            chainId: chainId,\n          }),\n        );\n      } else {\n        console.log(`chainId: ${chainId} is not supported on this app`);\n      }\n    },\n    [chains, dispatch],\n  );\n}\n\n/**\n * Used to update the avaiable Chains\n */\n/*export function useGetAvaiableChains(): Array<number> {\n  return useSelector((state: AppState) => {\n    return state.chains.availableNetworks;\n  });\n}*/\n\n/**\n * Used to add the new chain to the available chains array\n * @param chainId to add it to available chains array\n */\n\n/*export function useAddAvaiableChains(): (chainId: number) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const chains = useSelector((state: AppState) => {\n    return state.chains.availableNetworks;\n  });\n\n  return useCallback(\n    (chainId: number) => {\n      if (chains.includes(chainId)) {\n        console.log(`Trying to add the already present chainId ${chainId}`);\n        return;\n      } else {\n        const updatingChains = chains;\n        updatingChains.push(chainId);\n        dispatch(\n          updateAvailableChains({\n            chains: updatingChains,\n          }),\n        );\n      }\n    },\n    [chains, dispatch],\n  );\n}*/\n\n/*export function useUpdateAvailableChains(): (chainId: number[]) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chainId: number[]) => {\n      dispatch(\n        updateAvailableChains({\n          chains: chainId,\n        }),\n      );\n    },\n    [dispatch],\n  );\n}*/\n","import {useWallet} from 'use-wallet';\nimport React, {createContext, useEffect, useState} from 'react';\n\nimport config from '../../config';\nimport {Protocol} from '../../protocol';\nimport {useGetActiveChainId} from '../../state/chains/hooks';\nimport {useDispatch} from \"react-redux\";\n\nexport interface ProtocolContext {\n  core: Protocol;\n}\n\n// @ts-ignore\nexport const Context = createContext<ProtocolContext>({core: null});\n\ninterface IProps {\n  children: any;\n}\n\nexport const ProtocolProvider = (props: IProps) => {\n  const {children} = props;\n  const chainId = useGetActiveChainId();\n  const {ethereum, account} = useWallet();\n  const [core, setCore] = useState<Protocol>();\n  const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    if (!core && config) {\n      const newCore = new Protocol(config, chainId);\n      if (account) {\n        newCore.unlockWallet(ethereum, account);\n      }\n      setCore(newCore);\n    } else if (account && core) {\n      core.unlockWallet(ethereum, account);\n    }\n  }, [account, core, dispatch, ethereum, chainId]);\n\n  // @ts-ignore\n  return <Context.Provider value={{core}}>{children}</Context.Provider>;\n};\n","import React from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Snackbar,\n} from \"@material-ui/core\";\nimport validator from \"validator\";\nimport '../../styles/authStyle.css'\n\nfunction Auth() {\n\n  const [state, setState] = React.useState({ email: \"\", password: \"\" });\n\n  const isValid = () =>\n    validator.isEmail(state.email) && state.password.length > 4;\n\n  const login = () => {}\n\n  return (\n    <div id={'auth'}>\n       <div className=\"auth-container\">\n      <Card className=\"auth-container-card\">\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Welcome to Stablecoin Dashboard\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            <p>\n              This is the staff login. To access dashboard, please contact your\n              administrator.\n            </p>\n\n            <TextField\n              required\n              id=\"outlined-email\"\n              label=\"Email\"\n              margin=\"dense\"\n              type=\"email\"\n              onChange={(e:any) => setState({ ...state, email: e.target.value })}\n              value={state.email}\n              fullWidth\n            />\n\n            <TextField\n              required\n              id=\"outlined-pass\"\n              label=\"Password\"\n              margin=\"dense\"\n              type=\"password\"\n              onChange={(e: any) => setState({ ...state, password: e.target.value })}\n              value={state.password}\n              fullWidth\n            />\n          </Typography>\n        </CardContent>\n\n        <CardActions>\n          <Button\n            disabled={!isValid()}\n            onClick={login}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Login\n          </Button>\n        </CardActions>\n      </Card>\n    </div>\n    </div>\n  )\n}\n\nexport default Auth","/*!\n\n =========================================================\n * Material Dashboard React - v1.8.0 based on Material Dashboard - v1.2.0\n =========================================================\n\n * Product Page: http://www.creative-tim.com/product/material-dashboard-react\n * Copyright 2019 Creative Tim (http://www.creative-tim.com)\n * Licensed under MIT (https://github.com/creativetimofficial/material-dashboard-react/blob/master/LICENSE.md)\n\n =========================================================\n\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n */\n\n// ##############################\n// // // Function that converts from hex color to rgb color\n// // // Example: input = #9c27b0 => output = 156, 39, 176\n// // // Example: input = 9c27b0 => output = 156, 39, 176\n// // // Example: input = #999 => output = 153, 153, 153\n// // // Example: input = 999 => output = 153, 153, 153\n// #############################\nconst hexToRgb = input => {\n  input = input + \"\";\n  input = input.replace(\"#\", \"\");\n  let hexRegex = /[0-9A-Fa-f]/g;\n  if (!hexRegex.test(input) || (input.length !== 3 && input.length !== 6)) {\n    throw new Error(\"input is not a valid hex color.\");\n  }\n  if (input.length === 3) {\n    let first = input[0];\n    let second = input[1];\n    let last = input[2];\n    input = first + first + second + second + last + last;\n  }\n  input = input.toUpperCase(input);\n  let first = input[0] + input[1];\n  let second = input[2] + input[3];\n  let last = input[4] + input[5];\n  return (\n    parseInt(first, 16) +\n    \", \" +\n    parseInt(second, 16) +\n    \", \" +\n    parseInt(last, 16)\n  );\n};\n\n// ##############################\n// // // Variables - Styles that are used on more than one component\n// #############################\n\nconst drawerWidth = 220;\n\nconst transition = {\n  transition: \"all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)\"\n};\n\nconst container = {\n  padding: \"30px 15px\",\n  marginRight: \"auto\",\n  overflow: 'scroll',\n  height: '100%',\n  marginLeft: \"auto\"\n};\n\nconst defaultFont = {\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  fontWeight: \"300\",\n  lineHeight: \"1.5em\"\n};\n\nconst primaryColor = [\"#6c5fc7\", \"#5a4eb2\", \"#3e319b\", \"#af2cc5\"];\nconst warningColor = [\"#ff9800\", \"#ffa726\", \"#fb8c00\", \"#ffa21a\"];\nconst dangerColor = [\"#f44336\", \"#ef5350\", \"#e53935\", \"#f55a4e\"];\nconst successColor = [\"#4caf50\", \"#66bb6a\", \"#43a047\", \"#5cb860\"];\nconst infoColor = [\"#00acc1\", \"#26c6da\", \"#00acc1\", \"#00d3ee\"];\nconst roseColor = [\"#e91e63\", \"#ec407a\", \"#d81b60\", \"#eb3573\"];\nconst grayColor = [\n  \"#999\",\n  \"#777\",\n  \"#3C4858\",\n  \"#AAAAAA\",\n  \"#D2D2D2\",\n  \"#DDD\",\n  \"#b4b4b4\",\n  \"#555555\",\n  \"#333\",\n  \"#a9afbb\",\n  \"#eee\",\n  \"#e7e7e7\"\n];\nconst blackColor = \"#000\";\nconst whiteColor = \"#FFF\";\n\nconst boxShadow = {\n  boxShadow:\n    \"0 10px 30px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 4px 25px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\"\n};\n\nconst primaryBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(primaryColor[0]) +\n    \",.4)\"\n};\nconst infoBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(infoColor[0]) +\n    \",.4)\"\n};\nconst successBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(successColor[0]) +\n    \",.4)\"\n};\nconst warningBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(warningColor[0]) +\n    \",.4)\"\n};\nconst dangerBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(dangerColor[0]) +\n    \",.4)\"\n};\nconst roseBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(roseColor[0]) +\n    \",.4)\"\n};\n\nconst warningCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + warningColor[1] + \", \" + warningColor[2] + \")\",\n  ...warningBoxShadow\n};\nconst successCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + successColor[1] + \", \" + successColor[2] + \")\",\n  ...successBoxShadow\n};\nconst dangerCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + dangerColor[1] + \", \" + dangerColor[2] + \")\",\n  ...dangerBoxShadow\n};\nconst infoCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + infoColor[1] + \", \" + infoColor[2] + \")\",\n  ...infoBoxShadow\n};\nconst primaryCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + primaryColor[1] + \", \" + primaryColor[2] + \")\",\n  ...primaryBoxShadow\n};\nconst roseCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + roseColor[1] + \", \" + roseColor[2] + \")\",\n  ...roseBoxShadow\n};\n\nconst cardActions = {\n  margin: \"0 20px 10px\",\n  paddingTop: \"10px\",\n  borderTop: \"1px solid \" + grayColor[10],\n  height: \"auto\",\n  ...defaultFont\n};\n\nconst cardHeader = {\n  margin: \"-20px 15px 0\",\n  borderRadius: \"3px\",\n  padding: \"15px\"\n};\n\nconst card = {\n  display: \"inline-block\",\n  position: \"relative\",\n  width: \"100%\",\n  margin: \"25px 0\",\n  boxShadow: \"0 1px 4px 0 rgba(\" + hexToRgb(blackColor) + \", 0.14)\",\n  borderRadius: \"3px\",\n  color: \"rgba(\" + hexToRgb(blackColor) + \", 0.87)\",\n  background: whiteColor\n};\n\nconst defaultBoxShadow = {\n  border: \"0\",\n  borderRadius: \"3px\",\n  boxShadow:\n    \"0 10px 20px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 3px 20px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\",\n  padding: \"10px 0\",\n  transition: \"all 150ms ease 0s\"\n};\n\nconst title = {\n  color: grayColor[2],\n  textDecoration: \"none\",\n  fontWeight: \"300\",\n  marginTop: \"30px\",\n  marginBottom: \"25px\",\n  minHeight: \"32px\",\n  fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n  \"& small\": {\n    color: grayColor[1],\n    fontWeight: \"400\",\n    lineHeight: \"1\"\n  }\n};\n\nconst cardTitle = {\n  ...title,\n  marginTop: \"0\",\n  marginBottom: \"3px\",\n  minHeight: \"auto\",\n  \"& a\": {\n    ...title,\n    marginTop: \".625rem\",\n    marginBottom: \"0.75rem\",\n    minHeight: \"auto\"\n  }\n};\n\nconst cardSubtitle = {\n  marginTop: \"-.375rem\"\n};\n\nconst cardLink = {\n  \"& + $cardLink\": {\n    marginLeft: \"1.25rem\"\n  }\n};\n\nexport {\n  hexToRgb,\n  //variables\n  drawerWidth,\n  transition,\n  container,\n  boxShadow,\n  card,\n  defaultFont,\n  primaryColor,\n  warningColor,\n  dangerColor,\n  successColor,\n  infoColor,\n  roseColor,\n  grayColor,\n  blackColor,\n  whiteColor,\n  primaryBoxShadow,\n  infoBoxShadow,\n  successBoxShadow,\n  warningBoxShadow,\n  dangerBoxShadow,\n  roseBoxShadow,\n  warningCardHeader,\n  successCardHeader,\n  dangerCardHeader,\n  infoCardHeader,\n  primaryCardHeader,\n  roseCardHeader,\n  cardActions,\n  cardHeader,\n  defaultBoxShadow,\n  title,\n  cardTitle,\n  cardSubtitle,\n  cardLink\n};\n","import {\n      drawerWidth,\n      transition,\n      container\n    } from \"./material-dashboard-react.js\";\n    \n    const appStyle = theme => ({\n      wrapper: {\n        position: \"relative\",\n        top: \"0\",\n        height: \"100%\"\n      },\n      mainPanel: {\n        [theme.breakpoints.up(\"md\")]: {\n          width: `calc(100% - ${drawerWidth}px)`\n        },\n        overflow: \"auto\",\n        position: \"relative\",\n        float: \"right\",\n        ...transition,\n        height: \"100%\",\n        width: \"100%\",\n        overflowScrolling: \"touch\"\n      },\n      content: {\n        position: 'relative',\n        // marginTop: \"70px\",\n        // padding: \"30px 0\",\n        height: '100%',\n        // minHeight: \"calc(100vh - 123px)\"\n      },\n      container,\n      map: {\n        marginTop: \"70px\"\n      }\n    });\n    \n    export default appStyle;\n    ","import {\n  drawerWidth,\n  transition,\n  defaultFont,\n  whiteColor,\n  grayColor,\n  blackColor,\n  hexToRgb\n} from \"../material-dashboard-react.js\";\n\nconst sidebarStyle = theme => ({\n  drawerPaper: {\n    border: \"none\",\n    position: \"fixed\",\n    top: \"0\",\n    backgroundColor: '#2d004c',\n    bottom: \"0\",\n    left: \"0\",\n    zIndex: \"1\",\n    width: drawerWidth,\n    [theme.breakpoints.up(\"md\")]: {\n      width: drawerWidth,\n      position: \"fixed\",\n      height: \"100%\"\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      width: drawerWidth,\n      position: \"fixed\",\n      display: \"block\",\n      top: \"0\",\n      height: \"100vh\",\n      right: \"0\",\n      left: \"auto\",\n      zIndex: \"1032\",\n      visibility: \"visible\",\n      overflowY: \"visible\",\n      borderTop: \"none\",\n      textAlign: \"left\",\n      paddingRight: \"0px\",\n      paddingLeft: \"0\",\n      transform: `translate3d(${drawerWidth}px, 0, 0)`,\n      ...transition\n    }\n  },\n  logo: {\n    position: \"relative\",\n    padding: \"15px 15px\",\n    zIndex: \"4\",\n    \"&:after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      bottom: \"0\",\n\n      height: \"1px\",\n      right: \"15px\",\n      width: \"calc(100% - 30px)\",\n      backgroundColor: \"rgba(\" + hexToRgb(grayColor[6]) + \", 0.3)\"\n    }\n  },\n  logoLink: {\n    ...defaultFont,\n    padding: \"5px 0\",\n    display: \"block\",\n    fontSize: \"25px\",\n    fontWeight: \"200\",\n    textAlign: 'center',\n    lineHeight: \"30px\",\n    textDecoration: \"none\",\n    backgroundColor: \"transparent\",\n    \"&,&:hover\": {\n      color: whiteColor\n    }\n  },\n  logoLinkRTL: {\n    textAlign: \"right\"\n  },\n  logoImage: {\n    width: \"30px\",\n    display: \"inline-block\",\n    maxHeight: \"30px\",\n    marginLeft: \"10px\",\n    marginRight: \"15px\"\n  },\n  img: {\n    width: \"35px\",\n    top: \"22px\",\n    position: \"absolute\",\n    verticalAlign: \"middle\",\n    border: \"0\"\n  },\n  background: {\n    position: \"absolute\",\n    zIndex: \"1\",\n    height: \"100%\",\n    width: \"100%\",\n    display: \"block\",\n    top: \"0\",\n    left: \"0\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center center\",\n    \"&:after\": {\n      position: \"absolute\",\n      zIndex: \"3\",\n      width: \"100%\",\n      height: \"100%\",\n      content: '\"\"',\n      display: \"block\",\n      background: blackColor,\n      opacity: \".8\"\n    }\n  },\n  list: {\n    marginTop: \"20px\",\n    paddingLeft: \"0\",\n    paddingTop: \"0\",\n    paddingBottom: \"0\",\n    marginBottom: \"0\",\n    listStyle: \"none\",\n    position: \"unset\"\n  },\n  item: {\n    position: \"relative\",\n    display: \"block\",\n    textDecoration: \"none\",\n    color: 'rgb(149, 134, 165)',\n    \"&:hover,&:focus,&:visited,&.active\": {\n      color: '#fff'\n    }\n  },\n  itemLink: {\n    width: \"auto\",\n    transition: \"all 300ms linear\",\n    margin: \"0\",\n    borderRadius: \"3px\",\n    position: \"relative\",\n    display: \"block\",\n    padding: \"10px\",\n    backgroundColor: \"transparent\",\n    ...defaultFont\n  },\n  itemIcon: {\n    width: \"24px\",\n    height: \"30px\",\n    fontSize: \"24px\",\n    lineHeight: \"30px\",\n    float: \"left\",\n    margin: \"0 15px\",\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    // color: 'rgb(149, 134, 165)'\n  },\n  itemText: {\n    ...defaultFont,\n    margin: \"0\",\n    lineHeight: \"30px\",\n    fontWeight: 'bold',\n    fontSize: \"14px\",\n    // color: 'rgb(149, 134, 165)'\n  },\n  sidebarWrapper: {\n    position: \"relative\",\n    height: \"calc(100vh - 75px)\",\n    overflow: \"auto\",\n    width: \"220px\",\n    zIndex: \"4\",\n    overflowScrolling: \"touch\"\n  },\n  fab: {\n    position: 'fixed',\n    bottom: 15,\n    right: 15\n  }\n});\n\nexport default sidebarStyle;\n","import { makeStyles } from \"@material-ui/core/styles\"\nimport { NavLink } from \"react-router-dom\"\nimport classNames from \"classnames\"\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from \"@material-ui/core/Drawer\"\nimport Fab from '@material-ui/core/Fab'\nimport Hidden from \"@material-ui/core/Hidden\"\nimport Icon from \"@material-ui/core/Icon\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport MenuIcon from '@material-ui/icons/Menu'\nimport React from \"react\"\nimport styles from \"../../styles/components/sidebarStyle.js\"\n\n\n// @ts-ignore\nconst useStyles = makeStyles(styles)\n\n\nexport default function Sidebar () {\n  const [state, setState] = React.useState<boolean>(false)\n\n  const toggleDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) return\n    setState(open)\n  }\n\n\n  const classes = useStyles()\n  // verifies if routeName is the one active (in browser input)\n  function activeRoute(routeName: any) {\n    if (!routeName) return false\n    return window.location.href.indexOf(routeName.url) > -1 ? true : false\n  }\n\n  const routes = [\n    {\n      url: '/dashboard/mint',\n      icon: 'construction',\n      name: 'Mint the token'\n    },\n    {\n      url: '/dashboard/burn',\n      icon: 'whatshot',\n      name: 'Burn the token'\n    },\n    {\n      url: '/dashboard/statistics',\n      icon: 'signal_cellular_alt',\n      name: 'Statistics'\n    },\n    // {\n    //   url: '/logout',\n    //   icon: 'power_settings_new',\n    //   name: 'Logout'\n    // },\n  ]\n\n  const links = (\n    <List className={classes.list}>\n      {\n        routes.map(r => {\n          return (\n            <NavLink to={r.url} className={({isActive}) => isActive ? `active ${classes.item}` : classes.item}>\n              <ListItem button className={classes.itemLink}>\n                <Icon className={classNames(classes.itemIcon)}>{r.icon}</Icon>\n                <ListItemText primary={r.name} className={classNames(classes.itemText)} disableTypography={true} />\n              </ListItem>\n            </NavLink>\n          )\n        })\n      }\n    </List>\n  )\n\n  var brand = (\n    <div className={classes.logo}>\n      <div className={classNames(classes.logoLink)}>Stablecoin Dashboard</div>\n    </div>\n  )\n\n  return (\n    <div>\n      <Hidden mdUp implementation=\"css\">\n        <Fab\n          size=\"small\"\n          color=\"secondary\" aria-label=\"add\"\n          style={{ outline: 'none', position: 'fixed', bottom: 15, right: 15, zIndex: 100 }}>\n          <MenuIcon onClick={toggleDrawer(true)} />\n        </Fab>\n\n        <Drawer\n          variant=\"temporary\"\n          open={state}\n          anchor={\"right\"}\n          classes={{ paper: classNames(classes.drawerPaper) }}\n          onClose={toggleDrawer(false)}\n          >\n          {brand}\n          <Divider />\n          <div className={classes.sidebarWrapper}>{links}</div>\n        </Drawer>\n      </Hidden>\n\n      <Hidden smDown implementation=\"css\">\n        <Drawer\n          anchor={\"left\"}\n          variant=\"permanent\"\n          open\n          classes={{ paper: classNames(classes.drawerPaper) }}>\n          {brand}\n          <Divider />\n          <div className={classes.sidebarWrapper}>{links}</div>\n        </Drawer>\n      </Hidden>\n    </div>\n  )\n}\n","import { BigNumber } from 'ethers';\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nexport const truncateMiddle = function (\n  fullStr: string = '',\n  strLen: number,\n  separator?: string,\n) {\n  if (fullStr.length <= strLen) return fullStr;\n  separator = separator || '...';\n\n  var sepLen = separator.length,\n    charsToShow = strLen - sepLen,\n    frontChars = Math.ceil(charsToShow / 3),\n    backChars = Math.floor(charsToShow / 3);\n\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n\nexport const InputValidation = function (\n  value: string = \" \",\n  balance: BigNumber,\n  collateral: string,\n  toCheckFor: [\"MAX\", \"DECIMALS\"]\n) {\n  let returnObj = {\n    status: \"Success\",\n    restrict: false,\n    msg: \"\",\n  };\n\n  if (toCheckFor.includes(\"MAX\")) {\n    if (Number(value) > Number(balance)) {\n      returnObj = {\n        status: \"Warning\",\n        restrict: true,\n        msg: \"Input cannot be more than your wallet balance\",\n      }\n\n      return returnObj;\n    }\n  }\n};\n","import React, { useEffect, useState } from 'react'\nimport { Outlet } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useWallet } from \"use-wallet\";\nimport {Button, MenuItem, Snackbar, TextField} from '@material-ui/core'\nimport styles from '../../styles/adminStyle.js'\nimport Sidebar from './Sidebar';\nimport { noOp } from '../../utils/constants';\nimport { truncateMiddle } from '../../utils/index';\nimport Navigation from '../../navigation';\nimport { useGetActiveBlockChain, useHandleBlokchainChange } from '../../state/chains/hooks';\n\nexport const chains = [\n  {\n    label: 'MaticMumbai',\n    chainID: 'MaticMumbai'\n  },\n  // {\n  //   label: \"Neil\",\n  //   chainID: 'Neil',\n  // }\n]\n\n// @ts-ignore\nconst useStyles = makeStyles(styles);\nfunction Dashbaord() {\n\n  useEffect(() => {\n    connectWalletOnPageLoad()\n  },[])\n\n  const { connect, connector, account } = useWallet();\n  const { tronLink } = window;\n  const chain = useGetActiveBlockChain()\n  const setChain = useHandleBlokchainChange()\n\n  const [connectMetamask, setConnectMetamask] = useState(true)\n\n  const connectWalletOnPageLoad = async () => {\n    if (localStorage?.getItem('isWalletConnected') === 'true') {\n      try {\n        await connect('injected')\n      } catch (ex) {\n        console.log(ex)\n      }\n    }\n  }\n\n  const handleChainChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChain(event.target.value);\n\n  };\n\n  return (\n \n    <div>\n      {\n        !account && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={connectMetamask}\n            onClose={() => setConnectMetamask(false)}\n            message=\"Please connect to the Metamask on MumbaiTestnet\"\n          />\n      }\n      <div style={{padding: '28px', display: 'flex', justifyContent: 'flex-end'}}>\n        <TextField\n          required\n          id=\"standard-select-currency\"\n          select\n          label=\"Chain\"\n          value={chain}\n          onChange={handleChainChange}\n          // fullWidth\n          variant=\"outlined\"\n          size='small'\n          style={{marginRight: '15px', width: '150px'}}\n        >\n          {chains.map((option) => (\n            <MenuItem alignItems={\"center\"} key={option.chainID} value={option.label}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        {\n          !account ? (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={connector === \"injected\" ? noOp : () => {\n                connect('injected')\n                  .then(() => {\n                    console.log('Connected', account)                  \n                    localStorage.setItem('isWalletConnected', 'true')\n                    localStorage.removeItem('disconnectWallet')\n\n                  })\n                  .catch((e) => {\n                    console.log('Connection error', e)\n                  })\n              }}\n            >\n              Connect Wallet\n            </Button>\n            \n          ) :\n          (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => console.log('account address click')}\n            >\n              {chain == 'MaticMumbai' ?  \n                truncateMiddle(account, 12, '...') : \n                window.tronWeb.defaultAddress.base58.slice(0, 3) + '...' + window.tronWeb.defaultAddress.base58.slice(31, 34)\n              }\n            </Button>\n          )\n        }\n      </div>\n\n      <Sidebar />\n      <Outlet />\n    </div>\n\n  )\n}\n\nexport default Dashbaord","import { BigNumber } from 'ethers';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\n\nexport function getBalance(\n  balance: BigNumber,\n  decimals = 18\n): string {\n  try {\n    return formatUnits(balance, decimals);\n  } catch (err) {\n    return '0';\n  }\n};\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 3\n): string => {\n  try {\n    const formattedBalance: string = getBalance(balance, decimals);\n    const decimalsPointIndex = formattedBalance.indexOf('.');\n    if (decimalsPointIndex === -1) return formattedBalance;\n    return (\n      formattedBalance.slice(0, decimalsPointIndex) +\n      '.' +\n      formattedBalance.slice(decimalsPointIndex + 1, decimalsPointIndex + 1 + fractionDigits)\n    );\n  } catch (error) {\n    return '0';\n  }\n};\n\nexport const formatToBN = (\n  value: number | string,\n  decimals = 18\n): BigNumber => {\n  try {\n    const [beforeDecimals, afterDecimal] = `${value}`.split('.');\n\n    const beforeDecimalsPrecisionText = beforeDecimals?.slice(0, 18) || '0';\n    const afterDecimalsPrecisionText = afterDecimal?.slice(0, decimals) || '0';\n    const fixedPrecisionValue = `${beforeDecimalsPrecisionText}.${afterDecimalsPrecisionText}`;\n\n    return BigNumber.from(parseUnits(`${fixedPrecisionValue}`, decimals));\n  } catch (error) {\n    return BigNumber.from('0');\n  }\n};\n","import { useContext } from 'react';\n\nimport { Context } from '../context/Provider';\n\nconst useCore = () => {\n  const { core } = useContext(Context);\n  return core;\n};\n\nexport default useCore;\n","import {useState, useEffect} from 'react'\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport { Typography } from '@material-ui/core';\n\nfunction getSteps() {\n      return ['Creation', 'Confirmations', 'Execution'];\n}\n\nfunction getStepContent(step: number) {\n      switch (step) {\n        case 0:\n          return (\n            <div style={{display: 'flex', flexDirection: 'column'}}>\n                  <div>- &nbsp;Transaction created</div>\n                  <div>- &nbsp;Confirmation is pending</div>\n            </div>\n          );\n        case 1:\n          return  (\n            <div style={{display: 'flex', flexDirection: 'column'}}>\n                  <div>- &nbsp;Confirmation Pending</div>\n            </div>\n          )\n        case 2:\n          return `Execution Pending`;\n        default:\n          return 'Unknown step';\n      }\n}\n\nfunction Steps(props: any) {\n      const {stepState, activeStep,  chain} = props\n \n      const [stepLabelColor, setStepLabelColor] = useState('#999');\n      \n      const steps = getSteps();\n\n      useEffect(() => {\n            if(stepState == 'successful') setStepLabelColor('#369e94')\n            if(stepState == 'inProgress') setStepLabelColor('#ed7117')\n\n      }, [stepState])\n\n  return (\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n            {\n                  steps.map((step: any, i: number) => (\n                        <Step key={step}>\n                              <StepLabel style={{color: 'green'}}>{step}</StepLabel>\n                              <StepContent>\n                                    <Typography>\n                                          {\n                                                getStepContent(i)\n                                          }\n                                    </Typography>\n                              </StepContent>\n                        </Step>\n                  ))\n            }\n      </Stepper>\n  )\n}\n\nexport default Steps","\n\nfunction Textfield(props: any) {\n  const {text, color, fontSize, fontWeight,className} = props\n  return (\n    <div \n      className={className}\n      style={{\n            color, fontSize, fontWeight\n      }}>\n      {text}\n    </div>\n  )\n}\n\nexport default Textfield","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport useCore from \"./useCore\";\n\n\nconst useGetOwners = () => {\n  const core = useCore();\n  const {chainId} = useWallet()\n\n  const [response, setResponse] = React.useState([])\n\n  const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chainId}`].MultiSig;\n        const res = await contract.getOwners()\n\n        setResponse(res)\n  }, [chainId]) \n\n  useEffect(() => {\n\n    if(core){\n        fetchData()\n            .catch((err) => setResponse([]))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetOwners","import {createAction} from '@reduxjs/toolkit';\n\nimport {PopupContent} from '../../utils/interface';\n\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>(\n  'app/updateBlockNumber',\n);\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\n","import {useWallet} from 'use-wallet';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal,} from './actions';\nimport {AppState} from '../index';\nimport {PopupContent} from '../../utils/interface';\n\nexport function useBlockNumber(): number | undefined {\n  const {chainId} = useWallet();\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// Returns a function that allows adding a popup.\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({content, key}));\n    },\n    [dispatch],\n  );\n}\n\n// Returns a function that allows removing a popup via its key.\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({key}));\n    },\n    [dispatch],\n  );\n}\n\n// Get the list of active popups.\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n","import {createAction} from '@reduxjs/toolkit';\nimport { BigNumber } from 'ethers';\nimport { DashboardTxnDetails } from './reducer';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  blockchain?: string;\n}>('transactions/addTransaction');\n\nexport const updateTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  blockchain?: string;\n}>('transactions/updateTransaction')\n\n\nexport const clearAllTransactions = createAction<{ chainId: number }>(\n  'transactions/clearAllTransactions',\n);\n\nexport const finalizeTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n\n","import {TransactionResponse} from '@ethersproject/providers';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\n\nimport {useAddPopup} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\n\nimport {addTransaction, clearAllTransactions, updateTransaction} from './actions';\nimport {DashboardTxnDetails, TransactionDetails} from './reducer';\nimport {useGetActiveChainId} from \"../chains/hooks\";\nimport { BigNumber } from 'ethers';\n\n/**\n * Helper that can take a ethers library transaction response and\n * add it to the list of transactions.\n */\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  transDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n  const {chainId, account} = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      transDetail: {\n        _numConfirmations: any, \n        _typeOfTx: any, \n        _createdTime: any, \n        _executed: boolean, \n        _value: BigNumber, \n        _token: string, \n        txIndex: any, \n        _executedTime: any, \n        _to: string,\n      },\n      {\n        summary,\n        approval,\n      }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chainId) return;\n\n      const {hash} = response;\n\n      const {_numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = transDetail\n\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n\n      addPopup(\n        {\n          txn: {\n            hash,\n            loading: true,\n            success: false,\n            summary: summary,\n          },\n        },\n        hash,\n      );\n\n      dispatch(addTransaction({hash, from: account, chainId, approval, summary, txDetail: {\n        _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      }}));\n    },\n    // eslint-disable-next-line\n    [dispatch, chainId, account],\n  );\n}\n\nexport function useTransactionUpdater(): (\n  response: TransactionResponse,\n  transDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n  const {chainId, account} = useWallet();\n  const dispatch = useDispatch<AppDispatch>();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      transDetail: {\n        _numConfirmations: any, \n        _typeOfTx: any, \n        _createdTime: any, \n        _executed: boolean, \n        _value: BigNumber, \n        _token: string, \n        txIndex: any, \n        _executedTime: any, \n        _to: string,\n      },\n      {\n        summary,\n        approval,\n      }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chainId) return;\n\n      const {hash} = response;\n\n      const {_numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = transDetail\n\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n\n      addPopup(\n        {\n          txn: {\n            hash,\n            loading: true,\n            success: false,\n            summary: summary,\n          },\n        },\n        hash,\n      );\n\n      dispatch(updateTransaction({hash, from: account, chainId, approval, summary, txDetail: {\n        _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      }}));\n    },\n    // eslint-disable-next-line\n    [dispatch, chainId, account],\n  );\n}\n\n// Returns all the transactions for the current chain.\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const {chainId} = useWallet();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000;\n}\n\n// Returns whether a token has a pending approval transaction.\nexport function useHasPendingApproval(\n  tokenAddress: string | undefined,\n  spender: string | undefined,\n): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return (\n            approval.spender === spender &&\n            approval.tokenAddress === tokenAddress &&\n            isTransactionRecent(tx)\n          );\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  );\n}\n\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\n  const activeChainId = useGetActiveChainId()\n  const dispatch = useDispatch<AppDispatch>();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({chainId: activeChainId})), [\n      activeChainId,\n      dispatch,\n    ]),\n  };\n}\n","const formatErrorMessage = (message: string): string => {\n  message = message.toLowerCase();\n\n  if (message.includes('cannot add to expired lock. withdraw')) return 'Cannot add to an expired lock. You need to Withdraw.';\n  if (message.includes(`withdraw old tokens first`)) return 'Withdraw old tokens first.';\n  if (message.includes('can only lock until time in the future')) return `Can only lock for future unlock time.`;\n  if (message.includes('voting lock can be 4 years max')) return `Voting lock cannot be greater than 4 Years.`;\n  if (message.includes('no existing lock found')) return 'No lock found.';\n  if (message.includes('nothing is locked')) return 'Nothing is locked.';\n  if (message.includes('can only increase lock duration')) return 'Can only increase the lock duration.';\n  if (message.includes('lock expired')) return 'The lock has expired.';\n  if (message.includes(\"the lock didn't expire\")) return 'The lock did not expire.';\n  if (message.includes(\"fallback not initiated\")) return 'Emergency withdraw is not enabled.';\n  if (message.includes(\"amount < left\")) return 'Amount has to be more than the current rewards. Else try after the reward period has finished.'\n\n  // Fail safes like overflows etc.;\n  return 'Error Occured, Please try again later.';\n};\n\nexport default formatErrorMessage;\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { addPopup } from \"../state/application/actions\";\nimport { useTransactionUpdater } from \"../state/transactions/hooks\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\n\n\nimport useCore from \"./useCore\";\n \nconst useConfirmTxn = () => {\n  const core = useCore();\n  const {chainId} = useWallet()\n  const updateTransaction = useTransactionUpdater();\n\n  const confirmCallback = async (index: number, typeOfTx) => {\n      \n    try {\n      const contract = await core.contracts[`${chainId}`].MultiSig;\n      const response = await contract.confirmTransaction(index)\n      console.log('useConfirmTxn response', response)\n\n      const tx = await response.wait();\n      console.log('useConfirmTxn tx', tx)\n\n    setTimeout(async() => {\n      if (tx?.status === 1){\n        const txnsCount = await contract.getTransactionCount()\n        console.log('useConfirmTxn txnsCount', txnsCount)\n  \n        const txDetail = await contract.getTransaction(txnsCount - 1)\n        console.log('useConfirmTxn txDetail', txDetail)\n  \n        if(typeOfTx == 0){\n          console.log('useConfirmTxn inside if 0')\n  \n          updateTransaction(response, \n            {\n              _numConfirmations: txDetail._numConfirmations.toNumber(),\n              _typeOfTx: txDetail._typeOfTx.toNumber(),\n              _createdTime: txDetail._createdTime.toNumber(),\n              _executed: txDetail._executed,\n              _value: txDetail._value,\n              _token: txDetail._token,\n              txIndex: txDetail.txIndex.toNumber(),\n              _executedTime: txDetail._executedTime.toNumber(),\n              _to: txDetail._to,\n            }, \n          {\n            summary: `Confirm mint transaction id ${index}`,\n          });\n        }else {\n          console.log('useConfirmTxn inside else')\n  \n          updateTransaction(response, \n            {\n              _numConfirmations: txDetail._numConfirmations.toNumber(),\n              _typeOfTx: txDetail._typeOfTx.toNumber(),\n              _createdTime: txDetail._createdTime.toNumber(),\n              _executed: txDetail._executed,\n              _value: txDetail._value,\n              _token: txDetail._token,\n              txIndex: txDetail.txIndex.toNumber(),\n              _executedTime: txDetail._executedTime.toNumber(),\n              _to: txDetail._to,\n            }, \n            {\n            summary: `Confirm burn transaction id ${index}`,\n          });\n        }\n      }\n    }, 4000)\n\n    } catch (e: any) {\n      console.log('useConfirmTxn error', e);\n      addPopup({\n        removeAfterMs: 10000,\n        content: {\n          error: {\n            message: formatErrorMessage(e?.data?.message || e?.message),\n            stack: e?.stack,\n          }\n        }\n      });\n    }\n  }\n\n  return confirmCallback\n}\n\nexport default useConfirmTxn\n\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport useCore from \"./useCore\";\n\n\nconst useGetConfirmReq = () => {\n  const core = useCore();\n  const {chainId} = useWallet()\n\n  const [response, setResponse] = React.useState('')\n\n  const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chainId}`].MultiSig;\n        const res = await contract.numConfirmationsRequired()\n        setResponse(res.toNumber())\n  }, [chainId]) \n\n  useEffect(() => {\n\n    if(core){\n        fetchData()\n            .catch((err) => setResponse(''))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetConfirmReq","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { addPopup } from \"../state/application/actions\";\n\nimport { useTransactionUpdater } from \"../state/transactions/hooks\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\n\nimport useCore from \"./useCore\";\n\nconst useExecuteTxn = () => {\n  const core = useCore();\n  const {chainId} = useWallet()\n  const updateTransaction = useTransactionUpdater();\n\n  const executeCallback = async (index: number, typeOfTx: number) => {\n      \n    try {\n      const contract = await core.contracts[`${chainId}`].MultiSig;\n      const response = await contract.executeTransaction(index)\n      const tx = await response.wait();\n\n    setTimeout(async() => {\n      if (tx?.status === 1){\n        const txnsCount = await contract.getTransactionCount()\n        const txDetail = await contract.getTransaction(txnsCount - 1)\n  \n        if(typeOfTx == 0){  \n          updateTransaction(response, \n            {\n              _numConfirmations: txDetail._numConfirmations.toNumber(),\n              _typeOfTx: txDetail._typeOfTx.toNumber(),\n              _createdTime: txDetail._createdTime.toNumber(),\n              _executed: txDetail._executed,\n              _value: txDetail._value,\n              _token: txDetail._token,\n              txIndex: txDetail.txIndex.toNumber(),\n              _executedTime: txDetail._executedTime.toNumber(),\n              _to: txDetail._to,\n            }, \n          {\n            summary: `Execute mint transaction id ${index}`,\n          });\n        }\n        else {\n  \n          updateTransaction(response, \n            {\n              _numConfirmations: txDetail._numConfirmations.toNumber(),\n              _typeOfTx: txDetail._typeOfTx.toNumber(),\n              _createdTime: txDetail._createdTime.toNumber(),\n              _executed: txDetail._executed,\n              _value: txDetail._value,\n              _token: txDetail._token,\n              txIndex: txDetail.txIndex.toNumber(),\n              _executedTime: txDetail._executedTime.toNumber(),\n              _to: txDetail._to,\n            }, \n            {\n            summary: `Execute burn transaction id ${index}`,\n          });\n        }\n      }\n    }, 4000)\n\n    } catch (e: any) {\n      console.log('useExecuteTxn error', e);\n      addPopup({\n        removeAfterMs: 10000,\n        content: {\n          error: {\n            message: formatErrorMessage(e?.data?.message || e?.message),\n            stack: e?.stack,\n          }\n        }\n      });\n    }\n  }\n\n  return executeCallback\n}\n\nexport default useExecuteTxn\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useConfirm = () => {\n\n  const confirmCallback = async (index: number) => {\n      \n    try {\n        const trc20TokenAddress = \"TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE\"; \n        const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n        console.log('account', window.tronWeb.defaultAddress.base58)\n\n        let contract = await window.tronWeb.contract().at(trcMultSigContract)\n\n        const response = await contract.confirmTransaction(index).send()\n       \n        console.log('response', response, index)\n\n    } catch (e: any) {\n        console.log('useConfirm error', e);\n\n    }\n  }\n\n  return confirmCallback\n}\n\nexport default useConfirm\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useExecute = () => {\n\n    const confirmCallback = async (index: number) => {\n      \n        try {\n            const trc20TokenAddress = \"TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE\"; \n            const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n            let contract = await window.tronWeb.contract().at(trcMultSigContract)\n    \n            const response = await contract.executeTransaction(index).send()\n           \n            console.log('response', response)\n    \n        } catch (e: any) {\n            console.log('useExecute error', e);\n    \n        }\n      }\n    \n      return confirmCallback\n}\n\nexport default useExecute\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useNoOfConfimReq = () => {\n  \n    const [response, setResponse] = useState('')\n  \n    const fetchData = useCallback(async () => {\n        const trc20TokenAddress = \"TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE\"; \n        const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n        let contract = await window.tronWeb.contract().at(trcMultSigContract)\n\n        const response = await contract.numConfirmationsRequired().call()\n       \n        setResponse(response.toNumber())\n\n    }, []) \n  \n    useEffect(() => {\n        fetchData()\n            .catch((err) => setResponse(''))\n  \n    }, [fetchData])\n  \n    return response\n}\n\nexport default useNoOfConfimReq\n\n","import React, { useEffect } from 'react'\nimport Icon from \"@material-ui/core/Icon\"\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport _moment from \"moment\"\nimport {Button} from \"@material-ui/core\";\nimport clsx from 'clsx';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Chip from '@material-ui/core/Chip';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Steps from './Steps'\nimport Textfield from './Textfield';\nimport { truncateMiddle } from '../utils';\n// import { tronWeb } from '../views/dashboard/TestTron';\nimport { formatToBN, getBalance, getDisplayBalance } from '../utils/formatBalance';\nimport useGetOwners from '../hooks/useGetOwners';\nimport useCore from '../hooks/useCore';\nimport useConfirmTxn from '../hooks/useConfirmTxn';\nimport { BigNumber } from 'ethers';\nimport useGetConfirmReq from '../hooks/useGetConfirmReq';\nimport useExecuteTxn from '../hooks/useExecuteTxn';\nimport useConfirm from '../hooks/tron/useConfirm';\nimport useExecute from '../hooks/tron/useExecute';\nimport useNoOfConfimReq from '../hooks/tron/useNoOfConfimReq';\nimport { useGetActiveBlockChain } from '../state/chains/hooks';\n\nfunction ConfirmationStep({allTx}) {\n      const core = useCore()\n      const {myAccount } = core\n      const chain = useGetActiveBlockChain()\n\n      // maticMumbai network\n      let testOwners: any = useGetOwners()\n      let confirmReq = useGetConfirmReq()\n      const disableConfirm = testOwners?.includes(myAccount)\n      const confirmTxnAction = useConfirmTxn()\n      const executeTxAction = useExecuteTxn()\n\n\n      // Nile network\n      let noOfConfirmReq = useNoOfConfimReq()\n      const confirmTronTxnAction = useConfirm()\n      const executeTronTxnAction = useExecute()\n\n      const ConfirmTxn = (txIndex: number, _typeOfTx: number) => {\n\n            if(chain != \"MaticMumbai\"){\n                  confirmTronTxnAction(txIndex)  \n            }else{\n                  confirmTxnAction(txIndex, _typeOfTx)\n            }\n\n      }\n\n      const executeTxn = (txIndex: number, _typeOfTx: number) => {\n\n            if(chain != \"MaticMumbai\"){\n                  executeTronTxnAction(txIndex)  \n            }else{\n                  executeTxAction(txIndex, _typeOfTx)\n            }\n\n      }\n\n      const getDate = (val: number) => {\n            let timestamp = val\n            let date = _moment.unix(timestamp).format(\"MMMM Do YYYY, h:mm:ss a\");\n            if(timestamp == 0) return 'N/A'\n            return `${date}`\n      }\n\n      const timeAgo = (val: number) => {\n            let timestamp = val  \n            let date = _moment.unix(timestamp).fromNow();\n\n            return date\n      }\n\n      const activeStepHandler = (confirmCount, isExecuted) => {\n\n            if(chain == \"MaticMumbai\"){\n                  if(isExecuted) return 3\n                  else if(confirmCount < confirmReq) return 1\n                  else if(confirmCount == confirmReq) return 2\n                  else return\n            }else{\n                  if(isExecuted) return 3\n                  else if(confirmCount < noOfConfirmReq) return 1\n                  else if(confirmCount == noOfConfirmReq) return 2\n                  else return \n            }\n      }\n\n  return (\n      <div>\n            <Textfield\n                  text={'Transactions'}\n                  fontSize={'24px'}\n                  fontWeight={'bold'}\n                  className={'m-b-15'}\n            />\n            {\n                  allTx?.sort((a, b) => b.txIndex - a.txIndex ).map(({hash,txDetail}, i) => {\n                        const { _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = txDetail\n                        return(\n                              <Accordion key={i} style={{marginBottom: '16px'}}>\n                                    <AccordionSummary\n                                          // expandIcon={<ExpandMoreIcon />}\n                                          >\n                                          <div\n                                                className={'grid-item header'}   \n                                                style={{width: '100%'}}                                 \n                                          >\n                                                <div>\n                                                      <Textfield \n                                                            text={txIndex}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}    \n                                                      />\n                                                </div>\n                                                <div>\n                                                      <Textfield \n                                                            text={`${_typeOfTx == 0 ? 'Mint' : 'Burn'}`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </div>\n                                                <div>\n                                                      <Textfield \n                                                            text={`${timeAgo(_createdTime)}`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </div>\n                                                <div className='row-left-center'>\n                                                      <div><Icon className='m-r-5 headerIcon'>supervisor_account</Icon> </div>\n                                                      <Textfield \n                                                            text={`${_numConfirmations} out of ${chain == 'MaticMumbai' ? confirmReq : noOfConfirmReq}`}\n                                                            color={'#aaa'}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                </div>\n                                                <div style={{width: '180px'}} className={\"row-allcenter\"}>\n                                                      <Textfield \n                                                            text={`${\n                                                                  chain == 'MaticMumbai' ? \n                                                                  _numConfirmations < confirmReq ? 'Needs Confirmation' : !_executed ? 'Needs Execution' : 'Success' :\n                                                                  _numConfirmations < noOfConfirmReq ? 'Needs Confirmation' : !_executed ? 'Needs Execution' : 'Success'}`}\n                                                            // color={'#ed7117'}\n                                                            color={`${\n                                                                  chain == 'MaticMumbai' ? \n                                                                  _numConfirmations < confirmReq ? '#FF4500' : !_executed ? '#FF4500' : '#228B22' :\n                                                                  _numConfirmations < noOfConfirmReq ? '#FF4500' : !_executed ? '#FF4500' : '#228B22'}`}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                      \n                                                </div>  \n                                                <div>&nbsp; &nbsp; <KeyboardArrowUpIcon /> </div>\n                                          </div>\n                                    </AccordionSummary>\n                                    <AccordionDetails>\n                                    <div className='flex' style={{width: '100%'}}>\n                                          <div style={{flex: 3, display: 'flex', flexDirection: 'column'}}>\n                                                <div className=\"grid-item flex1\">\n                                                      <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                                                      <Textfield \n                                                            text={`${_typeOfTx == 0 ? 'Mint' : 'Burn'} ${getDisplayBalance(_value)} token(${ truncateMiddle(_token, 12, '...')}) to ${_to}`}\n                                                            color={'#000'}\n                                                            fontSize={'15px'}\n                                                            className={'m-b-15'}\n                                                            fontWeight={'bold'}\n                                                      />\n                        \n                                                            {/* <div>\n                                                                  <Icon className='cardIcon'>share</Icon>\n                                                            </div>  */}\n                        \n                                                      </div>\n                                                     \n                                                      <div>\n                                                            {\n                                                                  chain == \"MaticMumbai\" ?\n\n                                                                  _numConfirmations < confirmReq ?\n                                                                  \n                                                                  <Button\n                                                                        onClick={() => ConfirmTxn(txIndex, _typeOfTx)}\n                                                                        variant=\"contained\"\n                                                                        color=\"primary\"\n\n                                                                        // disabled={!disableConfirm}\n                                                                        size={'large'}\n                                                                        >\n                                                                        Confirm\n                                                                  </Button> :\n                                                                  !_executed ?\n                                                                  <Button\n                                                                        onClick={() => executeTxn(txIndex, _typeOfTx)}\n                                                                        variant=\"contained\"\n                                                                        color=\"primary\"\n\n                                                                        // disabled={!disableConfirm}\n                                                                        size={'large'}\n                                                                        >\n                                                                        Execute\n                                                                  </Button> : <div /> :\n\n                                                                  _numConfirmations < noOfConfirmReq ?\n                                                                                                                                    \n                                                                  <Button\n                                                                        onClick={() => ConfirmTxn(txIndex, _typeOfTx)}\n                                                                        variant=\"contained\"\n                                                                        color=\"primary\"\n\n                                                                        // disabled={!disableConfirm}\n                                                                        size={'large'}\n                                                                        >\n                                                                        Confirm\n                                                                  </Button> :\n                                                                  !_executed ?\n                                                                  <Button\n                                                                        onClick={() => executeTxn(txIndex, _typeOfTx)}\n                                                                        variant=\"contained\"\n                                                                        color=\"primary\"\n\n                                                                        // disabled={!disableConfirm}\n                                                                        size={'large'}\n                                                                        >\n                                                                        Execute\n                                                                  </Button> : <div /> \n                                                            }\n                                                      </div>\n                        \n                                                </div>  \n                                                <div className=\"grid-item flex1\">\n                                                      <div className='flex m-b-10'>\n                                                            <Textfield \n                                                                  text={'Transaction ID:'}\n                                                                  color={'#777'}\n                                                                  fontSize={'15px'}\n                                                                  className={'flex1'}\n                                                            />\n                                                            <div className='flex flex4'style={{alignItems: 'flex-start'}}>\n                                                                  <Textfield \n                                                                        text={txIndex}\n                                                                        color={'#000'}\n                                                                        fontSize={'14px'}\n                                                                        className={'m-r-10'}\n                                                                  />\n                                                                  {/* <Icon className='m-r-5 cardIcon'>content_copy</Icon> */}\n                                                            </div>\n                                                      </div>\n                                                      <div className='flex m-b-10'>\n                                                            <Textfield \n                                                                  text={'Created:'}\n                                                                  color={'#777'}\n                                                                  fontSize={'15px'}\n                                                                  className={'flex1'}\n                                                            />\n                                                            <Textfield \n                                                                  text={getDate(_createdTime)}\n                                                                  color={'#000'}\n                                                                  fontSize={'14px'}\n                                                                  className={'flex4'}\n                                                            />\n                                                      </div>\n                                                      <div className='flex' style={{ marginBottom: '20px'}}>\n                                                            <Textfield \n                                                                  text={'Executed:'}\n                                                                  color={'#777'}\n                                                                  fontSize={'15px'}\n                                                                  className={'flex1'}\n                                                            />\n                                                            <Textfield \n                                                                  text={getDate(_executedTime)}\n                                                                  color={'#000'}\n                                                                  fontSize={'14px'}\n                                                                  className={'flex4'}\n                                                            />\n                                                      </div>\n                                                      <div style={{paddingBottom: '15px', fontSize: '16px'}}>\n                                                            <a \n                                                                  target=\"_blank\"\n                                                                  href={ chain == \"MaticMumbai\" ?`https://mumbai.polygonscan.com/tx/${hash}` : 'https://nile.tronscan.org/#/'}>\n                                                                        View on explorer\n                                                            </a>\n\n                                                      </div>\n                                                      \n                                                </div>\n                                          </div>\n                                          <div className=\"grid-item \" style={{flex: 1}}>\n                                                <Steps\n                                                      chain={chain}\n                                                      activeStep={activeStepHandler(_numConfirmations, _executed)}\n                                                      stepState={_executed}\n                                                />\n                                          </div>\n                                          \n                                    </div>\n                                    </AccordionDetails>\n                              </Accordion>\n                        )\n                  })\n            }\n      </div>\n     \n  )\n}\n\nexport default ConfirmationStep","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { addPopup } from \"../state/application/actions\";\nimport { useTransactionAdder } from \"../state/transactions/hooks\";\nimport { truncateMiddle } from \"../utils\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\n\nimport useCore from \"./useCore\";\n\nconst useMultiSig = (to: string, amount: BigNumber, token: string, typeOfTx: BigNumber) => {\n  const core = useCore();\n  const {chainId} = useWallet()\n  const addTransaction = useTransactionAdder();\n\n  return useCallback(\n    async (onSuccess: () => void, onFailure: () => void): Promise<void> => {\n      \n      try {\n        const contract = await core.contracts[`${chainId}`].MultiSig;\n        const tokenAdrs = core.contracts[`${chainId}`][token].address\n        const response = await contract.submitTransaction(to, amount, tokenAdrs, typeOfTx)\n        console.log('response', response)\n        \n        const tx = await response.wait();\n        console.log('response tx', tx)\n\n       setTimeout(async() => {\n        if (tx?.status === 1) {\n          const txnsCount = await contract.getTransactionCount()\n          const txDetail = await contract.getTransaction(txnsCount - 1)\n          if(typeOfTx.toNumber() == 0){\n            addTransaction(response, \n              {\n                _numConfirmations: txDetail._numConfirmations.toNumber(),\n                _typeOfTx: txDetail._typeOfTx.toNumber(),\n                _createdTime: txDetail._createdTime.toNumber(),\n                _executed: txDetail._executed,\n                _value: txDetail._value,\n                _token: txDetail._token,\n                txIndex: txDetail.txIndex.toNumber(),\n                _executedTime: txDetail._executedTime.toNumber(),\n                _to: txDetail._to,\n              }, \n            {\n              summary: `Submitted to Mint ${Number(getDisplayBalance(amount, 18, 3)).toLocaleString()}${token}`,\n            });\n          }else {\n            addTransaction(response, \n              {\n                _numConfirmations: txDetail._numConfirmations.toNumber(),\n                _typeOfTx: txDetail._typeOfTx.toNumber(),\n                _createdTime: txDetail._createdTime.toNumber(),\n                _executed: txDetail._executed,\n                _value: txDetail._value,\n                _token: txDetail._token,\n                txIndex: txDetail.txIndex.toNumber(),\n                _executedTime: txDetail._executedTime.toNumber(),\n                _to: txDetail._to,\n              }, \n              {\n              summary: `Submitted to Burn ${Number(getDisplayBalance(amount, 18, 3)).toLocaleString()}${token}.`,\n            });\n          }\n        }\n       }, 4000)\n\n        if (tx?.status !== 1) {}\n\n      } catch (e: any) {\n        console.log('useMultiSig error', e);\n        onFailure();\n        addPopup({\n          removeAfterMs: 10000,\n          content: {\n            error: {\n              message: formatErrorMessage(e?.data?.message || e?.message),\n              stack: e?.stack,\n            }\n          }\n        });\n      }\n    },\n    [core, amount, addTransaction, to, token],\n  );\n}\n\nexport default useMultiSig\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useSubmit = (to: string, amount: BigNumber, token: string, typeOfTx: BigNumber) => {\n\n  return useCallback(\n    async () => {\n      \n      try {\n\n        const trc20TokenAddress = \"TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE\"; \n        const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n        let contract = await window.tronWeb.contract().at(trcMultSigContract)\n\n        const response = await contract.submitTransaction(to, amount, trc20TokenAddress, typeOfTx).send()\n       \n        console.log('response', response)\n       \n      } catch (e: any) {\n        console.log('useSubmit error', e);\n      }\n    },\n    [amount, to, token, typeOfTx],\n  );\n}\n\nexport default useSubmit\n\n","import React, { useCallback, useEffect, useMemo } from \"react\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\n\nconst useGetAllTronTxns = () => {\n\n  const [response, setResponse] = React.useState<any>([])\n  \n\n  const fetchData = useCallback(async () => {\n    const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n    let contract = await window.tronWeb.contract().at(trcMultSigContract)\n    \n    const res = await contract.getTransactionCount().call()\n    \n    for(let i=0; i < res; i++){\n      let txn =  await contract.getTransaction(i).call()\n      \n      setResponse((prevState) => [...prevState, txn]);\n    }\n\n\n  }, []) \n\n  useEffect(() => {\n      fetchData()\n        .catch((err) => setResponse([]))\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetAllTronTxns","import React, { useState, useEffect, useMemo } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  MenuItem\n} from \"@material-ui/core\";\nimport Web3 from 'web3';\n\nimport { formatToBN, getBalance } from '../../../utils/formatBalance';\nimport useCore from '../../../hooks/useCore';\nimport ConfirmationStep from '../../../components/ConfirmationStep';\nimport { useWallet } from 'use-wallet';\nimport { BigNumber, utils } from 'ethers';\nimport useGetOwners from '../../../hooks/useGetOwners';\nimport useMultiSig from '../../../hooks/useMultiSig';\nimport { useAllTransactions, useClearAllTransactions } from '../../../state/transactions/hooks';\nimport useGetAllMultiSigTxns from '../../../hooks/useGetAllMultiSigTxns';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport useGetAllTronTxns from '../../../hooks/tron/useGetAllTronTxns';\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport Textfield from '../../../components/Textfield';\n\nexport const stableCoins = [\n  // {\n  //   label: 'Token',\n  //   chain: 'MaticMumbai'\n  // },\n  // {\n  //   label: 'Token2',\n  //   chain: 'MaticMumbai'\n  // },\n  {\n    label: 'Token3',\n    chain: 'MaticMumbai'\n  },\n  {\n    label: \"T20\",\n    chain: 'Neil',\n    contractAdrs: 'TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE'\n  }\n]\n\nexport const chains = [\n  {\n    label: 'MaticMumbai',\n    chainID: 'MaticMumbai'\n  },\n  {\n    label: \"Neil\",\n    chainID: 'Neil',\n  }\n]\n\nfunction Mint() {\n\n  const core = useCore()\n  const {myAccount } = core\n  const allTransactions = useAllTransactions()\n\n  const chain = useGetActiveBlockChain()\n\n  const [adddress, setAddress] = useState<string>('')\n  const [amount, setAmount] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n\n  let allTx = Object.entries(allTransactions)?.map((key) => key[1])?.filter((tx) => tx.txDetail._typeOfTx == 0)\n  let allTronTxns = useGetAllTronTxns()\n  allTronTxns = allTronTxns.filter((tx) => tx._typeOfTx.toNumber() == 0)\n\n  let contractOwners: any = useGetOwners()\n\n  const handleCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const mintTokenAction = useMultiSig(adddress, formatToBN(amount), stableCoin, BigNumber.from('0'))\n  const submitTronTxnAction = useSubmit(adddress, formatToBN(amount), stableCoin, BigNumber.from('0'))\n\n  const submitTx = async() => {\n\n    if(chain == 'MaticMumbai'){\n      mintTokenAction(() => {},() => {})\n    }\n\n    if(chain == 'Neil') {\n      submitTronTxnAction()\n    }\n  }\n\n  const disableMint = adddress && amount && stableCoin && chain && contractOwners?.includes(myAccount)\n\n  return (\n    <div style={{marginLeft: '260px', marginRight: '20px'}}>\n       <Textfield\n          text={'Mint the Stablecoin'}\n          fontSize={'24px'}\n          fontWeight={'bold'}\n          className={'m-b-15'}\n          />\n      <Card style={{marginBottom: '30px'}}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                helperText=\"This is the address to which token to be minted\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddress(e.target.value)}\n                value={adddress}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the amount of token to be minted\"\n                required\n                label=\"Amount\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAmount(e.target.value)}\n                value={amount}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                  helperText=\"This is the token to be minted\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoin}\n                  onChange={handleCoinChange}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                >\n                  {stableCoins.filter((c) => c.chain === chain).map((option) => (\n                    <MenuItem key={option.label} value={option.label}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </TextField>           \n            </Grid>\n            <Grid item xs={9}></Grid>\n            <Grid item xs={3}>\n              <Button\n                onClick={submitTx}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                disabled={!disableMint}\n              >\n                Submit\n              </Button>\n            </Grid>\n            {/* <Grid item xs={4}></Grid> */}\n          </Grid>\n          \n        </CardContent>\n\n      </Card>\n    \n      {/* <Card>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Transaction History\n          </Typography>\n        </CardContent>\n      </Card> */}\n      {/* {\n        chain == \"MaticMumbai\" ?\n        <ConfirmationStep allTx={Object.entries(allTransactions).map((key) => key[1])} /> :\n        <ConfirmationStep allTx={allTronTxns} />\n\n      } */}\n      <ConfirmationStep allTx={allTx} /> \n    </div>\n  )\n}\n\nexport default Mint","import React, { useState } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Snackbar,\n  Grid,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { formatToBN, getBalance } from '../../../utils/formatBalance';\nimport { chains, stableCoins } from '../Mint';\nimport ConfirmationStep from '../../../components/ConfirmationStep';\nimport useMultiSig from '../../../hooks/useMultiSig';\nimport useGetAllMultiSigTxns from '../../../hooks/useGetAllMultiSigTxns';\nimport useGetOwners from '../../../hooks/useGetOwners';\nimport useCore from '../../../hooks/useCore';\nimport { BigNumber } from 'ethers';\nimport useGetAllTronTxns from '../../../hooks/tron/useGetAllTronTxns';\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport Textfield from '../../../components/Textfield';\nimport { useAllTransactions } from '../../../state/transactions/hooks';\n\nfunction Burn() {\n\n  const core = useCore()\n  const { myAccount } = core\n  const chain = useGetActiveBlockChain()\n  const allTransactions = useAllTransactions()\n  \n  let contractOwners: any = useGetOwners()\n  let allTx = Object.entries(allTransactions)?.map((key) => key[1])?.filter((tx) => tx.txDetail._typeOfTx == 1)\n\n  let allTronTxns = useGetAllTronTxns()\n  allTronTxns = allTronTxns.filter((tx) => tx._typeOfTx.toNumber() == 1)\n\n  console.log('allTronTxns', allTronTxns)\n  \n  const [adddress, setAddress] = useState<string>('')\n  const [amount, setAmount] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  \n  const burnTokenAction = useMultiSig(adddress, formatToBN(amount), stableCoin, BigNumber.from('1'))\n  const submitTronTxnAction = useSubmit(adddress, formatToBN(amount), stableCoin, BigNumber.from('1'))\n\n\n  const submitTx = async() => {\n\n    if(chain == 'MaticMumbai'){\n      burnTokenAction(() =>{}, () => {})\n    }\n    if(chain == \"Neil\"){\n      submitTronTxnAction()\n    }\n  }\n \n  const handleCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const disableSubmitBtn = amount && stableCoin && chain && contractOwners?.includes(myAccount)\n\n  return (\n    <div style={{marginLeft: '260px', marginRight: '20px'}}>\n    <Textfield\n      text={'Burn the Stablecoin'}\n      fontSize={'24px'}\n      fontWeight={'bold'}\n      className={'m-b-15'}\n      />\n      <Card style={{marginBottom: '15px'}}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                helperText=\"This is the address to which token to be burned\"\n                required\n                id=\"outlined-email\"\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddress(e.target.value)}\n                value={adddress}\n                fullWidth\n                size='small'\n                // variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the amount of token to be burned\"\n                required\n                label=\"Amount\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAmount(e.target.value)}\n                value={amount}\n                fullWidth\n                size='small'\n                // variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the token to be burned\"\n                required\n                select\n                label=\"Stablecoin\"\n                value={stableCoin}\n                onChange={handleCoinChange}\n                fullWidth\n                // variant=\"outlined\"\n                size='small'\n              >\n                {stableCoins.filter((c) => c.chain === chain).map((option) => (\n                  <MenuItem key={option.label} value={option.label}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>  \n            </Grid>\n            <Grid item xs={9}></Grid>\n            <Grid item xs={3}>\n              <Button\n                disabled={!disableSubmitBtn}\n                onClick={submitTx}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth>\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n         \n         \n        </CardContent>\n\n      </Card>\n      \n      {/* {\n        chain == \"MaticMumbai\" ?\n        <ConfirmationStep allTx={allTx} /> :\n        <ConfirmationStep allTx={allTronTxns} />\n\n      } */}\n      <ConfirmationStep allTx={allTx} /> \n      \n    </div>\n  )\n}\n\nexport default Burn","import React from 'react'\n\nfunction Stats() {\n  return (\n    <div style={{marginLeft: '260px'}}>\n      <h1>Statistics</h1>\n    </div>\n  )\n}\n\nexport default Stats","import React from 'react';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport Auth from './views/Auth';\nimport Dashboard from './views/dashboard';\nimport Dashbaord from './views/dashboard';\nimport Burn from './views/dashboard/Burn';\nimport Mint from './views/dashboard/Mint';\nimport Stats from './views/dashboard/Stats';\n\n\nfunction Navigation() {\n\n  return (\n        <BrowserRouter>\n          <div style={{paddingBottom: '200px', backgroundColor: '#f2f2f2', minHeight: '100vh'}}>\n            <Dashboard />\n            <Routes>\n              <Route path=\"/auth\" element={<Auth />} />\n              <Route path=\"/dashboard\">\n                <Route path={'/dashboard/mint'} element={<Mint />}  />\n                <Route path={'/dashboard/burn'} element={<Burn />} />\n                <Route path={'/dashboard/statistics'} element={<Stats />} />\n              </Route>\n              <Route path=\"/logout\" element={<Auth />} />\n      \n            </Routes>\n          </div>\n          \n      </BrowserRouter>\n      );\n}\n\nexport default Navigation","import {createReducer, nanoid} from '@reduxjs/toolkit';\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal, updateBlockNumber,} from './actions';\nimport {INITIAL_APP_STATE} from '../../utils/constants';\n\nexport default createReducer(INITIAL_APP_STATE, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const {chainId, blockNumber} = action.payload;\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\n      state.popupList = (key\n          ? state.popupList.filter((popup) => popup.key !== key)\n          : state.popupList\n      ).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, {payload: {key}}) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    }),\n);\n","import {createReducer} from '@reduxjs/toolkit';\nimport { BigNumber } from 'ethers';\n\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n  updateTransaction\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport interface DashboardTxnDetails {\n  _numConfirmations: BigNumber, \n  _typeOfTx: BigNumber, \n  _createdTime: BigNumber, \n  _executed: boolean, \n  _value: BigNumber, \n  _token: string, \n  txIndex: BigNumber, \n  _executedTime: BigNumber, \n  _to: string\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      (transactions, {payload: \n        {chainId, from, hash, approval, summary, txDetail}}) => {\n        if (transactions[chainId]?.[hash]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n       \n        let txs = transactions[chainId] ?? {};\n\n        txs[hash] = {hash, approval, summary, from, addedTime: now(), txDetail};\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(\n      updateTransaction,\n      (transactions, {payload: \n        {chainId, from, hash, approval, summary, txDetail}}) => {\n        if (transactions[chainId]?.[hash]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n        \n        let txs = transactions[chainId] ?? {};\n        const mappedTxns = Object.entries(txs)\n        const index = mappedTxns.findIndex(obj => obj[1].txDetail.txIndex == txDetail.txIndex)\n        mappedTxns.splice(index, 1)\n        txs = Object.fromEntries(mappedTxns) \n               \n        txs[hash] = {hash, approval, summary, from, addedTime: now(), txDetail};\n        transactions[chainId] = txs;\n\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(\n      checkedTransaction,\n      (transactions, {payload: {chainId, hash, blockNumber}}) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (!tx.lastCheckedBlockNumber) {\n          tx.lastCheckedBlockNumber = blockNumber;\n        } else {\n          tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n        }\n      },\n    )\n    .addCase(finalizeTransaction, (transactions, {payload: {hash, chainId, receipt}}) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n","import {createReducer} from '@reduxjs/toolkit';\n\nimport {ChainIdInitialState, BlockChaianitialState} from '../../utils/chains/constant';\n\nimport {updateChainId, updateBlockchain} from './actions';\n\nexport const chainId = createReducer(ChainIdInitialState, (builder) =>\n    builder\n      .addCase(updateChainId, (chainsConfig, {payload: {chainId}}) => {\n        chainsConfig.active = chainId;\n      })\n  /* .addCase(updateAvailableChains, (chainsConfig, {payload: {chains}}) => {\n     chainsConfig.availableNetworks = chains;\n   }),*/\n);\n\nexport const blockChain = createReducer(BlockChaianitialState, (builder) =>\n    builder\n      .addCase(updateBlockchain, (blockChainConfig, {payload: {chain}}) => {\n        blockChainConfig.active = chain;\n      })\n);\n\n","import {IChainIdInitialState, IBlockChaianitialState} from './interface';\n\nexport const ChainIdInitialState: IChainIdInitialState = {\n  active: 1,\n};\n\nexport const BlockChaianitialState: IBlockChaianitialState = {\n  active: 'MaticMumbai'\n}\n","import {createLogger} from 'redux-logger';\nimport {load, save} from 'redux-localstorage-simple';\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport { composeWithDevTools } from '@redux-devtools/extension';\n\nimport application from './application/reducer';\nimport transactions from './transactions/reducer';\nimport {blockChain, chainId} from './chains/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions', 'slippage'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n    chainId,\n    blockChain,\n  },\n  \n  middleware: [\n    ...getDefaultMiddleware({serializableCheck: false, thunk: false}),\n    save({states: PERSISTED_KEYS}),\n    createLogger(),\n  ]\n  ,\n  preloadedState: load({states: PERSISTED_KEYS}),\n}\n\n);\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import {useCallback, useEffect, useState} from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import {useWallet} from 'use-wallet';\nimport {useDispatch} from 'react-redux';\nimport {useCallback, useEffect, useState} from 'react';\n\nimport config from '../../config';\nimport {updateBlockNumber} from './actions';\nimport useDebounce from '../../hooks/useDebounce';\nimport {getDefaultProvider} from '../../utils/provider';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport {useGetActiveChainId} from \"../chains/hooks\";\n\nexport default function Updater(): null {\n  const {ethereum, chainId} = useWallet();\n\n  const dispatch = useDispatch();\n  const windowVisible = useIsWindowVisible();\n  const activeChainId = useGetActiveChainId();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId: chainId,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state) => {\n        if (chainId === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return {chainId, blockNumber};\n          return {chainId, blockNumber: Math.max(blockNumber, state.blockNumber)};\n        }\n        return state;\n      });\n    },\n    [chainId, setState],\n  );\n\n  // The attach/detach listeners.\n  useEffect(() => {\n    if (!ethereum || !chainId || !windowVisible) return undefined;\n    setState({chainId, blockNumber: null});\n\n    const provider = getDefaultProvider(config[activeChainId]);\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error: any) =>\n        console.error(`Failed to get block number for chainId: ${chainId}`, error),\n      );\n\n    provider.on('block', blockNumberCallback);\n    return () => {\n      provider.removeListener('block', blockNumberCallback);\n    };\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import {useEffect, useState} from 'react';\n\n/**\n * Modified from https://usehooks.com/useDebounce/\n */\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay.\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\n\nimport config from '../../config';\nimport {getDefaultProvider} from '../../utils/provider';\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\nimport {useGetActiveChainId} from '../chains/hooks';\nimport {AppDispatch, AppState} from '../index';\n\nimport {checkedTransaction, finalizeTransaction} from './actions';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // Every 10 blocks if pending for longer than an hour.\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // Every 3 blocks if pending more than 5 minutes.\n    return blocksSinceCheck > 2;\n  } else {\n    // Otherwise every block.\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const {chainId, ethereum} = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n  const activeChainId = useGetActiveChainId();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // Show d on confirm.\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider(config[activeChainId]);\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup, activeChainId]);\n\n  return null;\n}\n","import React from 'react';\n\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater/>\n    <TransactionUpdater/>\n  </>\n);\n\nexport default Updaters;\n","import styled from 'styled-components'\nimport React, {createContext, useCallback, useState} from 'react';\n\nimport {ModalsContext} from '../../utils/interface';\n \nexport const Context = createContext<ModalsContext>({\n  onPresent: (content) => {},\n  onDismiss: () => {},\n})\n\nconst Modals: React.FC = ({children}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [content, setContent] = useState<React.ReactNode>()\n\n  const handlePresent = useCallback((modalContent: React.ReactNode) => {\n    setContent(modalContent)\n    setIsOpen(true)\n  }, [setContent, setIsOpen])\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined)\n    setIsOpen(false)\n  }, [setContent, setIsOpen])\n\n  return (\n    <Context.Provider value={{\n      content,\n      isOpen,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss,\n    }}>\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss}/>\n          {React.isValidElement(content) && React.cloneElement(content)}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  )\n}\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nexport default Modals;\n","import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport Slide from '@material-ui/core/Slide';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {makeStyles, Theme} from '@material-ui/core/styles';\nimport {TransitionProps} from '@material-ui/core/transitions';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport WarningIcon from '@material-ui/icons/Warning';\n// import theme from '../../theme';\n// import '../../customCss/Custom-Snackbar.css';\n\nimport config from '../../config';\nimport {PopupContent} from '../../utils/interface';\nimport {useGetActiveChainId} from \"../../state/chains/hooks\";\n\ninterface TxButtonProps {\n  notificationCount?: number;\n  index?: number;\n  open?: boolean;\n  content?: PopupContent;\n  handleCancel?: Function;\n}\n\n\nconst CustomizedSnackbars: React.FC<TxButtonProps> = ({\n  open,\n  content,\n  handleCancel,\n}) => {\n\n  const [openSnackbar, setOpen] = React.useState(open);\n\n  const isScucess = content?.txn?.success;\n  const isLoading = content?.txn?.loading;\n  const chainId = useGetActiveChainId();\n\n  useEffect(() => {\n    setOpen(true)\n  }, [isScucess, isLoading])\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') return;\n\n    setOpen(false);\n    if (handleCancel) handleCancel();\n  };\n\n  function SlideTransition(props: TransitionProps) {\n    return <Slide {...props} direction=\"left\"/>;\n  }\n\n  const SnackHeader = () => {\n    if (isLoading) {\n      return (\n        <SnackBarInnerContainer>\n          <div className=\"row-left-center\">\n            <div onClick={handleClose} className={'m-r-10'}><WarningIcon /></div>\n            Transaction Pending\n          </div>\n          <div onClick={handleClose}> <CancelIcon /> </div>\n        </SnackBarInnerContainer>\n      )\n    } else if (isScucess) {\n      return (\n        <SnackBarInnerContainer>\n          <div className=\"row-left-center\">\n            <div onClick={handleClose} className={'m-r-10'}><CheckCircleIcon /></div>\n            <div>Transaction Successful</div>\n          </div>\n          <div onClick={handleClose}><CancelIcon /> </div>\n        </SnackBarInnerContainer> \n      )\n    } else {\n      return (\n        <SnackBarInnerContainer>\n          <div className=\"row-left-center\">\n          <div onClick={handleClose} className={'m-r-10'}>Alert Icon</div>\n            Transaction Failed\n          </div>\n          <div onClick={handleClose}>Cross Icon</div>\n        </SnackBarInnerContainer>\n      )\n    }\n  }\n\n  const SnackBody = () => {\n    return (\n      <SnackBarBody>\n        <div>\n          {\n            content?.txn?.success || content?.txn?.loading\n            ? content?.txn?.summary || \"\"\n            : content?.error?.message || \"Error Occured\"\n          }\n        </div>\n        { \n          config[chainId].etherscanUrl !== '' && content?.txn?.hash && (\n            <AnchorTag\n              href={`${config[chainId].etherscanUrl}/tx/${content?.txn?.hash}`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <div>View on Explorer</div>\n              <div onClick={handleClose}>ArrowLink Icon</div>\n\n            </AnchorTag>\n          )\n        }\n      </SnackBarBody>\n    )\n  }\n\n  return (\n    <div>\n      {openSnackbar && (\n        <Snackbar\n          open={openSnackbar}\n          autoHideDuration={3000}\n          TransitionComponent={SlideTransition}\n          onClose={handleClose}\n          anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n          <SnackBarParent>\n            {SnackHeader()}\n            {SnackBody()}\n          </SnackBarParent>\n        </Snackbar>\n      )}\n    </div>\n  );\n};\n\nconst AnchorTag = styled.a`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin-top: 4px;\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst SnackBarInnerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 50px;\n  padding: 0 12px 0 18px;\n  justify-content: space-between;\n  border-radius: 4px 4px 0 0;\n  background: #3f50b5;\n  color: white;\n`;\n\nconst SnackBarBody = styled.div`\n  background: rgba(0, 0, 0, 0.2);\n  backdrop-filter: blur(70px);\n  border-radius: 0 0 4px 4px;\n  padding: 12px 12px 12px 52px;\n  font-weight: 600;\n  font-size: 14px;\n  width: 100%;\n  color: black;\n`;\n\nconst SnackBarParent = styled.div`\n  background: rgba(255, 255, 255, 0.02);\n  backdrop-filter: blur(70px);\n  border-radius: 4px 4px 0 0;\n  border: 1px solid;\n  width: 378px;\n  border-image-source: linear-gradient(180deg,\n  rgba(255, 116, 38, 0.1) 0%,\n  rgba(255, 255, 255, 0) 100%);\n  color: #ffffff;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 20px;\n  @media (max-width: 600px) {\n    width: 100%;\n  }\n`;\n\nexport default CustomizedSnackbars;\n","import React from 'react';\n\nimport TransactionSnackbar from './TransactionSnackbar';\nimport {useActivePopups} from '../../state/application/hooks';\n\nexport default function Popups() {\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      {\n        activePopups.map((p, i) => (\n          <TransactionSnackbar\n            key={i}\n            index={i}\n            notificationCount={i + 1}\n            open\n            content={p.content}\n          />\n        ))\n      }\n    </>\n  );\n}\n","import { HashRouter as Router } from 'react-router-dom';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { SnackbarProvider } from \"notistack\";\nimport {Provider} from \"react-redux\";\n\nimport dotenv from 'dotenv'\nimport config, { getSupportedChains } from './config';\nimport ProtocolProvider from './context/Provider';\n// import ModalsProvider from './context/Modals'\nimport Navigation from './navigation';\nimport useCore from './hooks/useCore';\nimport Dashbaord from './views/dashboard';\nimport store from './state';\nimport Updaters from './state/Updaters';\nimport ModalsProvider from './context/Modals'\nimport Popups from './components/Popups';\nimport { useGetUpdateActiveChainId } from './state/chains/hooks';\nimport { useEffect } from 'react';\ndotenv.config()\n\nconst Providers: React.FC = ({children}) => {\n  return (\n    <Provider store={store}>\n      <WalletProvider>{children}</WalletProvider>\n    </Provider>\n\n  );\n};\n\nconst WalletProvider = ({ children }: any) => {\n\n  return (\n    <UseWalletProvider\n      // chainId={config.chainId}\n      connectors={{\n        injected: {\n          chainId: getSupportedChains(),\n        },\n        walletconnect: {\n          chainId: config.chainId,\n          rpcUrl: config.defaultProvider\n        }\n      }}\n      >\n        <Updaters/>\n        <ProtocolProvider>\n          <AppContent>{children}</AppContent>\n        </ProtocolProvider>\n\n    </UseWalletProvider>\n  );\n};\n\nconst AppContent: React.FC = ({children}) => {\n\n  const core = useCore()\n\n  const {ethereum, chainId} = useWallet();\n  const setChainId = useGetUpdateActiveChainId();\n\n  useEffect(() => {\n    if (ethereum)\n      // @ts-ignore\n      ethereum.on('chainChanged', (chainId) => {\n        console.log('chain changed', chainId);\n        setChainId(chainId);\n      });\n  }, [ethereum]);\n\n  if (!window.ethereum) {\n    console.log('no window ethereum')\n    return <div />\n  };\n  if (!core){\n    console.log('no core');\n    return <div />\n  };\n\n  return(\n    <ModalsProvider>\n      <SnackbarProvider\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        maxSnack={2}\n        autoHideDuration={2500}\n      >\n        <>\n          <Popups/>\n          {children}\n        </>\n      </SnackbarProvider>\n    </ModalsProvider>\n  )\n}\n\nfunction App() {\n\n  return (\n    <Providers>\n      <Navigation />\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/components/confirmation.css'\nimport './styles/common.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}