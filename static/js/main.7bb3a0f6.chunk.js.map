{"version":3,"sources":["chainConfig/ethereum.ts","chainConfig/maticMumbai.ts","chainConfig/goerli.ts","config.ts","protocol/ERC20.ts","protocol/deployments/abi.ts","utils/constants.ts","utils/provider.ts","tronConfig.ts","protocol/index.tsx","state/chains/actions.ts","state/chains/hooks.ts","context/Provider/Provider.tsx","styles/material-dashboard-react.js","styles/adminStyle.js","styles/components/sidebarStyle.js","hooks/useCore.ts","views/dashboard/Sidebar.tsx","icons/tronIcon.jpeg","views/dashboard/index.tsx","state/application/actions.ts","state/application/hooks.ts","utils/formatErrorMessage.ts","hooks/multisig/useMultiSig.tsx","hooks/tron/useGetTronTransactionCount.ts","components/Textfield.tsx","state/transactions/actions.ts","hooks/useGetConfirmReq.ts","state/transactions/hooks.tsx","utils/formatBalance.ts","hooks/useGetTokenDetails.ts","hooks/useSubmitTransaction.ts","hooks/useConfirmTxn.ts","utils/index.tsx","components/ProgressModal.tsx","hooks/useGetAllTokenDetails.ts","utils/blockchain.ts","hooks/tron/useSubmit.ts","hooks/tron/useTronMultisig.ts","hooks/tron/useConfirm.ts","hooks/tron/useTronTokensTotalSupply.ts","hooks/tron/useGetTronOwners.ts","views/dashboard/Admin/index.tsx","components/Steps.tsx","hooks/useExecuteTxn.ts","hooks/tron/useExecute.ts","hooks/tron/useNoOfConfimReq.ts","components/ConfirmationStep.tsx","hooks/useGetOwners.ts","hooks/useGetTokenBalance.ts","hooks/tron/useGetTronTokenBalance.ts","views/dashboard/Burn/index.tsx","hooks/useFreezeToken.ts","hooks/useUnFreezeToken.ts","hooks/tron/useFreezeTokenTron.ts","hooks/tron/useUnFreezeTokenTron.ts","views/dashboard/Freeze/index.tsx","views/dashboard/Mint/index.tsx","views/dashboard/Stats/index.tsx","views/Auth/index.tsx","views/dashboard/DashboardContent.tsx","navigation.tsx","state/application/reducer.ts","state/transactions/reducer.ts","utils/chains/constant.ts","state/chains/reducer.ts","state/index.ts","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","context/Modals/Modals.tsx","components/Popups/TransactionSnackbar.tsx","components/Popups/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["configurations","ethereum","networkName","networkDisplayName","chainId","etherscanUrl","defaultProvider","deployments","require","refreshInterval","gasLimitMultiplier","blockchainToken","blockchainTokenName","blockchainTokenDecimals","networkSetupDocLink","supportedTokens","decimalOverrides","USDC","maticMumbai","goerli","getSupportedChains","Object","keys","map","i","Number","ERC20","address","provider","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFro","balance","formatUnits","supply","toFixed","name","type","anonymous","inputs","indexed","internalType","constant","outputs","payable","stateMutability","abis","IERC20","StablecoinImpl","MultiSig","tronMultiSigContract","tronStableCoins","label","chain","contractAdrs","DAY_IN_MS","WEEK_IN_MS","BigNumber","from","Date","now","Math","floor","pow","getDefaultProvider","config","_window","window","ethers","providers","Web3Provider","web3","currentProvider","JsonRpcProvider","devConfig","privateKey","process","fullHost","service","usdt","justSwap","tronscanUrl","tronConfig","Protocol","cfg","myAccount","signer","contracts","tokens","_activeNetwork","tronWeb","tronMultisigContract","TronWeb","entries","chainIdString","networkConfig","deployment","abi","includes","ABIS","e","console","log","newProvider","Web3","getSigner","connect","values","token","dispatch","id","gas","multiplied","toNumber","gasLimit","updateChainId","createAction","updateBlockchain","useGetActiveBlockChain","useSelector","state","blockChain","active","useHandleBlokchainChange","useDispatch","useCallback","useGetActiveChainId","updateId","useGetUpdateActiveChainId","avaiableIds","changedId","chains","Context","createContext","core","ProtocolProvider","props","children","useState","setCore","useProvider","useAccount","useEffect","newCore","unlockWallet","Provider","value","hexToRgb","input","replace","test","length","Error","first","second","last","toUpperCase","parseInt","drawerWidth","transition","container","padding","marginRight","overflow","height","marginLeft","defaultFont","fontFamily","fontWeight","lineHeight","primaryColor","warningColor","dangerColor","successColor","infoColor","roseColor","grayColor","blackColor","whiteColor","primaryBoxShadow","boxShadow","infoBoxShadow","successBoxShadow","warningBoxShadow","dangerBoxShadow","roseBoxShadow","title","background","margin","paddingTop","borderTop","color","textDecoration","marginTop","marginBottom","minHeight","appStyle","theme","wrapper","position","top","mainPanel","breakpoints","up","width","overflowScrolling","content","sidebarStyle","drawerPaper","border","backgroundColor","bottom","left","zIndex","down","display","right","visibility","overflowY","textAlign","paddingRight","paddingLeft","transform","logo","logoLink","fontSize","logoLinkRTL","logoImage","maxHeight","img","verticalAlign","backgroundSize","backgroundPosition","opacity","list","paddingBottom","listStyle","item","itemLink","borderRadius","itemIcon","float","itemText","sidebarWrapper","fab","useCore","useContext","useStyles","makeStyles","styles","Sidebar","React","setState","toggleDrawer","open","event","key","classes","links","List","className","url","icon","r","onClick","to","defaultAddress","hex","isActive","ListItem","button","Icon","classNames","ListItemText","primary","disableTypography","brand","Hidden","mdUp","implementation","Fab","size","style","outline","Drawer","variant","anchor","paper","onClose","Divider","smDown","chainID","Dashbaord","isMobile","useMediaQuery","maxWidth","chainNetwork","useNetwork","tronObj","setTronObj","tronSnackbar","setTronSnackbar","tronCurrentAcc","setTronCurrentAcc","setChain","obj","setInterval","base58","clearInterval","tronweb","addEventListener","data","message","action","location","href","Snackbar","anchorOrigin","vertical","horizontal","justifyContent","TextField","required","select","onChange","target","localStorage","setItem","option","MenuItem","alignItems","ready","src","tronIcon","alt","slice","tronLink","chainStatus","showBalance","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","addPopup","removePopup","loaderVisibile","useAddPopup","useGetLoader","application","isVisible","useUpdateLoader","formatErrorMessage","toLowerCase","useGetRequiredCount","response","setResponse","fetchData","res","catch","err","useGetConfirmationCount","txnId","getConfirmationCount","count","useGetOwners","getOwners","useGetSingleTransaction","sendRes","txId","transactions","executed","useGetTronTransactionCount","at","transactionCount","call","error","Textfield","text","addTransaction","updateTransaction","clearAllTransactions","finalizeTransaction","checkedTransaction","saveTxn","useGetConfirmReq","numConfirmationsRequired","useTransactionUpdater","transDetail","summary","approval","hash","_numConfirmations","_typeOfTx","_createdTime","_executed","_value","_token","txIndex","_executedTime","_to","txn","loading","success","txDetail","getBalance","decimals","getDisplayBalance","fractionDigits","formattedBalance","decimalsPointIndex","indexOf","formatToBN","split","beforeDecimals","afterDecimal","beforeDecimalsPrecisionText","afterDecimalsPrecisionText","fixedPrecisionValue","parseUnits","LOADING_DEFAULT_BASIC_STATE","isLoading","NON_LOADING_DEFAULT_BASIC_STATE","useGetTokenDetails","tokenDetails","setTokenDetails","fetch","utils","isAddress","useMultiSig","typeOfTx","destinationAdrs","updateLoader","creation","confirmedTime","confirmation","useTransactionAdder","onSuccess","onFailure","iface","Interface","encodeFunctionData","parseEther","submitTransaction","wait","tx","setTimeout","status","txnsCount","transactionHash","stack","useConfirmTxn","isExecuted","confirmCallback","index","confirmTransaction","reason","truncateMiddle","fullStr","strLen","separator","sepLen","charsToShow","frontChars","ceil","backChars","substr","DialogTitle","withStyles","createStyles","root","spacing","closeButton","palette","grey","other","Typography","IconButton","DialogContent","MuiDialogContent","MuiDialogActions","ProgressModal","currentLoaderState","setOpen","handleClose","Dialog","fullWidth","dividers","ariaLabel","wrapperStyle","wrapperClass","radius","visible","useGetAllTokenDetails","forEach","bal","prev","_","uniqWith","arrVal","othVal","mainchain","triggerSmartContract","functionSelector","options","parameters","transactionBuilder","assign","feeLimit","transaction","result","JSON","stringify","useSubmit","parameter","raw_data","send","trx","getTransaction","txnInfo","ret","contractRet","useTronGetIsExecuted","setTronIsExecuted","instance","useGetTronConfirmationCount","useConfirm","useTronTokensTotalSupply","useGetTronOwners","fetchOwners","txnRes","fromHex","table","minWidth","Admin","ethTxns","tronTxns","contractOwners","adddressToAdd","setAddressToAdd","adddressRemove","setAddressToRemove","noOfConfirmations","setNoOfConfirmations","finalEthTxns","setFinalEthTxns","finalTronTxns","setFinalTronTxns","addOwnerAction","useSubmitTransaction","removeOwnerAction","noConfirmAction","setConfirmationCount","setIsExecuted","confirmReq","confirmTxnAction","allTokensTotalSupply","chaindId","addTronOwnerAction","removeTronOwnerAction","noConfirmActionTron","confirmTronTxnAction","allTronTokensTotalSupply","useGetTronTokenDetails","tronContractOwners","confirmTronRequired","useTronGetRequiredCount","numOfConfirmationCountTron","isTronExecuted","sortTransactions","toAdrs","typeOfTxn","typeOfTxnID","mutlisigAddr","arr1","arr2","submitResponse","push","numConfirmations","tronArr1","toHex","tronArr2","disableChangeConfirmCount","disableAddOwner","disableRemoveOwner","Grid","xs","Card","CardContent","md","helperText","Button","disabled","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","sort","a","b","row","confirmData","confirmCount","confirmHash","concat","details","component","scope","handleConfirm","singleHash","rel","actionsContainer","resetContainer","getDate","val","timestamp","toString","date","_moment","unix","utc","format","getStepContent","step","stepData","chainName","submitHash","submitFrom","submitTime","timeStamp","Steps","stepState","activeStep","setStepLabelColor","steps","Stepper","orientation","Step","StepLabel","StepContent","useExecuteTxn","executeCallback","executeTransaction","useExecute","useNoOfConfimReq","ConfirmationStep","allTransactions","fetchTronTokenDetails","finalData","setFinalData","finalTronData","setFinalTronData","testOwners","blockNumber","returnRes","useGetTxnFromHash","noOfConfirmReq","setTronConfirmationCount","getFinalData","ConfirmTxn","timeAgo","fromNow","formatEther","submitTo","Accordion","AccordionSummary","AccordionDetails","flex","flexDirection","useGetTokenBalance","stableCoin","useGetTronTokenBalance","fetchTronTokenBal","Burn","setAddress","setAmount","setStableCoin","stableCoinDetails","setStableCoinDetails","burnTokenAction","submitTronTxnAction","getTokenDetails","ethTxnsArr","tronTxnsArr","submitTx","handleCoinChange","disableSubmitBtn","coin","useFreezeToken","freeze","useUnFreezeToken","unfreeze","useFreezeTokenTron","useUnFreezeTokenTron","Freeze","addressToFreeze","setAddressToFreeze","addressToUnFreeze","setAddressToUnFreeze","stableCoinUnfreeze","setStableCoinUnfreeze","freezeAction","unFreezeAction","freezeActionTron","unFreezeActionTron","disableFreeze","disableUnFreeze","Mint","mintTokenAction","disableMint","Stats","Auth","useDisconnect","disconnect","showSnackbar","setShowSnackbar","isConnected","document","Fragment","sm","gutterBottom","DashboardContent","ethTxnCount","useGetTransactionCount","tronTxnCount","allApiTxns","setAllApiTxns","allApiTronTxns","setAllApiTronTxns","allApiTronRes","setAllApiTronRes","allApiEthRes","setAllApiEthRes","ethObj","setEthObj","intervalCall","timnow","axios","get","timeout","then","getTronTxnsFromAPI","tronGetConfirm","getSubmitTxnsFromAPI","ethGetConfirm","functionName","newIndex","owner_address","txID","hexToNumberString","txns","path","element","Navigation","createReducer","popupList","walletModalOpen","settingsMenuOpen","builder","addCase","payload","max","removeAfterMs","filter","popup","nanoid","show","p","execution","txs","lastCheckedBlockNumber","isEmpty","BlockChaianitialState","getItem","chainsConfig","blockChainConfig","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","thunk","save","states","createLogger","preloadedState","load","VISIBILITY_STATE_SUPPORTED","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","removeEventListener","useIsWindowVisible","activeChainId","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","useDebounce","lastBlockNumber","useBlockNumber","receipt","blocksSinceCheck","minutesPending","getTime","addedTime","shouldCheck","getTransactionReceipt","blockHash","contractAddress","transactionIndex","Updaters","onPresent","onDismiss","StyledModalWrapper","styled","div","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","undefined","isValidElement","cloneElement","AnchorTag","SnackBarInnerContainer","SnackBarBody","SnackBarParent","CustomizedSnackbars","handleCancel","openSnackbar","isScucess","reload","autoHideDuration","TransitionComponent","Slide","direction","SnackBody","Popups","activePopups","useMemo","useActivePopups","TransactionSnackbar","notificationCount","dotenv","configureChains","mainnet","alchemyProvider","apiKey","connectors","connectorsForWallets","groupName","wallets","wallet","injected","rainbow","metaMask","ledger","wagmiClient","createClient","autoConnect","WalletProvider","client","coolMode","lightTheme","accentColor","Providers","AppContent","newNetwork","oldNetwork","setChainId","maxSnack","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7bb3a0f6.chunk.js","sourcesContent":["import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    ethereum: {\n        networkName: 'Ethereum',\n        networkDisplayName: 'Ethereum',\n        chainId: 1,\n        etherscanUrl: 'https://etherscan.io',\n        defaultProvider:'https://silent-black-frost.quiknode.pro/6fbee126d2692f4c84d1c11167b0d7c4a77b8fb5/',\n        deployments: require('../protocol/deployments/ethereum.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'MATIC',\n        blockchainTokenName: 'MATIC',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"DBT\"\n        ], \n        decimalOverrides: {\n          'ARTH-DP': 18,\n          USDC: 6,\n          \"DBT\": 18\n        },\n    },\n}\n\nexport default configurations;","import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    80001: {\n        networkName: 'Matic Mumbai Testnet',\n        networkDisplayName: 'Polygon testnet',\n        chainId: 80001,\n        etherscanUrl: 'https://mumbai.polygonscan.com',\n        defaultProvider:\n          'https://matic-mumbai.chainstacklabs.com',\n        deployments: require('../protocol/deployments/maticMumbai.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'MATIC',\n        blockchainTokenName: 'MATIC',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"USDA\"\n        ], \n        decimalOverrides: {\n          'ARTH-DP': 18,\n          USDC: 6,\n          \"DBT\": 18\n        },\n      },\n}\n\nexport default configurations;","import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    5: {\n        networkName: 'Goerli Testnet',\n        networkDisplayName: 'Goerli testnet',\n        chainId: 5,\n        etherscanUrl: 'https://goerli.etherscan.io',\n        defaultProvider:\n          'https://goerli.infura.io/v3/3a9a6018905e45669f505505420d81d6',\n        deployments: require('../protocol/deployments/goerli.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'ETH',\n        blockchainTokenName: 'ETH',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"USDB\",\n          \"USDA\",\n          \"USDF\"\n        ], \n        decimalOverrides: {\n\n        },\n      },\n}\n\nexport default configurations;","import { Configuration } from './utils/interface';\nimport ethereum from './chainConfig/ethereum'\nimport maticMumbai from './chainConfig/maticMumbai'\nimport goerli from './chainConfig/goerli';\n\nconst configurations: { [env: string]: Configuration } = {\n  ...ethereum,\n  ...maticMumbai,\n  ...goerli\n};\n\nexport default configurations;\n\nexport const getSupportedChains = (): number[] =>\n  Object.keys(configurations).map((i) => Number(i));\n","import { BigNumber, Contract } from 'ethers';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { TransactionResponse } from '@ethersproject/providers';\n\nclass ERC20 {\n  protected contract: Contract;\n\n  symbol: string;\n  address: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(\n    sender: string,\n    recipient: string,\n    amount: BigNumber,\n  ): Promise<TransactionResponse> {\n    return this.contract.transferFro(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nexport const ABI = [\n  {\n    name: 'Approval',\n    type: 'event',\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'spender', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transfer',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: 'address', name: 'owner', type: 'address' },\n      { internalType: 'address', name: 'spender', type: 'address' },\n    ],\n    name: 'allowance',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'spender', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'sender', type: 'address' },\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transferFrom',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","import IERC20 from \"./abi/IERC20.json\";\n\nimport ERC20 from \"./abi/ERC20.json\";\nimport { IABIS } from \"../../utils/interface\";\nimport StablecoinImpl from \"./abi/StablecoinImpl.json\";\nimport MultiSig from \"./abi/MultiSig.json\";\n\nconst abis: IABIS = {\n  IERC20,\n  StablecoinImpl,\n  MultiSig,\n  ERC20,\n};\n\nexport default abis;\n","import { BigNumber } from 'ethers';\nimport {\n  BasicState,\n  LockedState,\n  RewardEarned,\n  ApplicationState,\n  TransactionState,\n  DateInput,\n  SingleDateInput,\n  EthereumConfig,\n  BasicStateString,\n  PoolTokenRateState,\n  DebtPoolTokenRateState\n} from './interface';\n\nexport const tronMultiSigContract = \"TDTQFVuxHkMcFx6ENPwQieRhb81ihSExHj\"\n\nexport const tronStableCoins = [\n  {\n    label: \"TRUSDA\",\n    symbol: \"TRUSDA\",\n    chain: 'Nile',\n    contractAdrs: 'TPLZEEyWK1M4qfdnR89GeQC3RJknwCU99C'\n  },\n  {\n    label: \"TRUSDB\",\n    symbol: \"TRUSDB\",\n    chain: 'Nile',\n    contractAdrs: 'TMAQ7sn8PeFqKCua65qR3yUjeWUSXgNoTk'\n  }\n]\n\nexport const DAY = 86400;\nexport const DAY_IN_MS = 86400000;\n\nexport const YEAR = 365 * 86400;\nexport const YEAR_IN_MS = YEAR * 1000;\n\nexport const MONTH = 31 * 24 * 60 * 60;\nexport const MONTH_IN_MS = MONTH * 1000;\n\nexport const WEEK = 7 * 86400;\nexport const WEEK_IN_MS = 7 * 86400000;\n\nexport const MAXTIME = 4 * 365 * 86400;\nexport const MAXTIME_IN_MS = 4 * 365 * 86400000;\n\nexport const LOADING_DEFAULT_BASIC_STATE: BasicState = {\n  isLoading: true,\n  value: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEFAULT_BASIC_STATE: BasicState = {\n  isLoading: false,\n  value: BigNumber.from(0)\n};\n\nexport const LOADING_DEBTPOOLTOKEN_RATE_STATE: DebtPoolTokenRateState = {\n  isLoading: true,\n  poolToken: BigNumber.from(0),\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEBTPOOLTOKEN_RATE_STATE: DebtPoolTokenRateState = {\n  isLoading: false,\n  arth: BigNumber.from(0),\n  poolToken: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_LOCKED_STATE: LockedState = {\n  isLoading: true,\n  lockedOn: BigNumber.from(0),\n  lockedUntil: BigNumber.from(0),\n  amountLocked: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_BASIC_STATE_STRING: BasicStateString = {\n  isLoading: true,\n  value: \"\",\n};\n\nexport const LOADING_POOLTOKEN_RATE_STATE: PoolTokenRateState = {\n  isLoading: true,\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0),\n  scallop: BigNumber.from(0),\n};\n\nexport const NON_LOADING_POOLTOKEN_RATE_STATE: PoolTokenRateState = {\n  isLoading: false,\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0),\n  scallop: BigNumber.from(0),\n};\n\nexport const NON_LOADING_DEFAULT_BASIC_STATE_STRING: BasicStateString = {\n  isLoading: false,\n  value: \"0\",\n};\n\nexport const NON_LOADING_DEFAULT_LOCKED_STATE: LockedState = {\n  isLoading: false,\n  lockedOn: BigNumber.from(0),\n  lockedUntil: BigNumber.from(0),\n  amountLocked: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_REWARD_EARNED: RewardEarned = {\n  isLoading: true,\n  value: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEFAULT_REWARD_EARNED: RewardEarned = {\n  isLoading: false,\n  value: BigNumber.from(0)\n};\n\nexport const DEFAULT_ETHEREUM_CONFIG: EthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 1,\n  defaultGas: '6000000',\n  defaultGasPrice: '1000000000000',\n  ethereumNodeTimeout: 10000,\n};\n\nexport const DEFAULT_DATEINPUT_STATE: DateInput = {\n  startDate: new Date(),\n  endDate: new Date(\n    Date.now() % DAY_IN_MS === 0 ? Date.now() + WEEK_IN_MS + DAY_IN_MS : (Math.floor(Date.now() / DAY_IN_MS) * DAY_IN_MS) + WEEK_IN_MS + DAY_IN_MS\n  )\n};\n\nexport const DEFAULT_SINGLE_DATEINPUT_STATE: SingleDateInput = new Date(\n  Date.now() % DAY_IN_MS === 0 ? Date.now() + WEEK_IN_MS + DAY_IN_MS : (Math.floor(Date.now() / DAY_IN_MS) * DAY_IN_MS) + WEEK_IN_MS + DAY_IN_MS\n);\n\nexport const DECIMALS_18 = BigNumber.from(10).pow(18);\n\nexport const INITIAL_APP_STATE: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n  isVisible: false\n};\n\nexport const INITIAL_TRANSACTION_STATE: TransactionState = {};\n\nexport const BNZERO = BigNumber.from(0);\n\nexport const noOp = () => { };\n\nexport const handleDate = (date: any) => {\n  return new Date(date.setHours(0, 0, 0, 0));\n}\n\nexport const addDays = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + (DAY_IN_MS) * no));\n}\n\nexport const addWeeks = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + (WEEK_IN_MS) * no));\n}\n\nexport const addMonths = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + MONTH_IN_MS * no));\n}\n\nexport const addYears = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + YEAR_IN_MS * no));\n}\n","import { ethers } from 'ethers';\n\nimport { Configuration } from './interface';\nimport { web3ProviderFrom } from './etherUtils';\n\nexport function getDefaultProvider(config: Configuration): ethers.providers.BaseProvider {\n  // @ts-ignore\n  const _window: { ethereum?: any, web3?: any } = window;\n\n  // Modern dapp browsers.\n  if (_window.ethereum) {\n    try {\n      // Request account access\n      // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      // App.YOUR_ADDRESS = accounts[0]\n    } catch (error) {\n      // User denied account access...\n      console.error(\"User denied account access\");\n    }\n\n    return new ethers.providers.Web3Provider(_window.ethereum);\n  }\n\n  // Legacy dapp browsers...\n  if (_window.web3) {\n    return new ethers.providers.Web3Provider(_window.web3.currentProvider);\n  }\n\n  // If no injected web3 instance is detected, fall back to backup node.\n  return new ethers.providers.JsonRpcProvider(config.defaultProvider);\n}\n\nexport function getGanacheProvider(config: Configuration): ethers.providers.JsonRpcProvider {\n  return new ethers.providers.JsonRpcProvider(\n    web3ProviderFrom(config.defaultProvider),\n    config.chainId\n  );\n}\n","const env = process.env.REACT_APP_ENV;\n\nconst Config = {\n  version: 'v1.0.0',\n  chain: {\n    privateKey: process.env.REACT_APP_TRONLINK_PRIVATE_KEY,\n    fullHost: 'https://api.trongrid.io'\n  },\n  trongrid: {\n    host: 'https://api.trongrid.io',\n    key: 'xxxxxx'\n  },\n  service: {},\n  contract: {\n    usdt: 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'\n  },\n  defaultDecimal: 6,\n  tronLinkTime: 8,\n  justSwap: 'https://justswap.org/',\n  tronscanUrl: 'https://tronscan.io/#'\n};\n\nconst devConfig = {\n    chain: {\n      privateKey: process.env.REACT_APP_TRONLINK_PRIVATE_KEY,\n      fullHost: 'https://api.nileex.io'\n    },\n    service: {},\n    contract: {\n      usdt: 'TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf'\n    },\n    justSwap: 'https://justswap.org/',\n    tronscanUrl: 'https://nile.tronscan.io/#'\n  };\n\nexport default devConfig;\n","import {BigNumber, Contract, ethers, Overrides} from 'ethers';\n\nimport ERC20 from './ERC20';\nimport ABIS from './deployments/abi';\nimport {configKeys, Configuration} from '../utils/interface';\nimport {getDefaultProvider} from '../utils/provider';\nimport Web3 from \"web3\";\nimport TronWeb from \"tronweb\"\n\nimport tronConfig from '../tronConfig';\n\nconst chain = tronConfig.chain;\nconst privateKey = chain.privateKey;\n\n/**\n * An API module of ARTH contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class Protocol {\n  \n  // @ts-ignore\n  myAccount: string;\n\n  // @ts-ignore\n  web3: Web3;\n\n  signer?: ethers.Signer;\n\n  config: {\n    [chainId: number]: Configuration;\n  };\n\n  contracts: {\n    [chainId: number]: { [name: string]: Contract };\n  };\n\n  // @ts-ignore\n  provider: ethers.providers.BaseProvider;\n\n  tokens: {\n    [chainId: number]: { [name: string]: ERC20 };\n  };\n\n  _activeNetwork: number;\n\n  tronWeb: any\n\n  tronMultisigContract: any\n\n  constructor(cfg: { [chainId: number]: Configuration }, chainId: number) {\n    this._activeNetwork = chainId;\n    this.contracts = {};\n    this.tokens = {};\n    this.tokens = {};\n    this.tronWeb = new TronWeb({\n      fullHost: chain.fullHost,\n      privateKey\n    });\n\n    try {\n      for (const [chainIdString, config] of Object.entries(cfg)) {\n        const chainId = Number(chainIdString);\n        const {deployments} = config;\n        this.provider = getDefaultProvider(config);\n        const networkConfig: { [name: string]: Contract } = {};\n        const tokens: { [name: string]: ERC20 } = {};\n\n        for (const [name, deployment] of Object.entries(deployments)) {\n          if (!deployment.abi) continue;\n          //to push all erc20 tokens in tokens array\n          if (cfg[chainId].supportedTokens.includes(name)) {\n            tokens[name] = new ERC20(\n              deployments[name].address,\n              this.provider,\n              name,\n              cfg[chainId].decimalOverrides[name] || 18,\n            );\n          }\n          //to push all others as contracts\n          networkConfig[name] = new Contract(\n            deployment.address,\n            ABIS[deployment.abi],\n            this.provider,\n          );\n\n        }\n        this.contracts[chainId] = networkConfig;\n        this.tokens[chainId] = tokens;\n      }\n    } catch (e) {\n      console.log('Error in contracts mapping', e);\n    }\n\n    this.config = cfg;\n  };\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  };\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    // @ts-ignore\n    const newProvider = new ethers.providers.Web3Provider(provider);\n    this.web3 = new Web3(provider);\n    this.provider = newProvider;\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [chainId, contracts] of Object.entries(this.contracts)) {\n      for (const [name, contract] of Object.entries(contracts)) {\n        this.contracts[Number(chainId)][name] = contract.connect(this.signer);\n      }\n    }\n\n    for (const tokens of Object.values(this.tokens)) {\n      for (const token of Object.values(tokens)) {\n        if (token && token.address) token.connect(this.signer);\n      }\n    }\n  }\n\n  updateActiveNetwork(chainId: number, dispatch: any) {\n    this._activeNetwork = chainId;\n  }\n\n  getConfig(id: configKeys, chainId: number) {\n    return this.config[chainId][id];\n  }\n\n  gasOptions(gas: BigNumber = BigNumber.from('6000000')): Overrides {\n    const multiplied = Math.floor(gas.toNumber() * this.config[137]['gasLimitMultiplier']);\n    return {\n      gasLimit: BigNumber.from(multiplied),\n    };\n  };\n\n}\n","import {createAction} from '@reduxjs/toolkit';\n\nexport const updateChainId = createAction<{ chainId: number }>('app/updateChainId');\n\nexport const updateBlockchain = createAction<{chain: string}>('app/updateBlockchain')\n\nexport const updateAvailableChains = createAction<{ chains: Array<number> }>(\n  'app/updateAvailableChains',\n);\n","import {useCallback} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {getSupportedChains} from '../../config';\nimport {AppDispatch, AppState} from '../index';\n\nimport {updateBlockchain, updateChainId} from './actions';\n\n\nexport function useGetActiveBlockChain(): string {\n\n  const chain = useSelector((state: AppState) => {\n    return state.blockChain.active\n  })\n  return chain\n}\n\n\nexport function useHandleBlokchainChange(): (chain: string) => void{\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chain: string) => {\n      dispatch(\n        updateBlockchain({\n          chain\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n}\n\n/**\n * Returns the active chainId\n */\nexport function useGetActiveChainId(): number {\n  const updateId = useGetUpdateActiveChainId();\n  // const updateIds = useUpdateAvailableChains();\n  const id = useSelector((state: AppState) => {\n    return state.chainId.active;\n  });\n  const avaiableIds = getSupportedChains();\n  if (avaiableIds.includes(id)) {\n    return id;\n  } else {\n    const changedId = avaiableIds[0];\n    // updateIds(avaiableIds);\n    updateId(changedId);\n    return changedId;\n  }\n}\n\n/**\n * Used to update the active chainId\n * @param chainId to update the active chainId\n */\nexport function useGetUpdateActiveChainId(): (chainId: number) => void {\n  const chains = getSupportedChains();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chainId: number) => {\n      if (chains.includes(chainId)) {\n        dispatch(\n          updateChainId({\n            chainId: chainId,\n          }),\n        );\n      } else {\n        console.log(`chainId: ${chainId} is not supported on this app`);\n      }\n    },\n    [chains, dispatch],\n  );\n}\n\n/**\n * Used to update the avaiable Chains\n */\n/*export function useGetAvaiableChains(): Array<number> {\n  return useSelector((state: AppState) => {\n    return state.chains.availableNetworks;\n  });\n}*/\n\n/**\n * Used to add the new chain to the available chains array\n * @param chainId to add it to available chains array\n */\n\n/*export function useAddAvaiableChains(): (chainId: number) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const chains = useSelector((state: AppState) => {\n    return state.chains.availableNetworks;\n  });\n\n  return useCallback(\n    (chainId: number) => {\n      if (chains.includes(chainId)) {\n        console.log(`Trying to add the already present chainId ${chainId}`);\n        return;\n      } else {\n        const updatingChains = chains;\n        updatingChains.push(chainId);\n        dispatch(\n          updateAvailableChains({\n            chains: updatingChains,\n          }),\n        );\n      }\n    },\n    [chains, dispatch],\n  );\n}*/\n\n/*export function useUpdateAvailableChains(): (chainId: number[]) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chainId: number[]) => {\n      dispatch(\n        updateAvailableChains({\n          chains: chainId,\n        }),\n      );\n    },\n    [dispatch],\n  );\n}*/\n","import {useWallet} from 'use-wallet';\nimport React, {createContext, useEffect, useState} from 'react';\nimport { useProvider } from 'wagmi'\nimport { useAccount } from 'wagmi'\n\nimport config from '../../config';\nimport {Protocol} from '../../protocol';\nimport {useGetActiveChainId} from '../../state/chains/hooks';\nimport {useDispatch} from \"react-redux\";\n\nexport interface ProtocolContext {\n  core: Protocol;\n}\n\n// @ts-ignore\nexport const Context = createContext<ProtocolContext>({core: null});\n\ninterface IProps {\n  children: any;\n}\n\nexport const ProtocolProvider = (props: IProps) => {\n  const {children} = props;\n  const chainId = useGetActiveChainId();\n  // const {ethereum} = useWallet();\n  const [core, setCore] = useState<Protocol>();\n  const dispatch = useDispatch();\n  const provider = useProvider()\n  const { address: account } = useAccount()\n\n  // console.log('ethereum', ethereum)\n  useEffect(() => {\n    if (!core && config) {\n      const newCore = new Protocol(config, chainId);\n      if (account) {\n        newCore.unlockWallet(window.ethereum, account);\n      }\n      setCore(newCore);\n    } else if (account && core) {\n      core.unlockWallet(window.ethereum, account);\n    }\n  }, [account, core, dispatch, window.ethereum, chainId]);\n\n  // @ts-ignore\n  return <Context.Provider value={{core}}>{children}</Context.Provider>;\n};\n","/*!\n\n =========================================================\n * Material Dashboard React - v1.8.0 based on Material Dashboard - v1.2.0\n =========================================================\n\n * Product Page: http://www.creative-tim.com/product/material-dashboard-react\n * Copyright 2019 Creative Tim (http://www.creative-tim.com)\n * Licensed under MIT (https://github.com/creativetimofficial/material-dashboard-react/blob/master/LICENSE.md)\n\n =========================================================\n\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n */\n\n// ##############################\n// // // Function that converts from hex color to rgb color\n// // // Example: input = #9c27b0 => output = 156, 39, 176\n// // // Example: input = 9c27b0 => output = 156, 39, 176\n// // // Example: input = #999 => output = 153, 153, 153\n// // // Example: input = 999 => output = 153, 153, 153\n// #############################\nconst hexToRgb = input => {\n  input = input + \"\";\n  input = input.replace(\"#\", \"\");\n  let hexRegex = /[0-9A-Fa-f]/g;\n  if (!hexRegex.test(input) || (input.length !== 3 && input.length !== 6)) {\n    throw new Error(\"input is not a valid hex color.\");\n  }\n  if (input.length === 3) {\n    let first = input[0];\n    let second = input[1];\n    let last = input[2];\n    input = first + first + second + second + last + last;\n  }\n  input = input.toUpperCase(input);\n  let first = input[0] + input[1];\n  let second = input[2] + input[3];\n  let last = input[4] + input[5];\n  return (\n    parseInt(first, 16) +\n    \", \" +\n    parseInt(second, 16) +\n    \", \" +\n    parseInt(last, 16)\n  );\n};\n\n// ##############################\n// // // Variables - Styles that are used on more than one component\n// #############################\n\nconst drawerWidth = 220;\n\nconst transition = {\n  transition: \"all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)\"\n};\n\nconst container = {\n  padding: \"30px 15px\",\n  marginRight: \"auto\",\n  overflow: 'scroll',\n  height: '100%',\n  marginLeft: \"auto\"\n};\n\nconst defaultFont = {\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  fontWeight: \"300\",\n  lineHeight: \"1.5em\"\n};\n\nconst primaryColor = [\"#6c5fc7\", \"#5a4eb2\", \"#3e319b\", \"#af2cc5\"];\nconst warningColor = [\"#ff9800\", \"#ffa726\", \"#fb8c00\", \"#ffa21a\"];\nconst dangerColor = [\"#f44336\", \"#ef5350\", \"#e53935\", \"#f55a4e\"];\nconst successColor = [\"#4caf50\", \"#66bb6a\", \"#43a047\", \"#5cb860\"];\nconst infoColor = [\"#00acc1\", \"#26c6da\", \"#00acc1\", \"#00d3ee\"];\nconst roseColor = [\"#e91e63\", \"#ec407a\", \"#d81b60\", \"#eb3573\"];\nconst grayColor = [\n  \"#999\",\n  \"#777\",\n  \"#3C4858\",\n  \"#AAAAAA\",\n  \"#D2D2D2\",\n  \"#DDD\",\n  \"#b4b4b4\",\n  \"#555555\",\n  \"#333\",\n  \"#a9afbb\",\n  \"#eee\",\n  \"#e7e7e7\"\n];\nconst blackColor = \"#000\";\nconst whiteColor = \"#FFF\";\n\nconst boxShadow = {\n  boxShadow:\n    \"0 10px 30px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 4px 25px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\"\n};\n\nconst primaryBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(primaryColor[0]) +\n    \",.4)\"\n};\nconst infoBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(infoColor[0]) +\n    \",.4)\"\n};\nconst successBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(successColor[0]) +\n    \",.4)\"\n};\nconst warningBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(warningColor[0]) +\n    \",.4)\"\n};\nconst dangerBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(dangerColor[0]) +\n    \",.4)\"\n};\nconst roseBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(roseColor[0]) +\n    \",.4)\"\n};\n\nconst warningCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + warningColor[1] + \", \" + warningColor[2] + \")\",\n  ...warningBoxShadow\n};\nconst successCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + successColor[1] + \", \" + successColor[2] + \")\",\n  ...successBoxShadow\n};\nconst dangerCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + dangerColor[1] + \", \" + dangerColor[2] + \")\",\n  ...dangerBoxShadow\n};\nconst infoCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + infoColor[1] + \", \" + infoColor[2] + \")\",\n  ...infoBoxShadow\n};\nconst primaryCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + primaryColor[1] + \", \" + primaryColor[2] + \")\",\n  ...primaryBoxShadow\n};\nconst roseCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + roseColor[1] + \", \" + roseColor[2] + \")\",\n  ...roseBoxShadow\n};\n\nconst cardActions = {\n  margin: \"0 20px 10px\",\n  paddingTop: \"10px\",\n  borderTop: \"1px solid \" + grayColor[10],\n  height: \"auto\",\n  ...defaultFont\n};\n\nconst cardHeader = {\n  margin: \"-20px 15px 0\",\n  borderRadius: \"3px\",\n  padding: \"15px\"\n};\n\nconst card = {\n  display: \"inline-block\",\n  position: \"relative\",\n  width: \"100%\",\n  margin: \"25px 0\",\n  boxShadow: \"0 1px 4px 0 rgba(\" + hexToRgb(blackColor) + \", 0.14)\",\n  borderRadius: \"3px\",\n  color: \"rgba(\" + hexToRgb(blackColor) + \", 0.87)\",\n  background: whiteColor\n};\n\nconst defaultBoxShadow = {\n  border: \"0\",\n  borderRadius: \"3px\",\n  boxShadow:\n    \"0 10px 20px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 3px 20px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\",\n  padding: \"10px 0\",\n  transition: \"all 150ms ease 0s\"\n};\n\nconst title = {\n  color: grayColor[2],\n  textDecoration: \"none\",\n  fontWeight: \"300\",\n  marginTop: \"30px\",\n  marginBottom: \"25px\",\n  minHeight: \"32px\",\n  fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n  \"& small\": {\n    color: grayColor[1],\n    fontWeight: \"400\",\n    lineHeight: \"1\"\n  }\n};\n\nconst cardTitle = {\n  ...title,\n  marginTop: \"0\",\n  marginBottom: \"3px\",\n  minHeight: \"auto\",\n  \"& a\": {\n    ...title,\n    marginTop: \".625rem\",\n    marginBottom: \"0.75rem\",\n    minHeight: \"auto\"\n  }\n};\n\nconst cardSubtitle = {\n  marginTop: \"-.375rem\"\n};\n\nconst cardLink = {\n  \"& + $cardLink\": {\n    marginLeft: \"1.25rem\"\n  }\n};\n\nexport {\n  hexToRgb,\n  //variables\n  drawerWidth,\n  transition,\n  container,\n  boxShadow,\n  card,\n  defaultFont,\n  primaryColor,\n  warningColor,\n  dangerColor,\n  successColor,\n  infoColor,\n  roseColor,\n  grayColor,\n  blackColor,\n  whiteColor,\n  primaryBoxShadow,\n  infoBoxShadow,\n  successBoxShadow,\n  warningBoxShadow,\n  dangerBoxShadow,\n  roseBoxShadow,\n  warningCardHeader,\n  successCardHeader,\n  dangerCardHeader,\n  infoCardHeader,\n  primaryCardHeader,\n  roseCardHeader,\n  cardActions,\n  cardHeader,\n  defaultBoxShadow,\n  title,\n  cardTitle,\n  cardSubtitle,\n  cardLink\n};\n","import {\n      drawerWidth,\n      transition,\n      container\n    } from \"./material-dashboard-react.js\";\n    \n    const appStyle = theme => ({\n      wrapper: {\n        position: \"relative\",\n        top: \"0\",\n        height: \"100%\"\n      },\n      mainPanel: {\n        [theme.breakpoints.up(\"md\")]: {\n          width: `calc(100% - ${drawerWidth}px)`\n        },\n        overflow: \"auto\",\n        position: \"relative\",\n        float: \"right\",\n        ...transition,\n        height: \"100%\",\n        width: \"100%\",\n        overflowScrolling: \"touch\"\n      },\n      content: {\n        position: 'relative',\n        // marginTop: \"70px\",\n        // padding: \"30px 0\",\n        height: '100%',\n        // minHeight: \"calc(100vh - 123px)\"\n      },\n      container,\n      map: {\n        marginTop: \"70px\"\n      }\n    });\n    \n    export default appStyle;\n    ","import {\n  drawerWidth,\n  transition,\n  defaultFont,\n  whiteColor,\n  grayColor,\n  blackColor,\n  hexToRgb\n} from \"../material-dashboard-react.js\";\n\nconst sidebarStyle = theme => ({\n  drawerPaper: {\n    border: \"none\",\n    position: \"fixed\",\n    top: \"0\",\n    backgroundColor: '#2d004c',\n    bottom: \"0\",\n    left: \"0\",\n    zIndex: \"1\",\n    width: drawerWidth,\n    [theme.breakpoints.up(\"md\")]: {\n      width: drawerWidth,\n      position: \"fixed\",\n      height: \"100%\"\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      width: drawerWidth,\n      position: \"fixed\",\n      display: \"block\",\n      top: \"0\",\n      height: \"100vh\",\n      right: \"0\",\n      left: \"auto\",\n      zIndex: \"1032\",\n      visibility: \"visible\",\n      overflowY: \"visible\",\n      borderTop: \"none\",\n      textAlign: \"left\",\n      paddingRight: \"0px\",\n      paddingLeft: \"0\",\n      transform: `translate3d(${drawerWidth}px, 0, 0)`,\n      ...transition\n    }\n  },\n  logo: {\n    position: \"relative\",\n    padding: \"15px 15px\",\n    zIndex: \"4\",\n    \"&:after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      bottom: \"0\",\n\n      height: \"1px\",\n      right: \"15px\",\n      width: \"calc(100% - 30px)\",\n      backgroundColor: \"rgba(\" + hexToRgb(grayColor[6]) + \", 0.3)\"\n    }\n  },\n  logoLink: {\n    ...defaultFont,\n    padding: \"5px 0\",\n    display: \"block\",\n    fontSize: \"25px\",\n    fontWeight: \"200\",\n    textAlign: 'center',\n    lineHeight: \"30px\",\n    textDecoration: \"none\",\n    backgroundColor: \"transparent\",\n    \"&,&:hover\": {\n      color: whiteColor\n    }\n  },\n  logoLinkRTL: {\n    textAlign: \"right\"\n  },\n  logoImage: {\n    width: \"30px\",\n    display: \"inline-block\",\n    maxHeight: \"30px\",\n    marginLeft: \"10px\",\n    marginRight: \"15px\"\n  },\n  img: {\n    width: \"35px\",\n    top: \"22px\",\n    position: \"absolute\",\n    verticalAlign: \"middle\",\n    border: \"0\"\n  },\n  background: {\n    position: \"absolute\",\n    zIndex: \"1\",\n    height: \"100%\",\n    width: \"100%\",\n    display: \"block\",\n    top: \"0\",\n    left: \"0\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center center\",\n    \"&:after\": {\n      position: \"absolute\",\n      zIndex: \"3\",\n      width: \"100%\",\n      height: \"100%\",\n      content: '\"\"',\n      display: \"block\",\n      background: blackColor,\n      opacity: \".8\"\n    }\n  },\n  list: {\n    marginTop: \"20px\",\n    paddingLeft: \"0\",\n    paddingTop: \"0\",\n    paddingBottom: \"0\",\n    marginBottom: \"0\",\n    listStyle: \"none\",\n    position: \"unset\"\n  },\n  item: {\n    position: \"relative\",\n    display: \"block\",\n    textDecoration: \"none\",\n    color: 'rgb(149, 134, 165)',\n    \"&:hover,&:focus,&:visited,&.active\": {\n      color: '#fff'\n    }\n  },\n  itemLink: {\n    width: \"auto\",\n    transition: \"all 300ms linear\",\n    margin: \"0\",\n    borderRadius: \"3px\",\n    position: \"relative\",\n    display: \"block\",\n    padding: \"10px\",\n    backgroundColor: \"transparent\",\n    ...defaultFont\n  },\n  itemIcon: {\n    width: \"24px\",\n    height: \"30px\",\n    fontSize: \"24px\",\n    lineHeight: \"30px\",\n    float: \"left\",\n    margin: \"0 15px\",\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    // color: 'rgb(149, 134, 165)'\n  },\n  itemText: {\n    ...defaultFont,\n    margin: \"0\",\n    lineHeight: \"30px\",\n    fontWeight: 'bold',\n    fontSize: \"14px\",\n    // color: 'rgb(149, 134, 165)'\n  },\n  sidebarWrapper: {\n    position: \"relative\",\n    height: \"calc(100vh - 75px)\",\n    overflow: \"auto\",\n    width: \"220px\",\n    zIndex: \"4\",\n    overflowScrolling: \"touch\"\n  },\n  fab: {\n    position: 'fixed',\n    bottom: 15,\n    right: 15\n  }\n});\n\nexport default sidebarStyle;\n","import { useContext } from 'react';\n\nimport { Context } from '../context/Provider';\n\nconst useCore = () => {\n  const { core } = useContext(Context);\n  return core;\n};\n\nexport default useCore;\n","import { makeStyles } from \"@material-ui/core/styles\"\nimport { NavLink } from \"react-router-dom\"\nimport classNames from \"classnames\"\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from \"@material-ui/core/Drawer\"\nimport Fab from '@material-ui/core/Fab'\nimport Hidden from \"@material-ui/core/Hidden\"\nimport Icon from \"@material-ui/core/Icon\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport MenuIcon from '@material-ui/icons/Menu'\nimport React from \"react\"\nimport styles from \"../../styles/components/sidebarStyle.js\"\nimport useCore from \"../../hooks/useCore\"\nimport { useGetActiveBlockChain } from \"../../state/chains/hooks\"\n\n\n// @ts-ignore\nconst useStyles = makeStyles(styles)\n\n\nexport default function Sidebar () {\n  const {myAccount, tronWeb} = useCore()\n  const chain = useGetActiveBlockChain()\n  const [state, setState] = React.useState<boolean>(false)\n\n  const toggleDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) return\n    setState(open)\n  }\n\n\n  const classes = useStyles()\n  // verifies if routeName is the one active (in browser input)\n  function activeRoute(routeName: any) {\n    if (!routeName) return false\n    return window.location.href.indexOf(routeName.url) > -1 ? true : false\n  }\n\n  const routes = [\n    {\n      url: '/dashboard/mint',\n      icon: 'construction',\n      name: 'Mint token'\n    },\n    {\n      url: '/dashboard/burn',\n      icon: 'whatshot',\n      name: 'Burn token'\n    },\n    {\n      url: '/dashboard/freeze',\n      icon: 'ac_unit',\n      name: 'Freeze'\n    },\n    {\n      url: '/dashboard/admin',\n      icon: 'supervisor_account',\n      name: 'Admin'\n    },\n    // {\n    //   url: '/statistics',\n    //   icon: 'signal_cellular_alt',\n    //   name: 'Statistics'\n    // },\n  ]\n\n  const links = (\n    <List className={classes.list}>\n      {\n        routes.map(r => {\n          return (\n            <NavLink onClick={() => {\n              // setTimeout(() => {window.location.reload()}, 2000)\n              }}\n              key={r.name} to={\n                chain == \"Nile\" && tronWeb.defaultAddress.hex ? r.url : chain == \"Goerli\" && myAccount ? r.url : \"/dashboard\"\n              } className={({isActive}) => isActive ? `active ${classes.item}` : classes.item}>\n              <ListItem button className={classes.itemLink}>\n                <Icon className={classNames(classes.itemIcon)}>{r.icon}</Icon>\n                <ListItemText primary={r.name} className={classNames(classes.itemText)} disableTypography={true} />\n              </ListItem>\n            </NavLink>\n          )\n        })\n      }\n    </List>\n  )\n\n  var brand = (\n    <div className={classes.logo}>\n      <div className={classNames(classes.logoLink)}>Stablecoin Dashboard</div>\n    </div>\n  )\n\n  return (\n    <div>\n      <Hidden mdUp implementation=\"css\">\n        <Fab\n          size=\"small\"\n          color=\"secondary\" aria-label=\"add\"\n          style={{ outline: 'none', position: 'fixed', bottom: 15, right: 15, zIndex: 100, backgroundColor: \"#3f046d\" }}>\n          <MenuIcon onClick={toggleDrawer(true)} />\n        </Fab>\n\n        <Drawer\n          variant=\"temporary\"\n          open={state}\n          anchor={\"right\"}\n          classes={{ paper: classNames(classes.drawerPaper) }}\n          onClose={toggleDrawer(false)}\n          >\n          {brand}\n          <Divider />\n          <div className={classes.sidebarWrapper}>{links}</div>\n        </Drawer>\n      </Hidden>\n\n      <Hidden smDown implementation=\"css\">\n        <Drawer\n          anchor={\"left\"}\n          variant=\"permanent\"\n          open\n          classes={{ paper: classNames(classes.drawerPaper) }}>\n          {brand}\n          <Divider />\n          <div className={classes.sidebarWrapper}>{links}</div>\n        </Drawer>\n      </Hidden>\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/tronIcon.350f3509.jpeg\";","import React, { useEffect, useState } from 'react'\nimport { Outlet } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useWallet } from \"use-wallet\";\nimport {Button, MenuItem, Snackbar, TextField} from '@material-ui/core'\nimport { useAccount, useSwitchNetwork, useNetwork } from 'wagmi'\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\nimport TronWeb from \"tronweb\"\nimport {useMediaQuery} from \"react-responsive\";\n\nimport styles from '../../styles/adminStyle.js'\nimport Sidebar from './Sidebar';\nimport { noOp } from '../../utils/constants';\nimport { truncateMiddle } from '../../utils/index';\nimport Navigation from '../../navigation';\nimport { useGetActiveBlockChain, useHandleBlokchainChange } from '../../state/chains/hooks';\nimport useCore from '../../hooks/useCore';\nimport tronIcon from \"../../icons/tronIcon.jpeg\"\nimport { addressToHex, fromHex } from '../../utils/helper';\nimport { mainchain } from '../../utils/blockchain';\n\nexport const chains = [\n  {\n    label: 'Goerli',\n    chainID: 'Goerli'\n  },\n  {\n    label: \"Nile\",\n    chainID: 'Nile',\n  }\n]\n\n// @ts-ignore\nconst useStyles = makeStyles(styles);\nfunction Dashbaord() {\n  const classes = useStyles();\n  const {myAccount, tronWeb} = useCore()\n  const isMobile = useMediaQuery({maxWidth: '768px'});\n\n  // const { address: account, isConnecting, isDisconnected, connector } = useAccount()\n  // const { data, error, isLoading, pendingChainId, switchNetwork, status, isSuccess } = useSwitchNetwork()\n  const { chain: chainNetwork  } = useNetwork()\n  // const { isConnected } = useAccount()\n  const [tronObj, setTronObj] = useState<any>()\n  const [tronSnackbar, setTronSnackbar] = useState<boolean>(false)\n  const [tronCurrentAcc, setTronCurrentAcc] = useState<string>(\"\")\n\n  // useEffect(() => {\n  //   checkIfTronConnected()\n  // }, [])\n\n  // const { tronLink } = window;\n  const chain = useGetActiveBlockChain()\n  const setChain = useHandleBlokchainChange()\n\n  console.log('chainNetwork', chainNetwork)\n\n\n  useEffect(() => {\n    if(!myAccount && !window.tronWeb){\n      // window.location.reload()\n    }\n  }, [myAccount, window.tronWeb])\n\n  const loginWithTron = () => {\n    if(window.tronWeb?.ready){\n      // console.log(\"show account\")\n      // setChain(\"Nile\");\n      // document.location.href = \"\"\n    }else{\n      setTronSnackbar(true)\n    }\n  }\n\n  const handleChainChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChain(event.target.value);\n    localStorage.setItem(\"ActiveChain\", event.target.value)\n\n  };\n\n  var obj = setInterval(() => {\n    console.log(\"inside tronweb useeffect\")\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      clearInterval(obj)\n      var tronweb = window.tronWeb\n      setTronObj(tronweb)\n    }\n  }, 3000)\n\n  window.addEventListener('message', function (e){\n    if (e.data.message && e.data.message.action == \"accountsChanged\") {\n      console.log(\"accountsChanged event\", e.data.message)\n      console.log(\"current address:\", e.data.message.data.address)\n      setTronCurrentAcc(e.data.message.data.address)\n    }\n\n  })\n  \n  if(window.location.href.includes(\"login\")) return <div />\n  return (\n \n    <div>\n      <div className={classes.wrapper} style={{padding: isMobile ? '' : '15px 15px 40px 0'}}>\n      {\n        tronSnackbar && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={tronSnackbar}\n            onClose={() => setTronSnackbar(false)}\n            message=\"Please login to TronLink extention wallet first.\"\n          />\n      }\n      {\n        (chainNetwork?.id !== 5 && chain !== \"Nile\") && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={chainNetwork?.id !== 5}\n            onClose={() => setTronSnackbar(false)}\n            message=\"Please switch to a goerli network on Metamask.\"\n        />\n      }\n\n      {/* {\n        (!myAccount) && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={connectMetamask}\n            onClose={() => setConnectMetamask(false)}\n            message=\"Please connect to the Metamask on Goerli network or Tronlink on Nile network\"\n          />\n      } */}\n\n      <div style={{padding: '28px', display: 'flex', justifyContent: 'flex-end'}}>\n        <TextField\n          required\n          id=\"standard-select-currency\"\n          select\n          label=\"Chain\"\n          value={chain}\n          onChange={handleChainChange}\n          // fullWidth\n          variant=\"outlined\"\n          size='small'\n          style={{marginRight: '15px', width: '150px'}}\n        >\n          {chains.map((option) => (\n            <MenuItem alignItems={\"center\"} key={option.chainID} value={option.label}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        {\n          (\n            <div>\n             \n              {chain == 'Nile' ?  \n                <button\n                  className={\"tronlinkBtn\"}\n                  style={{backgroundColor: \"#fff\", color: \"#000\", display: 'flex', justifyContent: \"space-between\", alignItems: \"center\"}}\n                  onClick={loginWithTron}\n                ><div><img src={tronIcon} alt={\"tronIcon\"} style={{width: \"18px\", height: \"18px\", borderRadius: '50%', marginRight: '6px'}} /></div>\n                  {\n                   tronObj ?  \n                    <div> \n                      {\n                        tronCurrentAcc ?\n                        tronCurrentAcc.slice(0, 4) + '...' + tronCurrentAcc.slice(30, 34):\n                        window.tronLink.tronWeb.defaultAddress.base58.slice(0, 4) + '...' + window.tronLink.tronWeb.defaultAddress.base58.slice(30, 34)\n                      }\n                      {/* {window.tronLink.tronWeb.defaultAddress.base58.slice(0, 4) + '...' + window.tronLink.tronWeb.defaultAddress.base58.slice(30, 34)} */}\n                    </div>\n                    \n                    : <div>Tronlink Wallet</div>\n                  }\n                </button>\n                : \n                <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                  <ConnectButton chainStatus={\"none\"} showBalance={false} />\n                </div> \n              }\n            </div>\n          )\n        }\n      </div>\n\n      <Sidebar />\n      <Outlet />\n    </div>\n    </div>\n\n  )\n}\n\nexport default Dashbaord\n","import {createAction} from '@reduxjs/toolkit';\n\nimport {PopupContent} from '../../utils/interface';\n\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>(\n  'app/updateBlockNumber',\n);\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\n\nexport const loaderVisibile = createAction<{isVisible: boolean}>('app/updateLoader')\n","import {useWallet} from 'use-wallet';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useNetwork } from 'wagmi'\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal,loaderVisibile} from './actions';\nimport {AppState} from '../index';\nimport {PopupContent} from '../../utils/interface';\n\nexport function useBlockNumber(): number | undefined {\n  // const {chainId} = useWallet();\n  const { chain} = useNetwork()\n\n  const test = useSelector((state: AppState) => state)\n\n  return useSelector((state: AppState) => state.application.blockNumber[chain?.id ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// Returns a function that allows adding a popup.\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({content, key}));\n\n      // setTimeout(() => {\n      //   window.location.reload()\n      // }, 5000)\n    },\n    [dispatch],\n  );\n}\n\n// Returns a function that allows removing a popup via its key.\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({key}));\n    },\n    [dispatch],\n  );\n}\n\n// Get the list of active popups.\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n\n// Get the loader\nexport function useGetLoader(): boolean {\n  return useSelector((state: AppState) => state.application.isVisible);\n}\n\n\nexport function useUpdateLoader(): (isVisible: boolean) => void {\n  const dispatch = useDispatch();\n  return useCallback((isVisible: boolean) => dispatch((loaderVisibile({isVisible}))), [dispatch]);\n}","const formatErrorMessage = (message: string): string => {\n  message = message.toLowerCase();\n\n  if (message.includes('cannot add to expired lock. withdraw')) return 'Cannot add to an expired lock. You need to Withdraw.';\n  if (message.includes(`withdraw old tokens first`)) return 'Withdraw old tokens first.';\n  if (message.includes('can only lock until time in the future')) return `Can only lock for future unlock time.`;\n  if (message.includes('voting lock can be 4 years max')) return `Voting lock cannot be greater than 4 Years.`;\n  if (message.includes('no existing lock found')) return 'No lock found.';\n  if (message.includes('nothing is locked')) return 'Nothing is locked.';\n  if (message.includes('can only increase lock duration')) return 'Can only increase the lock duration.';\n  if (message.includes('lock expired')) return 'The lock has expired.';\n  if (message.includes(\"the lock didn't expire\")) return 'The lock did not expire.';\n  if (message.includes(\"fallback not initiated\")) return 'Emergency withdraw is not enabled.';\n  if (message.includes(\"amount < left\")) return 'Amount has to be more than the current rewards. Else try after the reward period has finished.';\n  if (message.includes(\"transaction is already confirmed\")) return \"Transaction is already confirmed by you.\";\n  if (message.includes(\"owner does not exist\")) return \"Not owner\";\n\n\n  // Fail safes like overflows etc.;\n  return 'Error Occured, Please try again later.';\n};\n\nexport default formatErrorMessage;\n","import { ethers } from 'ethers';\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { useNetwork } from 'wagmi'\nimport { useAddPopup } from '../../state/application/hooks';\nimport formatErrorMessage from '../../utils/formatErrorMessage';\nimport MultiSig from \"../../protocol/deployments/abi/MultiSig.json\"\n\nimport useCore from \"../useCore\"\nimport { useGetActiveBlockChain } from '../../state/chains/hooks';\n\n// confirmation hooks = required // current confirmation count of a txn\n// is transaction confirmed(true/false) // get addresses who confirmed the transaction\n\nexport const useGetRequiredCount = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n\n    const [response, setResponse] = useState<number>(0)\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${core._activeNetwork || chain?.id}`].MultiSig;\n        const res = await contract.required()\n\n        setResponse(res.toNumber())\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    console.log('useGetRequiredCount err', err)\n                    setResponse(0)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetConfirmationCount = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n\n    const fetchData = async (txnId: number) => {\n        const contract = core.contracts[`${core._activeNetwork || chain?.id}`].MultiSig\n\n        const res = await contract.getConfirmationCount(txnId);\n        let count = res.toNumber();\n        return count\n\n    }\n\n    return fetchData\n}\n\n\nexport const useIsTxnConfirmed = (txnId: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<boolean>(false)\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id || core._activeNetwork}`].MultiSig;\n        const res = await contract.isConfirmed(txnId)\n        setResponse(res)\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse(false)\n                    console.log('useIsTxnConfirmed err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetConfirmaByAddresses = (txnId: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.getConfirmations(txnId)\n        setResponse(res)\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse([])\n                    console.log('useGetConfirmaByAddresses err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\n// get owner hooks\n\nexport const useGetOwners = () => {\n    const core = useCore();\n\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${core._activeNetwork || chain?.id}`].MultiSig;\n        const res = await contract.getOwners()\n        setResponse(res)\n    }, [chain, core._activeNetwork])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    console.log('useGetOwners err', err)\n                    setResponse([])\n                })\n        }\n    }, [fetchData, chain, core._activeNetwork])\n\n    return response\n}\n\n// Transaction count and get all transactions\n\nexport const useGetTransactionCount = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<number>(0)\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}` || core._activeNetwork].MultiSig;\n        const res = await contract.transactionCount()\n        setResponse(res.toNumber())\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse(0)\n                    console.error('useGetTransactionCount err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetTransactions = (count: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<any[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        setResponse([])\n        for (let i = 0; i < count; i++) {\n            const res = await contract.transactions(i)\n            setResponse(prev => [...prev, res])\n        }\n\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse([])\n                    console.log('useGetTransaction err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetSingleTransaction = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n\n\n    const sendRes = async (txId: number) => {\n\n        const contract = core.contracts[`${chain?.id || core._activeNetwork}`].MultiSig\n        const res = await contract.transactions(txId)\n        let executed = res.executed\n\n        return executed\n    }\n\n    return sendRes\n}\n\nexport const useGetTxnFromHash = () => {\n    const core = useCore();\n    const { provider } = core\n\n    // const [test, setTest] = useState<any>()\n    let data, from, blockNumber\n    let toAdrs, val, token, typeOfTxn, timestamp, returnRes\n\n    const sendRes = (hash: string) => {\n\n        const testFn = async () => {\n\n            const res = await provider.getTransaction(hash)\n            data = res.data\n            from = res.from\n            blockNumber = res.blockNumber\n\n            token = data.slice(10, 74)\n            typeOfTxn = data.slice(266, 274)\n            toAdrs = data.slice(274, 338)\n            val = data.slice(338, 402)\n\n            const methodID = data?.slice(0, 10)\n\n            const blockres = await provider.getBlock(blockNumber)\n            timestamp = blockres.timestamp\n\n            returnRes = {\n                methodID,\n                token: `0x${token.slice(24, token.length)}`,\n                typeOfTxn: typeOfTxn == \"40c10f19\" ? \"Mint\" : \"Burn\",\n                toAdrs: `0x${toAdrs.slice(24, toAdrs.length)}`,\n                val: ethers.utils.formatEther(`0x${val}`),\n                from,\n                timestamp\n            }\n\n            return returnRes\n\n        }\n\n        let test = testFn()\n\n        return returnRes\n        // console.log('getTxnFromHash res', ethers.utils.formatEther(`0x${'0000000000000000000000000000000000000000000000008ac7230489e80000'}`))\n\n    }\n\n    return sendRes\n}\n\n\n// Add Owner / Remove Owner / Replace owner / ChangeRequirement\n\n\nexport const useAddOwner = (address: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.addOwner(address)\n\n            const txresult = await res.wait()\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'New owner Added'\n                    }\n                })\n            }\n        } catch (e: any) {\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [address, chain])\n}\n\nexport const useRemoveOwner = (address: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.removeOwner(address)\n\n            const txresult = await res.wait()\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useRemoveOwner error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [address, chain])\n}\n\nexport const useReplaceOwner = (oldAddress: string, newAddress: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.replaceOwner(oldAddress, newAddress)\n\n            const txresult = await res.wait()\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useReplaceOwner error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [oldAddress, newAddress, chain])\n}\n\nexport const useChangeRequirement = (requiredCount: number) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.changeRequirement(requiredCount)\n\n            const txresult = await res.wait()\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useChangeRequirement error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [requiredCount, chain])\n}\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\n\nimport useCore from \"../useCore\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\nconst useGetTronTransactionCount = () => {\n\n  const {tronWeb} = useCore()\n\n  const [response, setResponse] = React.useState<any>()\n  \n  const fetchData = useCallback(async () => {\n    let contract = await tronWeb.contract().at(tronMultiSigContract)\n    const res = await contract.transactionCount().call()\n    console.log(\"useGetTronTransactionCount\", res.toNumber())\n    setResponse(res.toNumber())\n\n  }, []) \n\n  useEffect(() => {\n      fetchData()\n        .catch((err) => {\n          console.error(\"useGetTronTransactionCount\", err)\n          setResponse(0)\n        })\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetTronTransactionCount","\n\nfunction Textfield(props: any) {\n  const {text, color, fontSize, fontWeight,className} = props\n  return (\n    <div \n      className={className}\n      style={{\n            color, fontSize, fontWeight\n      }}>\n      {text}\n    </div>\n  )\n}\n\nexport default Textfield","import {createAction} from '@reduxjs/toolkit';\nimport { BigNumber } from 'ethers';\nimport { DashboardTxnDetails, TransactionDetails } from './reducer';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n  \n}\n\nexport const addTransaction = createAction<{\n  txIndex: number;\n  chainId: number;\n  hash: string;\n  // from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  creation?: TransactionDetails,\n  confirmation?: TransactionDetails,\n  execution?: TransactionDetails,\n  // approval?: { tokenAddress: string; spender: string };\n  // summary?: string;\n  // blockchain?: string;\n\n}>('transactions/addTransaction');\n\nexport const updateTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  blockchain?: string;\n}>('transactions/updateTransaction')\n\n\nexport const clearAllTransactions = createAction<{ chainId: number }>(\n  'transactions/clearAllTransactions',\n);\n\nexport const finalizeTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  // receipt: SerializableTransactionReceipt;\n  txIndex: number;\n  from: string;\n  creation: TransactionDetails,\n  confirmation?: { [txHash: string]: TransactionDetails; },\n  execution?: { [txHash: string]: TransactionDetails; },\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n\n\nexport const saveTxn = createAction<{\n  txIndex: number;\n  hash: string;\n  chainId: number;\n\n}>('transactions/saveTxn')\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport useCore from \"./useCore\";\n\n\nconst useGetConfirmReq = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState('')\n\n  const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.numConfirmationsRequired()\n        setResponse(res.toNumber())\n  }, [chain]) \n\n  useEffect(() => {\n\n    if(core){\n        fetchData()\n            .catch((err) => setResponse(''))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetConfirmReq","import {TransactionResponse} from '@ethersproject/providers';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport { useNetwork, useAccount } from 'wagmi'\nimport { BigNumber } from 'ethers';\n\nimport {useAddPopup} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {addTransaction, clearAllTransactions, updateTransaction} from './actions';\nimport {DashboardTxnDetails, newTxnState, TransactionDetails, TxnData} from './reducer';\nimport {useGetActiveChainId} from \"../chains/hooks\";\nimport useGetConfirmReq from '../../hooks/useGetConfirmReq';\n\n/**\n * Helper that can take a ethers library transaction response and\n * add it to the list of transactions.\n */\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  transDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n  // const {chainId, account} = useWallet();\n\n  const { address: account } = useAccount()\n  const dispatch = useDispatch<AppDispatch>();\n  const addPopup = useAddPopup();\n  const { chain} = useNetwork()\n  let confirmReq = useGetConfirmReq()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n \n  // chainId, creation, confirmation, execution, txDetail, txIndex\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      transDetail: {\n        _numConfirmations: any, \n        _typeOfTx: any, \n        _createdTime: any, \n        _executed: boolean, \n        _value: BigNumber, \n        _token: string, \n        txIndex: any, \n        _executedTime: any, \n        _to: string,\n      },\n      {\n        summary,\n        approval,\n      }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chain) return;\n\n      const {hash} = response;\n      \n      const {_numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = transDetail\n\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n\n      addPopup(\n        {\n          txn: {\n            hash,\n            loading: true,\n            success: false,\n            summary: summary,\n          },\n        },\n        hash,\n      );\n\n      // if(_numConfirmations < confirmReq){\n      //   dispatch(addTransaction({hash, txIndex, chainId, confirmation: {confirmedTime: Date.now(), from: account}, txDetail: {\n      //     _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      //   }}));\n      // }\n \n      dispatch(addTransaction({hash, txIndex, chainId, creation: {confirmedTime: Date.now(), from: account}, confirmation: {confirmedTime: Date.now(), from: account}, txDetail: {\n        _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      }}));\n    },\n    // eslint-disable-next-line\n    [dispatch, chain, account],\n  );\n}\n\nexport function useTransactionUpdater(): (\n  response: TransactionResponse,\n  transDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n   // const {chainId, account} = useWallet();\n   const { chain} = useNetwork()\n   const { address: account } = useAccount()\n   let chainId\n\n   if(chain){\n     chainId = chain.id\n   }\n  const dispatch = useDispatch<AppDispatch>();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      transDetail: {\n        _numConfirmations: any, \n        _typeOfTx: any, \n        _createdTime: any, \n        _executed: boolean, \n        _value: BigNumber, \n        _token: string, \n        txIndex: any, \n        _executedTime: any, \n        _to: string,\n      },\n      {\n        summary,\n        approval,\n      }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chain) return;\n\n      const {hash} = response;\n\n      const {_numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = transDetail\n\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n\n      addPopup(\n        {\n          txn: {\n            hash,\n            loading: true,\n            success: false,\n            summary: summary,\n          },\n        },\n        hash,\n      );\n\n      dispatch(updateTransaction({hash, from: account, chainId, approval, summary, txDetail: {\n        _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      }}));\n    },\n    // eslint-disable-next-line\n    [dispatch, chainId, account],\n  );\n}\n\n// Returns all the transactions for the current chain.\nexport function useAllTransactions() {\n  // const {chainId} = useWallet();\n  const { chain} = useNetwork()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n  \n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n  // return {}\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\n// export function isTransactionRecent(tx: TransactionDetails): boolean {\n//   return new Date().getTime() - tx.addedTime < 86_400_000;\n// }\n\n// Returns whether a token has a pending approval transaction.\nexport function useHasPendingApproval(\n  tokenAddress: string | undefined,\n  spender: string | undefined,\n): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return (\n            approval.spender === spender &&\n            approval.tokenAddress === tokenAddress \n            // &&\n            // isTransactionRecent(tx)\n          );\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  );\n}\n\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\n  const activeChainId = useGetActiveChainId()\n  const dispatch = useDispatch<AppDispatch>();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({chainId: activeChainId})), [\n      activeChainId,\n      dispatch,\n    ]),\n  };\n}\n\n\n","import { BigNumber } from 'ethers';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\n\nexport function getBalance(\n  balance: BigNumber,\n  decimals = 18\n): string {\n  try {\n    return formatUnits(balance, decimals);\n  } catch (err) {\n    return '0';\n  }\n};\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 3\n): string => {\n  try {\n    const formattedBalance: string = getBalance(balance, decimals);\n    const decimalsPointIndex = formattedBalance.indexOf('.');\n    if (decimalsPointIndex === -1) return formattedBalance;\n    return (\n      formattedBalance.slice(0, decimalsPointIndex) +\n      '.' +\n      formattedBalance.slice(decimalsPointIndex + 1, decimalsPointIndex + 1 + fractionDigits)\n    );\n  } catch (error) {\n    return '0';\n  }\n};\n\nexport const formatToBN = (\n  value: number | string,\n  decimals = 18\n): BigNumber => {\n  try {\n    const [beforeDecimals, afterDecimal] = `${value}`.split('.');\n\n    const beforeDecimalsPrecisionText = beforeDecimals?.slice(0, 18) || '0';\n    const afterDecimalsPrecisionText = afterDecimal?.slice(0, decimals) || '0';\n    const fixedPrecisionValue = `${beforeDecimalsPrecisionText}.${afterDecimalsPrecisionText}`;\n\n    return BigNumber.from(parseUnits(`${fixedPrecisionValue}`, decimals));\n  } catch (error) {\n    return BigNumber.from('0');\n  }\n};\n","import {BigNumber, Contract, utils} from 'ethers';\nimport {useCallback, useEffect, useState} from 'react';\nimport { useAccount } from 'wagmi'\n\nimport ABIS from '../protocol/deployments/abi';\nimport {useWallet} from 'use-wallet';\nimport useCore from './useCore';\n\nexport type TokenDetailsState = {\n  isLoading: boolean,\n  value: {\n    symbol: string;\n    decimals: number;\n    balance: BigNumber;\n    totalSupply: BigNumber;\n  }\n}\n\nconst LOADING_DEFAULT_BASIC_STATE = {\n  isLoading: true,\n  value: {\n    symbol: '',\n    decimals: 18,\n    balance: BigNumber.from(0),\n    totalSupply: BigNumber.from(0)\n  }\n}\n\nconst NON_LOADING_DEFAULT_BASIC_STATE = {\n  isLoading: false,\n  value: {\n    symbol: '',\n    decimals: 18,\n    balance: BigNumber.from(0),\n    totalSupply: BigNumber.from(0)\n  }\n}\n\nconst useGetTokenDetails = () => {\n  const [tokenDetails, setTokenDetails] = useState<TokenDetailsState>(LOADING_DEFAULT_BASIC_STATE);\n\n  const core = useCore();\n  const {myAccount: account, provider } = core\n\n  const fetch = async (address: string) => {\n    if (!utils.isAddress(address) || !account) {\n      setTokenDetails(NON_LOADING_DEFAULT_BASIC_STATE);\n      \n    } else {\n\n      const contract = new Contract(address, ABIS.ERC20, core.signer);\n      const symbol = await contract.symbol();\n      const decimals = await contract.decimals();\n      const balance = await contract.balanceOf(account);\n      const totalSupply = await contract.totalSupply()\n\n      setTokenDetails({isLoading: false, value: {symbol, decimals: decimals, balance, totalSupply}});\n      return({isLoading: false, value: {symbol, decimals: decimals, balance, totalSupply}})\n    }\n  }\n\n  return {fetch, tokenDetails};\n};\n\nexport default useGetTokenDetails;\n","import { BigNumber, ethers } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionAdder } from \"../state/transactions/hooks\";\nimport { truncateMiddle } from \"../utils\";\nimport { formatToBN, getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport { AppDispatch, AppState } from \"../state/index\";\nimport useCore from \"./useCore\";\nimport { saveTxn } from \"../state/transactions/actions\";\nimport StablecoinImpl from \"../protocol/deployments/abi/StablecoinImpl.json\";\nimport MultiSig from \"../protocol/deployments/abi/MultiSig.json\";\nimport useGetTokenDetails from \"./useGetTokenDetails\";\nimport { useGetActiveChainId } from \"../state/chains/hooks\";\n\nconst useMultiSig = (\n  typeOfTx: string,\n  to: string,\n  amount: string,\n  destinationAdrs: string\n) => {\n  const core = useCore();\n  const { _activeNetwork } = core;\n  const updateLoader = useUpdateLoader();\n  const activeID = useGetActiveChainId();\n\n\n  const { chain } = useNetwork();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n  const { fetch } = useGetTokenDetails();\n\n  return useCallback(\n    async (onSuccess: () => void, onFailure: () => void): Promise<void> => {\n      try {\n        // typeOfTx // mint, burnFrom, addOwner, removeOwner, replaceOwner, changeRequirement\n\n        let iface;\n        let data;\n\n        if (typeOfTx == \"mint\" || typeOfTx == \"burn\") {\n          iface = new ethers.utils.Interface(StablecoinImpl);\n          data = iface.encodeFunctionData(typeOfTx, [\n            to,\n            ethers.utils.parseEther(amount),\n          ]);\n\n        } else {\n          iface = new ethers.utils.Interface(MultiSig);\n          if (typeOfTx == \"changeRequirement\") {\n            data = iface.encodeFunctionData(typeOfTx, [Number(amount)]);\n          } else {\n            data = iface.encodeFunctionData(typeOfTx, [to]);\n          }\n        }\n\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const response = await contract.submitTransaction(\n          core.contracts[`${chain?.id}`][destinationAdrs].address,\n          formatToBN(0),\n          data\n        );\n        const tx = await response.wait();\n\n        setTimeout(async () => {\n          if (tx?.status === 1) {\n            let txnsCount = await contract.transactionCount();\n            let summary;\n\n            dispatch(\n              saveTxn({\n                txIndex: txnsCount - 1,\n                hash: tx.transactionHash,\n                chainId: chain?.id || _activeNetwork,\n              })\n            );\n\n            if (typeOfTx == \"mint\" || typeOfTx == \"burn\") {\n              let tokenDetails = await fetch(core.contracts[`${chain?.id}`][destinationAdrs].address);\n              summary = `Submitted to ${\n                typeOfTx == \"mint\" ? \"Mint\" : \"Burn\"\n              } ${Number(amount)} ${tokenDetails?.value.symbol}`;\n            }\n\n            if (typeOfTx == \"addOwner\") summary = \"Submitted to add owner\";\n            if (typeOfTx == \"removeOwner\")\n              summary = \"Submitted to remove owner\";\n            if (typeOfTx == \"changeRequirement\")\n              summary = \"Submitted to change requirement\";\n            updateLoader(false);\n            addPopup({\n              txn: {\n                hash: tx.transactionHash,\n                success: true,\n                summary,\n              },\n            });\n          }\n        }, 1000);\n\n        if (tx?.status !== 1) {\n        }\n      } catch (e: any) {\n        console.error(\"useMultiSig error\", e);\n        onFailure();\n        updateLoader(false);\n\n        addPopup({\n          error: {\n            message: formatErrorMessage(e?.data?.message || e?.message),\n            stack: e?.stack,\n          },\n        });\n      }\n    },\n    [core, amount, addTransaction, to, destinationAdrs]\n  );\n};\n\nexport default useMultiSig;\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useNetwork } from 'wagmi'\nimport { addPopup } from \"../state/application/actions\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionUpdater } from \"../state/transactions/hooks\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport useCore from \"./useCore\";\nimport { saveTxn } from \"../state/transactions/actions\";\nimport {AppDispatch, AppState} from \"../state/index\";\nimport { useGetSingleTransaction } from \"./multisig/useMultiSig\";\n \nconst useConfirmTxn = () => {\n  const core = useCore();\n  const { chain} = useNetwork()\n  const updateTransaction = useTransactionUpdater();\n  const addPopup = useAddPopup()\n  const dispatch = useDispatch<AppDispatch>();\n  const updateLoader = useUpdateLoader()\n  const isExecuted = useGetSingleTransaction()\n  const confirmCallback = async (index: number, typeOfTx: string) => {\n      \n    try {\n      const contract = await core.contracts[`${chain?.id}`].MultiSig;\n      const response = await contract.confirmTransaction(index)\n  \n      const tx = await response.wait();\n\n      setTimeout(async() => {\n        if (tx?.status === 1){\n          updateLoader(false)\n          dispatch(saveTxn({txIndex: index, hash: tx.transactionHash, chainId: chain?.id || core._activeNetwork}))\n          let summary\n          let executed = await isExecuted(index)\n          if(executed){\n            summary = `Confirmed and Executed ID ${index}`\n          }else {\n            summary = `Confirmed ID ${index} (Not executed)`\n          }\n\n          addPopup({\n            txn: {\n              hash: tx.transactionHash,\n              success: true,\n              summary\n            }\n          });\n\n        }\n      }, 1000)\n\n    } catch (e: any) {\n      console.log('useConfirmTxn error', e.reason);\n      updateLoader(false)\n\n      addPopup({\n        error: {\n          message: formatErrorMessage(e?.data?.message || e?.message || e?.reason),\n          stack: e?.stack,\n        }\n      });\n    }\n\n  }\n\n  return confirmCallback\n}\n\nexport default useConfirmTxn\n\n","import { BigNumber } from 'ethers';\nimport useCore from '../hooks/useCore';\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nexport const truncateMiddle = function (\n  fullStr: string = '',\n  strLen: number,\n  separator?: string,\n) {\n  if (fullStr.length <= strLen) return fullStr;\n  separator = separator || '...';\n\n  var sepLen = separator.length,\n    charsToShow = strLen - sepLen,\n    frontChars = Math.ceil(charsToShow / 3),\n    backChars = Math.floor(charsToShow / 3);\n\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n\nexport const InputValidation = function (\n  value: string = \" \",\n  balance: BigNumber,\n  collateral: string,\n  toCheckFor: [\"MAX\", \"DECIMALS\"]\n) {\n  let returnObj = {\n    status: \"Success\",\n    restrict: false,\n    msg: \"\",\n  };\n\n  if (toCheckFor.includes(\"MAX\")) {\n    if (Number(value) > Number(balance)) {\n      returnObj = {\n        status: \"Warning\",\n        restrict: true,\n        msg: \"Input cannot be more than your wallet balance\",\n      }\n\n      return returnObj;\n    }\n  }\n};\n\n","import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport {Puff} from \"react-loader-spinner\"\nimport { useUpdateLoader } from '../state/application/hooks';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function ProgressModal({currentLoaderState}) {\n  const [open, setOpen] = React.useState(currentLoaderState);\n  const updateLoader = useUpdateLoader()\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n    updateLoader(false)\n  };\n\n  return (\n    <div>\n      <Dialog  onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={currentLoaderState} fullWidth >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Please wait..! \n        </DialogTitle>\n        <DialogContent dividers>\n          <div style={{display: 'flex', justifyContent: 'space-between'}}>\n            <div>Transaction is in progress.</div> \n            <Puff\n                height=\"30\"\n                width=\"30\"\n                ariaLabel=\"progress-bar-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"progress-bar-wrapper\"\n                radius={1}\n                color={`#444`}\n                visible={true}\n            />\n          </div>\n          \n        </DialogContent>\n        \n      </Dialog>\n    </div>\n  );\n}\n","import _ from \"lodash\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\n\nconst useGetAllTokenDetails = () => {\n  const {tokens, _activeNetwork, contracts} = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState<any>('')\n\n  const fetchData = useCallback(async () => {\n    Object.entries(tokens[chain?.id || _activeNetwork]).forEach(async(item) => {\n        const contract = await contracts[`${chain?.id || _activeNetwork}`][item[0]]\n        const res = await contract.totalSupply()\n                const bal = {\n            totalSupply: getDisplayBalance(res),\n            symbol: item[1].symbol\n        }\n        setResponse(prev => _.uniqWith([...prev, bal], (arrVal, othVal) => arrVal.symbol == othVal.symbol))\n\n    })\n    \n  }, [chain]) \n\n  useEffect(() => {\n    fetchData()\n  }, [tokens, _activeNetwork, chain])\n\n  return response\n\n}\n\nexport default useGetAllTokenDetails","import { BigNumber } from 'ethers';\nimport TronWeb from 'tronweb';\nimport tronConfig from '../tronConfig';\nimport { tronMultiSigContract } from './constants';\n\n\nconst DATA_LEN = 64;\nexport const MAX_UINT256 = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nconst chain = tronConfig.chain;\nconst privateKey = chain.privateKey;\n\nexport const mainchain = new TronWeb({\n  fullHost: chain.fullHost,\n//   privateKey\n});\n\nexport const triggerSmartContract = async (address, functionSelector, options = {}, parameters = []) => {\n    try {\n      const tronweb = window.tronWeb;\n      const transaction = await tronweb.transactionBuilder.triggerSmartContract(\n        address,\n        functionSelector,\n        Object.assign({ feeLimit: 20 * 1e6 }, options),\n        parameters\n      );\n  \n      if (!transaction.result || !transaction.result.result) {\n        throw new Error('Unknown trigger error: ' + JSON.stringify(transaction.transaction));\n      }\n      return transaction;\n    } catch (error) {\n      console.error(\"triggerSmartContract\", error)\n    }\n  };\n\nexport const getTransactionInfo = tx => {\n    const tronWeb = mainchain;\n    console.log(\"mainchain\", mainchain)\n    return new Promise((resolve, reject) => {\n      tronWeb.trx.getConfirmedTransaction(tx, (e, r) => {\n        if (!e) {\n          resolve(r);\n        } else {\n          reject(e);\n        }\n      });\n    });\n  };\n\nexport const multisigContract = async() => {\n  try{\n    const tronweb =  window.tronWeb;\n    const contract = await tronweb.contract().at(tronMultiSigContract)\n      \n    return contract\n  } catch (error){\n    console.error(\"multisigContract\", error)\n  }\n}\n\n","import { BigNumber, ethers } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useAddPopup, useUpdateLoader } from \"../../state/application/hooks\";\nimport { mainchain, multisigContract, triggerSmartContract } from \"../../utils/blockchain\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport { formatToBN, getDisplayBalance } from \"../../utils/formatBalance\";\nimport formatErrorMessage from \"../../utils/formatErrorMessage\";\nimport useCore from \"../useCore\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useSubmit = (typeOfTx: string,\n  to: string,\n  amount: string,\n  destinationAdrs: string) => {\n\n  const {tronWeb} = useCore()\n\n  \n  const addPopup = useAddPopup()\n  const updateLoader = useUpdateLoader();\n  \n  return useCallback(\n    async () => {\n      \n      try {\n        let summary, parameter, functionSelector, data\n\n        if (typeOfTx == \"mint\" || typeOfTx == \"burn\"){\n          parameter = [{type:'address',value: to},{type:'uint256',value: ethers.utils.parseEther(amount)}] \n          summary = `Submitted to ${typeOfTx == \"mint\" ? \"Mint\" : \"Burn\"} ${Number(amount)} token`\n          functionSelector = `${typeOfTx}(address,uint256)`\n        }\n        else {\n          if (typeOfTx == \"changeRequirement\"){\n            parameter = [{type: 'uint256', value: amount}]\n            summary = \"Submitted to change requirement\";\n            functionSelector = `${typeOfTx}(uint256)`\n          }else {\n            parameter = [{type: 'address', value: to}]\n            functionSelector = `${typeOfTx}(address)`\n            if (typeOfTx == \"addOwner\") summary = \"Submitted to add owner\"\n            if (typeOfTx == \"removeOwner\")\n              summary = \"Submitted to remove owner\";\n          }\n        }\n\n        const transaction = await triggerSmartContract(\n          `${destinationAdrs}`,\n          functionSelector,\n          Object.assign({ feeLimit: 20 * 1e6 }, {}),\n          parameter\n        );\n\n        data = `0x${transaction.transaction.raw_data.contract[0].parameter.value.data}`\n\n        let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n        const response = await contract.submitTransaction(destinationAdrs,\n          formatToBN(0),\n          data).send()\n\n        let txnInfo = await mainchain.trx.getTransaction(response);\n        updateLoader(false);\n\n        if(txnInfo.ret[0].contractRet == \"SUCCESS\"){\n          addPopup({\n            txn: {\n              hash: response,\n              success: true,\n              summary\n            }\n          });\n        }\n      } catch (e: any) {\n        console.log('useSubmit error', e);\n        updateLoader(false);\n\n        addPopup({\n          error: {\n            message: e,\n            stack: e,\n          },\n        });\n      }\n    },\n    [amount, to, typeOfTx],\n  );\n}\n\nexport default useSubmit\n\n","import {useCallback, useEffect, useState} from \"react\"\nimport { mainchain, multisigContract } from \"../../utils/blockchain\"\nimport { tronMultiSigContract } from \"../../utils/constants\"\nimport useCore from \"../useCore\"\n\n\nexport const useTronGetIsExecuted = () => {\n    const {tronWeb} = useCore()\n\n    const setTronIsExecuted = async (txId: number) => {\n       try {\n        let instance = await tronWeb.contract().at(`${tronMultiSigContract}`)\n        // console.log(\"useTronGetIsExecuted txId\", txId, instance)\n\n        let res = await instance.transactions(txId).call()\n        res = res.executed\n\n        return res\n       } catch (error) {\n            console.error(\"useTronGetIsExecuted\", error)\n       }\n\n    }\n\n\n    return setTronIsExecuted\n\n}\n\nexport const useGetTronConfirmationCount = () => {\n    const {tronWeb} = useCore()\n\n    const fetchData = async (txnId: number) => {\n        let contract = await tronWeb.contract().at(tronMultiSigContract)\n\n        const res = await contract.getConfirmationCount(txnId).call();\n\n        console.log(\"useGetTronConfirmationCount res\", res)\n        let count = res.count.toNumber();\n\n        return count\n\n    }\n\n    return fetchData\n}\n// Not using\nexport const useGetTronTokenDetails = () => {\n    \n    const {tronWeb} = useCore()\n    const fetchData = async (token: string) => {\n        // const tronweb = window.tronWeb\n        let contract = await tronWeb.contract().at(`${token}`)\n        console.log(\"useGetTronTokenDetails contract\", contract)\n        const symbol = await contract.symbol().call();\n        const decimals = await contract.decimals().call();\n        const name = await contract.name().call();\n\n        let details = {\n            symbol,\n            decimals,\n            name\n        };\n\n        return details\n\n    }\n\n    return fetchData\n}\n\nexport const useTronGetRequiredCount = () => {\n    const {tronWeb} = useCore()\n\n    const [response, setResponse] = useState<number>(0)\n\n    const fetchData = useCallback(async () => {\n        let contract = await tronWeb.contract().at(tronMultiSigContract)\n\n        const res = await contract.required().call()\n        setResponse(res.toNumber())\n\n        return res\n\n    }, [])\n\n    useEffect(() => {\n        fetchData()\n            .catch((err) => {\n                console.log('useGetRequiredCount err', err)\n                setResponse(0)\n            })\n    }, [fetchData])\n\n    return response\n}","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useAddPopup } from \"../../state/application/hooks\";\nimport { mainchain, multisigContract } from \"../../utils/blockchain\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport useCore from \"../useCore\";\nimport { useTronGetIsExecuted } from \"./useTronMultisig\";\n\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useConfirm = () => {\n  const {tronWeb} = useCore()\n  const addPopup = useAddPopup()\n  const setTronIsExecuted = useTronGetIsExecuted()\n  const confirmCallback = async (index: number) => {\n\n    console.log(\"useConfirm\", index)\n      \n    try {\n\n        let contract = await window.tronWeb.contract().at(tronMultiSigContract)\n        const response = await contract.confirmTransaction(index).send()\n        let txnInfo = await mainchain.trx.getTransaction(response);\n        let summary\n        \n\n\n        if(txnInfo.ret[0].contractRet == \"SUCCESS\"){\n          let executed = await setTronIsExecuted(index)\n\n          console.log(\"useConfirm executed\", executed)\n          if(executed){\n            summary = `Confirmed and Executed ID ${index}`\n          }else {\n            summary = `Confirmed ID ${index} (Not executed)`\n          }\n          addPopup({\n            txn: {\n              hash: response,\n              success: true,\n              summary\n            }\n          });\n        }else{\n          addPopup({\n            error: {\n              message: \"Transaction failed\",\n              stack: \"\",\n            },\n          });\n        }\n        console.log('useConfirmcontract', response, index)\n\n    } catch (e: any) {\n        console.log('useConfirm error', e);\n        addPopup({\n          error: {\n            message: e,\n            stack: e,\n          },\n        });\n    }\n  }\n\n  return confirmCallback\n}\n\nexport default useConfirm\n\n","import _, { set } from \"lodash\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\nimport { useGetActiveBlockChain } from \"../../state/chains/hooks\";\nimport { tronMultiSigContract, tronStableCoins } from \"../../utils/constants\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport useCore from \"../useCore\";\n\nconst useTronTokensTotalSupply = () => {\n  const {tronWeb} = useCore()\n  const chain = useGetActiveBlockChain()\n\n  const [response, setResponse] = React.useState<any>([])\n \n  const fetchData = () => {\n\n   tronStableCoins.forEach(async(item) => {\n    const contract = await tronWeb.contract().at(item.contractAdrs)\n    const res = await contract.totalSupply().call()\n    setResponse(prev => _.uniqWith([...prev, {totalSupply: getDisplayBalance(res), symbol: item.symbol}], (arrVal, othVal) => arrVal.symbol == othVal.symbol))\n\n})\n\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [chain])\n\n  return response\n\n}\n\nexport default useTronTokensTotalSupply","import _ from \"lodash\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport useCore from \"../useCore\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\nconst useGetTronOwners = () => {\n  const {tronWeb} = useCore()\n  \n  const [response, setResponse] = React.useState<any>([])\n\n  const fetchOwners = useCallback(async () => {\n\n    let contract = await tronWeb.contract().at(tronMultiSigContract)\n    \n    const res = await contract.getOwners().call()\n    \n    res.map(async(owner) => {\n      let txnRes = tronWeb.address.fromHex(`${owner}`);\n      setResponse(prev => _.uniqWith([...prev, txnRes], (arrVal, othVal) => arrVal == othVal))\n    })\n\n  }, []) \n\n  useEffect(() => {\n    fetchOwners()\n      .catch((err) => setResponse([]))\n  }, [fetchOwners])\n\n  return response\n\n}\n\nexport default useGetTronOwners","import { useEffect, useState } from 'react'\nimport { Button, Card, CardContent, Grid, TextField } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useNetwork } from \"wagmi\"\nimport {useMediaQuery} from \"react-responsive\";\n\nimport Textfield from '../../../components/Textfield'\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks'\nimport { useAddOwner, useRemoveOwner, useChangeRequirement, useGetConfirmationCount, useGetSingleTransaction, useGetRequiredCount, useGetOwners } from '../../../hooks/multisig/useMultiSig'\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction'\nimport useCore from '../../../hooks/useCore';\nimport { ethers } from 'ethers';\nimport _ from 'lodash';\nimport useConfirmTxn from '../../../hooks/useConfirmTxn';\nimport { truncateMiddle } from '../../../utils';\nimport { PersonalVideo } from '@material-ui/icons';\nimport ProgressModal from '../../../components/ProgressModal';\nimport useGetTokenDetails from '../../../hooks/useGetTokenDetails';\nimport useGetAllTokenDetails from '../../../hooks/useGetAllTokenDetails';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport { useGetActiveBlockChain, useGetActiveChainId } from '../../../state/chains/hooks';\nimport useConfirm from '../../../hooks/tron/useConfirm';\nimport { tronMultiSigContract } from '../../../utils/constants';\nimport useGetTronTokenDetails from '../../../hooks/tron/useTronTokensTotalSupply';\nimport useGetTronOwners from '../../../hooks/tron/useGetTronOwners';\nimport { useGetTronConfirmationCount, useTronGetIsExecuted, useTronGetRequiredCount } from '../../../hooks/tron/useTronMultisig';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction createData(id: number, details: any, outOfCount: string, status: string, action: string, hash: string[]) {\n  return { id, details, outOfCount, status, action, hash };\n}\n\nfunction Admin({ ethTxns, tronTxns }) {\n  const isMobile = useMediaQuery({maxWidth: '768px'});\n  const { provider, tokens, _activeNetwork, contracts, config, tronWeb } = useCore()\n  const classes = useStyles();\n  const { chain: chainName } = useNetwork()\n\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  let contractOwners: any = useGetOwners()\n  const chain = useGetActiveBlockChain()\n\n  const [adddressToAdd, setAddressToAdd] = useState<string>('')\n  const [adddressRemove, setAddressToRemove] = useState<string>('')\n  const [noOfConfirmations, setNoOfConfirmations] = useState<string>(\"\")\n  const [finalData, setFinalData] = useState<any[]>([])\n  const [finalEthTxns, setFinalEthTxns] = useState<any>([])\n  const [finalTronTxns, setFinalTronTxns] = useState<any>([])\n\n  // Ethereum blockchain\n  const addOwnerAction = useSubmitTransaction(\"addOwner\", adddressToAdd, '0', \"MultiSig\")\n  const removeOwnerAction = useSubmitTransaction(\"removeOwner\", adddressRemove, '0', \"MultiSig\")\n  const noConfirmAction = useSubmitTransaction(\"changeRequirement\", \"\", noOfConfirmations, \"MultiSig\")\n  const setConfirmationCount = useGetConfirmationCount()\n  const setIsExecuted = useGetSingleTransaction()\n  let confirmReq = useGetRequiredCount()\n  const confirmTxnAction = useConfirmTxn()\n  const { fetch } = useGetTokenDetails();\n  const allTokensTotalSupply = useGetAllTokenDetails()\n  const chaindId = useGetActiveChainId()\n  \n  // Tron blockchain\n  const addTronOwnerAction = useSubmit(\"addOwner\", adddressToAdd, '0', tronMultiSigContract)\n  const removeTronOwnerAction = useSubmit(\"removeOwner\", adddressRemove, '0', tronMultiSigContract)\n  const noConfirmActionTron = useSubmit(\"changeRequirement\", \"\", noOfConfirmations, tronMultiSigContract)\n  const confirmTronTxnAction = useConfirm()\n  const allTronTokensTotalSupply = useGetTronTokenDetails()\n  const tronContractOwners = useGetTronOwners()\n  const confirmTronRequired = useTronGetRequiredCount()\n  const numOfConfirmationCountTron = useGetTronConfirmationCount()\n  const isTronExecuted = useTronGetIsExecuted()\n\n  let etherscanUrl = config[_activeNetwork].etherscanUrl\n  console.log(\"Inside admin\", tronTxns)\n  useEffect(() => {\n    sortTransactions()\n  }, [ethTxns, tronTxns, chain])\n\n  const handleAddOwner = () => {\n    if(chain == \"Nile\"){\n      addTronOwnerAction()\n    }else {\n      addOwnerAction(() => { }, () => { })\n    }\n    updateLoader(true)\n  }\n\n  const handleRemoveOwner = () => {\n    if(chain == \"Nile\"){\n      removeTronOwnerAction()\n    }else {\n      removeOwnerAction(() => { }, () => { })\n    }\n    updateLoader(true)\n  }\n\n  const handleChangeConfirmation = () => {\n    if(chain == \"Nile\"){\n      noConfirmActionTron()\n    }else{\n      noConfirmAction(() => { }, () => { })\n    }\n    updateLoader(true)\n  }\n\n  const handleConfirm = (id: number, typeOfTxn: string) => {\n    if(chain == \"Nile\"){\n      confirmTronTxnAction(id)\n    }else{\n      confirmTxnAction(id, typeOfTxn)\n    }\n    updateLoader(true)\n\n  }\n\n  const handleExecute = () => {}\n\n  const sortTransactions = () => {\n\n    const mutlisigAddr = contracts[chaindId].MultiSig.address.replace('0x', '').toLowerCase()\n\n    let arr1: any[] = []\n    let arr2: any[] = []\n\n    ethTxns?.map((item: any, i: number) =>  {\n      if (item.submitResponse.input.toLowerCase().includes(mutlisigAddr)) {\n        arr1.push(item)\n      }\n    })\n\n\n    let token, value, symbol, toAdrs, typeOfTxn, typeOfTxnID\n\n\n    arr1?.map(async(item: any, i: number) => {\n      const executed = await setIsExecuted(Number(item.index))\n      let numConfirmations = await setConfirmationCount(Number(item.index))\n\n      token = item.submitResponse.input.slice(10, 74)\n      token =  `0x${token.slice(24, token.length)}`\n      toAdrs = item.submitResponse.input.slice(274, 338)\n      toAdrs = `0x${toAdrs.slice(24, toAdrs.length)}`\n      typeOfTxnID = item.submitResponse.input.slice(266, 274)\n\n      if (typeOfTxnID == \"ba51a6df\") value = item.submitResponse.input.slice(337, 338)\n      else {\n        value = \"0\"\n      }\n      if(typeOfTxnID == \"173825d9\") typeOfTxn = \"removeOwner\"\n      if(typeOfTxnID == \"7065cb48\") typeOfTxn = \"addOwner\"\n      if(typeOfTxnID == \"ba51a6df\") typeOfTxn = \"changeRequirement\"\n      arr2.push({...item, token, value, toAdrs, typeOfTxn, executed, numConfirmations})\n\n      setFinalEthTxns(arr2)\n          \n    }) \n    \n    let tronArr1: any[] = []\n    tronTxns?.map((item: any, i: number) =>  {\n      if (item.submitResponse.input.toLowerCase().includes(tronWeb.address.toHex(tronMultiSigContract).toLowerCase().slice(2, tronWeb.address.toHex(tronMultiSigContract).length))) {\n        tronArr1.push(item)\n\n      }\n    })\n\n    let tronArr2: any[] = []\n\n    tronArr1?.forEach(async(item: any, i: number) => {\n      const executed = await isTronExecuted(Number(item.index))\n      let numConfirmations = await numOfConfirmationCountTron(item.index)\n      token = item.submitResponse.input.slice(8, 72)\n      token =  tronWeb.address.fromHex(`41${token.slice(24, token.length)}`)\n      toAdrs = item.submitResponse.input.slice(272, 336)\n      toAdrs = tronWeb.address.fromHex(`41${toAdrs.slice(24, toAdrs.length)}`)\n      typeOfTxnID = item.submitResponse.input.slice(264, 272)\n\n      if (typeOfTxnID == \"ba51a6df\") value = item.submitResponse.input.slice(336, 337)\n      else {\n        value = \"0\"\n      }\n      if(typeOfTxnID == \"173825d9\") typeOfTxn = \"removeOwner\"\n      if(typeOfTxnID == \"7065cb48\") typeOfTxn = \"addOwner\"\n      if(typeOfTxnID == \"ba51a6df\") typeOfTxn = \"changeRequirement\"\n      tronArr2.push({...item, token, value, toAdrs, typeOfTxn, executed, numConfirmations})\n\n      setFinalTronTxns(prev => [...prev, {...item, token, value, toAdrs, typeOfTxn, executed, numConfirmations}])\n    })\n   \n  }\n\n  const disableChangeConfirmCount = noOfConfirmations && noOfConfirmations < tronContractOwners.length && noOfConfirmations != \"0\"\n  const disableAddOwner = chain == \"Goerli\" ? ethers.utils.isAddress(adddressToAdd) : tronWeb.isAddress(adddressToAdd)\n  const disableRemoveOwner = chain == \"Goerli\" ? ethers.utils.isAddress(adddressRemove) : tronWeb.isAddress(adddressRemove)\n  console.log(\"finalEthTxns\", finalEthTxns, finalTronTxns)\n  \n  // return (<div></div>)\n  return (\n    <div style={{ marginLeft: isMobile ? \"20px\" : '260px', marginRight: '20px', position: 'relative', paddingTop: '50px' }}>\n      <ProgressModal currentLoaderState={currentLoaderState} />\n\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Textfield\n                text={'Total Supply'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid item xs={2}>\n                {\n                  chain == \"Goerli\" ? allTokensTotalSupply && allTokensTotalSupply?.map((item, i) => (\n                    <div className={\"row-spacebetween-center\"} key={i}>\n                      <Textfield\n                        text={item.symbol + \":\"}\n                        fontSize={'15px'}\n                        fontWeight={'500'}\n                        className={'m-b-15'}\n                      />\n                      <Textfield\n                        text={item.totalSupply}\n                        fontSize={'15px'}\n                        fontWeight={'bold'}\n                        className={'m-b-15'}\n                      />\n                    </div>\n                  )) :\n\n                  allTronTokensTotalSupply && allTronTokensTotalSupply?.map((item, i) => (\n                    <div className={\"row-spacebetween-center\"} key={i}>\n                        <Textfield\n                          text={item.symbol + \":\"}\n                          fontSize={'15px'}\n                          fontWeight={'500'}\n                          className={'m-b-15'}\n                        />\n                        <Textfield\n                          text={item.totalSupply}\n                          fontSize={'15px'}\n                          fontWeight={'bold'}\n                          className={'m-b-15'}\n                        />\n                      </div>\n                  ))\n                }\n                \n\n              </Grid>\n\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card style={{ marginBottom: '30px' }}>\n\n            <CardContent>\n              <Textfield\n                text={'Add an owner'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText=\"Enter the valid address you want to add as an owner\"\n                    required\n                    label=\"Address\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setAddressToAdd(e.target.value)}\n                    value={adddressToAdd}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleAddOwner}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    disabled={!disableAddOwner}\n                    style={{ position: 'relative' }}>Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card style={{ marginBottom: '30px' }}>\n            <CardContent>\n              <Textfield\n                text={'Remove an owner'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText=\"Enter the valid address you want to remove as an owner\"\n                    required\n                    label=\"Address\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setAddressToRemove(e.target.value)}\n                    value={adddressRemove}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleRemoveOwner}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    disabled={!disableRemoveOwner}\n                    style={{ position: 'relative' }}>Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card style={{ marginBottom: '30px' }}>\n            <CardContent>\n              <Textfield\n                text={'Change the number of confirmations'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText={`Enter the count that needs to be updated. Current count: ${chain == \"Goerli\" ? confirmReq : confirmTronRequired}`}\n                    required\n                    label=\"Confirmation count\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setNoOfConfirmations(e.target.value)}\n                    value={noOfConfirmations}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleChangeConfirmation}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    disabled={!disableChangeConfirmCount}\n                    style={{ position: 'relative' }}>Change\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card style={{ marginBottom: '30px', maxHeight: '200px', height: '200px' }} className={\"scrollable\"}>\n            <CardContent>\n              <Textfield\n                text={'Current Owners list'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <div className={\"scrollable\"}>\n                {\n                  chain == \"Goerli\" ?\n                  contractOwners.map((owner, i) =>\n                    <Textfield\n                      key={i}\n                      text={`${i + 1}. ${owner}`}\n                      fontSize={'13px'}\n                      // fontWeight={'bold'}\n                      className={'m-b-15'}\n                    />\n                  ) :\n\n                  tronContractOwners.map((owner, i) =>\n                    <Textfield\n                      key={i}\n                      text={`${i + 1}. ${owner}`}\n                      fontSize={'13px'}\n                      // fontWeight={'bold'}\n                      className={'m-b-15'}\n                    />\n                  )\n\n                  \n                }\n              </div>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <TableContainer>\n              <Table className={classes.table} aria-label=\"simple table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>ID</TableCell>\n                      <TableCell>Details</TableCell>\n                      <TableCell align=\"right\">Confirmation Count</TableCell>\n                      <TableCell align=\"right\">Status</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {_.uniqWith(chain == \"Goerli\" ? finalEthTxns : finalTronTxns, (arrVal: any, othVal: any) => arrVal.index == othVal.index).sort((a, b) => b.index - a.index)?.map((row) => {\n                      const {confirmData, executed, index, numConfirmations, submitResponse, toAdrs, token, typeOfTxn, value} = row\n                      let confirmCount = chain == \"Goerli\" ? confirmReq : confirmTronRequired\n                      let action = executed ? \"\" : numConfirmations <  confirmCount ? \"Confirm\" : \"\"\n                      let confirmHash = confirmData ? confirmData?.map((item) => item.hash) : []\n                      let hash = [submitResponse.hash].concat(confirmHash)\n                      let details = `Transaction (${typeOfTxn} to ${typeOfTxn == \"changeRequirement\" ? value : toAdrs}) is Submitted by ${truncateMiddle(submitResponse.from, 12, \"...\")}.` +\n                      `${numConfirmations > 1 ? `Confirmed by ${truncateMiddle(submitResponse.from, 12, \"...\")} ${confirmData?.map((data) => \"and \" + truncateMiddle(data.from, 12, \"...\"))}` : \"\"} ${executed && !!confirmData?.length ? `Excuted by ${truncateMiddle(confirmData[confirmData?.length - 1].from, 12, \"...\")}.` : \"\"}`\n                      return(\n                        <TableRow key={index}>\n                          <TableCell>{index}</TableCell>\n                          <TableCell component=\"th\" scope=\"row\">\n                            {details}\n                            {\n                              action.length ?\n                                <div style={{ margin: '15px 0 15px 0' }}>\n                                  <Button onClick={() => {\n                                    if (action == \"Confirm\") handleConfirm(index, typeOfTxn)\n                                    else handleExecute()\n                                  }}>{action}</Button>\n                                </div>\n                                :\n                                <div />\n                            }\n                            Click on the links for more details. &nbsp;&nbsp;\n                            {\n                              hash.map((singleHash, i) =>\n                                <span key={i}><a target=\"_blank\" href={chain == \"Goerli\" ? `${etherscanUrl}/tx/${singleHash}` : `https://nile.tronscan.org/#/transaction/${singleHash}`} rel=\"noreferrer\"> {truncateMiddle(singleHash, 22, \"...\")}</a>\n                                  &nbsp;&nbsp;</span>\n                              )\n                            }\n                          </TableCell>\n                          <TableCell align=\"right\"> { executed ? `Fullfilled` : `${numConfirmations} out of ${chain == \"Goerli\" ? confirmReq : confirmTronRequired}` } </TableCell>\n                          <TableCell align=\"right\">{ executed ? \"Success\" : numConfirmations < confirmCount ? 'Needs Confirmation' : 'Needs Execution' }</TableCell>\n                        </TableRow>\n                      )\n                    }\n                    \n                    )}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Admin\n","import {useState, useEffect} from 'react'\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport { makeStyles, Typography, createStyles, Theme } from '@material-ui/core';\nimport _moment from \"moment\"\nimport {useNetwork} from \"wagmi\"\n\nimport { truncateMiddle } from '../utils';\nimport useCore from '../hooks/useCore';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n      marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n      padding: theme.spacing(3),\n    },\n  }),\n);\n\nfunction getSteps() {\n      return ['Creation', 'Confirmations', 'Execution'];\n}\n\nconst getDate = (val: number) => {\n      let timestamp\n      if(val.toString().length > 10){\n            timestamp = val/1000\n      }else {\n            timestamp = val\n      }\n      let date = _moment.unix(timestamp).utc().format(\"MMM Do YYYY h:mm:ss a\");\n      if(timestamp == 0) return 'N/A'\n      return `${date}`\n}\n\nconst timeAgo = (val: number) => {\n      let timestamp\n      if(val.toString().length > 10){\n            timestamp = val/1000\n      }else {\n            timestamp = val \n      }\n      let date = _moment.unix(timestamp).fromNow();\n      return date\n}\n\nfunction getStepContent(step: number, stepData: any, core: any, chainName, chain) {\n\n      const {submitHash, submitFrom, submitTime, executed ,numConfirmations, confirmData} = stepData;\n      \n      const {config, _activeNetwork} = core\n\n      let etherscanUrl = config[chainName?.id || _activeNetwork].etherscanUrl\n\n      switch (step) {\n        case 0:\n          return (\n            <div style={{padding: '10px 0'}}>\n                  Created by&nbsp;\n                  <a \n                        target=\"_blank\"\n                        href={chain == \"Goerli\" ? `${etherscanUrl}/tx/${submitHash}` : `https://nile.tronscan.org/#/transaction/${submitHash}`}>\n                              {truncateMiddle(submitFrom, 12, \"...\")}\n                  </a>&nbsp;\n                   on {getDate(submitTime)}&nbsp;+UTC\n            </div>\n          );\n        case 1:\n            if( numConfirmations > 0 ) return (\n                  <div style={{padding: '10px 0'}}>\n                        Confirmed by&nbsp;\n                        <a \n                              target=\"_blank\"\n                              href={chain == \"Goerli\" ? `${etherscanUrl}/tx/${submitHash}` : `https://nile.tronscan.org/#/transaction/${submitHash}`}>\n                                    {truncateMiddle(submitFrom, 12, \"...\")}\n                        </a>&nbsp; and&nbsp;\n                        {\n                              confirmData?.map((data, i) => \n                                    <span key={i}><a key={i} target=\"_blank\" href={chain == \"Goerli\" ?  `${etherscanUrl}/tx/${data.hash}` : `https://nile.tronscan.org/#/transaction/${data.hash}`}>{truncateMiddle(data.from, 12, \"...\")}</a></span>\n                              )\n                        }\n                        &nbsp;on {getDate(submitTime)}&nbsp;+UTC \n                        {\n                              confirmData && <div>and&nbsp; \n                              {\n                                    confirmData?.map((data) => getDate(data.timeStamp))\n                              }&nbsp;+UTC&nbsp;respectively.</div>\n                        }\n                        \n                        \n                  </div>\n            )\n          return <div />\n        case 2:\n          return (\n            <div style={{padding: '10px 0'}}>\n                  {\n                        (executed && confirmData) && \n                        <div>\n                              Executed by&nbsp; \n                              <a \n                                    target=\"_blank\" \n                                    href={chain == \"Goerli\" ? `${etherscanUrl}/tx/${confirmData[confirmData?.length - 1].hash}` : `https://nile.tronscan.org/#/transaction/${confirmData[confirmData?.length - 1].hash}`}>\n                                          {truncateMiddle(confirmData[confirmData?.length - 1].from, 12, \"...\")} \n                              </a>&nbsp;\n                              on {getDate(confirmData[confirmData?.length - 1].timeStamp)}&nbsp;+UTC\n                        </div>\n                  }\n                 \n            </div>\n          );\n        default:\n          return 'Unknown step';\n      }\n\n}\n\n\nfunction Steps(props: any) {\n      const classes = useStyles();\n      const core = useCore()\n      const { chain: chainName} = useNetwork()\n\n      const {stepState, activeStep,  chain, stepData} = props\n      const [stepLabelColor, setStepLabelColor] = useState('#999');\n      \n      const steps = getSteps();\n\n      useEffect(() => {\n            if(stepState == 'successful') setStepLabelColor('#369e94')\n            if(stepState == 'inProgress') setStepLabelColor('#ed7117')\n\n      }, [stepState])\n\n  return (\n      <div className={classes.root}>\n            <Stepper activeStep={activeStep} orientation=\"vertical\">\n                  {\n                        steps.map((step: any, i: number) => (\n                              <Step active={true} key={step}>\n                                    <StepLabel style={{color: 'green'}}>{step}</StepLabel>\n                                    <StepContent style={{paddingLeft: '20px'}}>\n                                          <div>\n                                                {\n                                                      getStepContent(i, stepData, core, chainName, chain)\n                                                }\n                                          </div>\n                                    </StepContent>\n                              </Step>\n                        ))\n                  }\n            </Stepper>\n      </div>\n      \n  )\n}\n\nexport default Steps","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionUpdater } from \"../state/transactions/hooks\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport useCore from \"./useCore\";\nimport {AppDispatch, AppState} from \"../state/index\";\nimport { saveTxn } from \"../state/transactions/actions\";\n\nconst useExecuteTxn = () => {\n  const core = useCore();\n  const { chain} = useNetwork()\n  const updateTransaction = useTransactionUpdater();\n  const addPopup = useAddPopup()\n  const dispatch = useDispatch<AppDispatch>();\n  const updateLoader = useUpdateLoader()\n\n  const executeCallback = async (index: number, typeOfTx: string) => {\n      \n    try {\n      const contract = await core.contracts[`${chain?.id}`].MultiSig;\n      const response = await contract.executeTransaction(index)\n      const tx = await response.wait();\n\n    setTimeout(async() => {\n      if (tx?.status === 1){\n        updateLoader(false)\n        dispatch(saveTxn({txIndex: index, hash: tx.transactionHash, chainId: chain?.id || core._activeNetwork}))\n        let summary = `Executed ID ${index}`\n\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary\n          }\n        });\n       \n      }\n    }, 1000)\n\n    } catch (e: any) {\n      console.log('useExecuteTxn error', e);\n      updateLoader(false)\n\n      addPopup({\n        error: {\n          message: formatErrorMessage(e?.data?.message || e?.message),\n          stack: e?.stack,\n        }\n      });\n    }\n  }\n\n  return executeCallback\n}\n\nexport default useExecuteTxn\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useAddPopup } from \"../../state/application/hooks\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport useCore from \"../useCore\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useExecute = () => {\n  const {tronWeb} = useCore()\n\n    const addPopup = useAddPopup()\n\n    const confirmCallback = async (index: number) => {\n      \n        try {\n            let contract = await tronWeb.contract().at(tronMultiSigContract)\n    \n            const response = await contract.executeTransaction(index).send()    \n        } catch (e: any) {\n            console.log('useExecute error', e);\n            addPopup({\n                error: {\n                  message: \"Transaction failed\",\n                  stack: e?.stack,\n                },\n              });\n        }\n      }\n    \n      return confirmCallback\n}\n\nexport default useExecute\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { tronMultiSigContract } from \"../../utils/constants\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport useCore from \"../useCore\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useNoOfConfimReq = () => {\n    const {tronWeb} = useCore()\n  \n    const [response, setResponse] = useState<number>(0)\n  \n    const fetchData = useCallback(async () => {\n        let contract = await tronWeb.contract().at(tronMultiSigContract)\n\n        const response = await contract.required().call()\n       \n        setResponse(response.toNumber())\n\n    }, []) \n  \n    useEffect(() => {\n        fetchData()\n            .catch((err) => setResponse(0))\n  \n    }, [fetchData])\n  \n    return response\n}\n\nexport default useNoOfConfimReq\n\n","import { useEffect, useState } from 'react'\nimport Icon from \"@material-ui/core/Icon\"\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport _moment from \"moment\"\nimport {Button} from \"@material-ui/core\";\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport {useNetwork} from \"wagmi\"\nimport _ from \"lodash\"\nimport {useMediaQuery} from \"react-responsive\";\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Steps from './Steps'\nimport Textfield from './Textfield';\nimport { truncateMiddle } from '../utils';\n// import { tronWeb } from '../views/dashboard/TestTron';\nimport GroupWorkIcon from '@material-ui/icons/GroupWork';\nimport TouchAppIcon from '@material-ui/icons/TouchApp';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport { formatToBN, getBalance, getDisplayBalance } from '../utils/formatBalance';\nimport useCore from '../hooks/useCore';\nimport useConfirmTxn from '../hooks/useConfirmTxn';\nimport { BigNumber, ethers } from 'ethers';\nimport useGetConfirmReq from '../hooks/useGetConfirmReq';\nimport useExecuteTxn from '../hooks/useExecuteTxn';\nimport useConfirm from '../hooks/tron/useConfirm';\nimport useExecute from '../hooks/tron/useExecute';\nimport useNoOfConfimReq from '../hooks/tron/useNoOfConfimReq';\nimport { useGetActiveBlockChain, useGetActiveChainId } from '../state/chains/hooks';\nimport { useGetLoader, useUpdateLoader } from '../state/application/hooks';\nimport { useGetRequiredCount, useGetSingleTransaction, useGetOwners, useGetConfirmationCount, useGetTxnFromHash } from '../hooks/multisig/useMultiSig';\nimport useGetTokenDetails from '../hooks/useGetTokenDetails';\nimport ProgressModal from './ProgressModal';\nimport { useGetTronConfirmationCount, useGetTronTokenDetails, useTronGetIsExecuted } from '../hooks/tron/useTronMultisig';\nimport { Grid } from '@mui/material';\n\n\nfunction ConfirmationStep({allTransactions}) {\n      const core = useCore()\n      const isMobile = useMediaQuery({maxWidth: '768px'});\n\n      const {myAccount, provider, config, _activeNetwork, contracts, tronWeb } = core\n      const { chain: chainName} = useNetwork()\n      const chain = useGetActiveBlockChain()\n      const updateLoader = useUpdateLoader()\n      const currentLoaderState = useGetLoader()\n      const {fetch} = useGetTokenDetails();\n      const fetchTronTokenDetails = useGetTronTokenDetails()\n\n      const [finalData, setFinalData] = useState<any[]>([])\n      const [finalTronData, setFinalTronData] = useState<any[]>([])\n\n      // Goerli network\n      let testOwners: any = useGetOwners()\n      let confirmReq = useGetRequiredCount()\n      const disableConfirm = testOwners?.includes(myAccount)\n      const confirmTxnAction = useConfirmTxn()\n      const executeTxAction = useExecuteTxn()\n      const setIsExecuted = useGetSingleTransaction()\n      const getTxnFromHash = useGetTxnFromHash()\n      const setConfirmationCount = useGetConfirmationCount()\n      let etherscanUrl = config[chainName?.id || _activeNetwork].etherscanUrl\n      // const chaindId = useGetActiveChainId()\n            \n      // Nile network\n      let noOfConfirmReq = useNoOfConfimReq()\n      const confirmTronTxnAction = useConfirm()\n      const executeTronTxnAction = useExecute()\n      const setTronIsExecuted = useTronGetIsExecuted()\n      const setTronConfirmationCount = useGetTronConfirmationCount()\n\n      console.log(\"noOfConfirmReq\", noOfConfirmReq)\n\n      useEffect(() => {\n            getFinalData()\n      }, [allTransactions, chain])\n\n      // console.log(\"ConfirmationStep allTransactions\", allTransactions)\n      const ConfirmTxn = (txIndex: number, _typeOfTx: string) => {\n\n            updateLoader(true)\n\n            if(chain != \"Goerli\"){\n                  confirmTronTxnAction(txIndex)  \n            }else{\n                  confirmTxnAction(txIndex, _typeOfTx)\n            }\n\n      }\n\n      const executeTxn = (txIndex: number, _typeOfTx: string) => {\n            updateLoader(true)\n\n            if(chain != \"Goerli\"){\n                  executeTronTxnAction(txIndex)  \n            }else{\n                  executeTxAction(txIndex, _typeOfTx)\n            }\n\n      }\n\n      const getDate = (val: number) => {\n            let timestamp\n            if(val.toString().length > 10){\n                  timestamp = val/1000\n            }else {\n                  timestamp = val\n            }\n            let date = _moment.unix(timestamp).utc().format(\"MMM Do YYYY h:mm:ss a\");\n            if(timestamp == 0) return 'N/A'\n            return `${date}`\n      }\n\n      const timeAgo = (val: number) => {\n            let timestamp\n            if(val.toString().length > 10){\n                  timestamp = val/1000\n            }else {\n                  timestamp = val \n            }\n            let date = _moment.unix(timestamp).fromNow();\n            return date\n      }\n\n      const activeStepHandler = (confirmCount, isExecuted) => {\n\n            if(chain == \"Goerli\"){\n                  if(isExecuted) return 3\n                  else if(confirmCount < confirmReq) return 1\n                  else if(confirmCount == confirmReq) return 2\n                  else return\n            }else{\n                  if(isExecuted) return 3\n                  else if(confirmCount < noOfConfirmReq) return 1\n                  else if(confirmCount == noOfConfirmReq) return 2\n                  else return \n            }\n      }\n\n      const getFinalData = () => {\n            let token, value, symbol, toAdrs\n\n            if(chain == \"Goerli\"){\n                  let ethArr: any[] = []\n                  _.uniqWith(allTransactions).map(async(item: any, i: number) => {\n                        const executed = await setIsExecuted(Number(item.index))\n                        let numConfirmations = await setConfirmationCount(Number(item.index))\n                        token = item.submitResponse.input.slice(10, 74)\n                        token =  `0x${token.slice(24, token.length)}`\n                        let tokenDetails = await fetch(token)\n                        symbol = tokenDetails?.value.symbol\n                        value = item.submitResponse.input.slice(338, 402) \n                        value = ethers.utils.formatEther(`0x${value}`)\n                        toAdrs = item.submitResponse.input.slice(274, 338)\n                        toAdrs = `0x${toAdrs.slice(24, toAdrs.length)}`\n\n                        setFinalData(prev => [...prev, {...item, token, symbol, value, executed, numConfirmations, toAdrs}])\n\n      \n                        // setFinalData(prev => {\n      \n                        //       if(prev.length) {\n                        //             const newState = prev.map((txns) => {\n                    \n                        //                   if(txns.index == item.index){\n                        //                     return {...item, token, symbol, value, executed, numConfirmations, toAdrs}\n                        //                   }\n                        //                   return txns\n                        //                 })\n                        //             return newState;\n                        //       }else{\n                        //             return [...prev, item]\n                        //       }\n                        //     })\n                  })\n            }else {\n                  let arr1: any[] = []\n\n                  _.uniqWith(allTransactions).map(async(item: any, i: number) => {\n                        \n                        const executed = await setTronIsExecuted(item.index)\n                        let numConfirmations = await setTronConfirmationCount(Number(item.index))\n                        console.log(\"ConfirmationStep\", numConfirmations, item.index)\n\n                        token = item.submitResponse.input.slice(8, 72)\n                        token =  `${token.slice(24, token.length)}`\n                        let tokenDetails = await fetchTronTokenDetails(`41${token}`)\n                        symbol = tokenDetails?.symbol\n                        toAdrs = item.submitResponse.input.slice(272, 336)\n                        toAdrs = `${toAdrs.slice(24, toAdrs.length)}`\n\n                        value = item.submitResponse.input.slice(336, 400) \n                        value = ethers.utils.formatEther(`0x${value}`)\n\n                        // arr1.push({...item, token, symbol, value, executed, numConfirmations, toAdrs})\n                              \n                        setFinalTronData(prev => [...prev, {...item, token, symbol, value, executed, numConfirmations, toAdrs}])\n                  })\n\n                  \n            }\n\n            \n      }\n\n      console.log(\"finalTronData\", finalTronData)\n      console.log(\"finalData\", finalData)\n//   return <div />\n  return (\n      <div>\n            <ProgressModal currentLoaderState={currentLoaderState} />\n            <Textfield\n                  text={'Transactions'}\n                  fontSize={'24px'}\n                  fontWeight={'bold'}\n                  className={'m-b-15'}\n            />\n           \n            {\n                   _.uniqWith(chain == \"Goerli\" ? finalData : finalTronData, (arrVal, othVal) => arrVal.index == othVal.index)?.sort((a, b) => b.index - a.index).map((item: any, i) => {\n                        const {submitResponse, toAdrs: submitTo, index, token, symbol, value, confirmData, typeOfTxn, executed, numConfirmations} = item\n                        const {from: submitFrom, hash: submitHash, timeStamp: submitTime } = submitResponse\n                        \n                        return(\n                              <Accordion key={i} style={{marginBottom: '16px'}}>\n                                   {\n                                    isMobile ? \n                                    <AccordionSummary>\n                                          <Grid container alignItems={\"center\"} justifyContent={\"space-between\"} >\n                                                <Grid item xs={1}>\n                                                      <Textfield \n                                                            text={index}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}    \n                                                      />\n                                                </Grid>\n                                                <Grid item xs={7}>\n                                                       <Textfield \n                                                            text={`${typeOfTxn} (${value} ${symbol})`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </Grid>\n                                                <Grid item xs={1}>\n                                                      <div className='statusText'\n                                                            style={{color: `${\n                                                                  chain == 'Goerli' ? \n                                                                  executed ? '#228B22' : numConfirmations < confirmReq ? '#FF4500' : \"\" :\n                                                                  executed ? '#228B22' :  numConfirmations < noOfConfirmReq ? '#FF4500' : \"\"\n                                                            }`, marginTop: '15px'}}\n                                                      >\n                                                            {\n                                                                  chain == 'Goerli' ? \n                                                                  executed ? <CheckCircleIcon style={{color: '#2C004C'}}/> : numConfirmations < confirmReq ? <CachedIcon /> : <WarningIcon style={{color: '#B61500'}} /> :\n                                                                  executed ? <CheckCircleIcon style={{color: '#2C004C'}} /> : numConfirmations < noOfConfirmReq ? <CachedIcon /> : <WarningIcon style={{color: '#B61500'}} />\n                                                            }\n                                                      </div>\n                                                </Grid>\n                                                <Grid item xs={1}>\n                                                      <div className='statusText'>&nbsp; &nbsp; <KeyboardArrowUpIcon /> </div>\n                                                </Grid>\n                                               \n                                               \n                                          </Grid>\n                                    </AccordionSummary>\n                                    : \n                                    <AccordionSummary\n                                          // expandIcon={<ExpandMoreIcon />}\n                                          >\n                                          <div\n                                                className={'grid-item header'}   \n                                                style={{width: '100%'}}                                 \n                                          >\n                                                <div>\n                                                      <Textfield \n                                                            text={index}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}    \n                                                      />\n                                                </div>\n                                                <div>\n                                                      <Textfield \n                                                            text={`${typeOfTxn} (${value} ${symbol})`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </div>\n                                                <div>\n                                                      <Textfield \n                                                            text={`${timeAgo(submitTime)}`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </div>\n                                                <div className='row-left-center'>\n                                                      <div><Icon className='m-r-5 headerIcon'>supervisor_account</Icon> </div>\n                                                      <Textfield \n                                                            text={ executed ? `Fullfilled` : `${numConfirmations} out of ${chain == 'Goerli' ? confirmReq : noOfConfirmReq}`}\n                                                            color={'#aaa'}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                </div>\n                                                <div style={{width: '180px'}} className={\"row-allcenter\"}>\n                                                      <Textfield \n                                                            text={`${\n                                                                  chain == 'Goerli' ? \n                                                                  executed ? \"Success\" : numConfirmations < confirmReq ? 'Needs Confirmation' : 'Not Executable' :\n                                                                  executed ? \"Success\" : numConfirmations < noOfConfirmReq ? 'Needs Confirmation' : 'Not Executable'\n                                                                  // numConfirmations < noOfConfirmReq ? 'Needs Confirmation' : !executed ? 'Needs Execution' : 'Success'\n                                                            }`}\n                                                            // color={'#ed7117'}\n                                                            color={`${\n                                                                  chain == 'Goerli' ? \n                                                                  // _numConfirmations < confirmReq ? '#FF4500' : !_executed ? '#FF4500' : '#228B22' :\n                                                                  executed ? '#228B22' : numConfirmations < confirmReq ? '#FF4500' : \"\" :\n                                                                  executed ? '#228B22' :  numConfirmations < noOfConfirmReq ? '#FF4500' : \"\"\n                                                                  // numConfirmations < noOfConfirmReq ? '#FF4500' : !executed ? '#FF4500' : '#228B22'\n                                                            }`}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                      \n                                                </div>  \n                                                <div>&nbsp; &nbsp; <KeyboardArrowUpIcon /> </div>\n                                          </div>\n                                    </AccordionSummary>\n                                   } \n                                   {\n                                    isMobile ? \n                                    <AccordionDetails>\n                                          <Grid container alignItems={\"center\"}>\n                                                <Grid item xs={12}>\n                                                      <Textfield \n                                                            text={`${typeOfTxn} ${value} ${symbol} (${ truncateMiddle(chain == \"Goerli\" ? token : tronWeb?.address.fromHex(`41${token}`), 12, '...')}) to ${ chain == \"Goerli\" ? truncateMiddle(submitTo, 12, '...')  : truncateMiddle(tronWeb.address.fromHex(`41${submitTo}`), 12, \"...\") }`}\n                                                            color={'#000'}\n                                                            fontSize={'15px'}\n                                                            className={'m-b-15'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                </Grid>\n                                               \n                                                <Grid item xs={9}>\n                                                      <div>\n                                                            {\n                                                                  \n\n                                                                  chain == \"Goerli\" ?\n\n                                                                  executed ? <div /> :\n                                                                  numConfirmations < confirmReq  ?\n                                                                  <Button\n                                                                        onClick={() => ConfirmTxn(index, typeOfTxn)}\n                                                                        variant=\"contained\"\n                                                                        color=\"primary\"\n                                                                        disabled={currentLoaderState}\n                                                                        size={'large'}\n                                                                        >\n                                                                        Confirm\n                                                                  </Button> :\n                                                                  <div /> :\n\n                                                                  numConfirmations < noOfConfirmReq ?\n\n                                                                                                                                                                                                            \n                                                                  <Button\n                                                                        onClick={() => ConfirmTxn(index, typeOfTxn)}\n                                                                        variant=\"contained\"\n                                                                        color=\"primary\"\n\n                                                                        // disabled={!disableConfirm}\n                                                                        size={'large'}\n                                                                        >\n                                                                        Confirm\n                                                                  </Button> :\n                                                                   <div /> \n                                                            }\n                                                      </div>\n                                                </Grid>\n                                                <Grid item xs={3}>\n                                                      <Textfield \n                                                            text={ executed ? `Fullfilled` : `${numConfirmations} out of ${chain == 'Goerli' ? confirmReq : noOfConfirmReq}`}\n                                                            color={'#aaa'}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                            \n                                                      />\n                                                </Grid>\n                                          </Grid>\n                                    </AccordionDetails>\n                                    : \n                                    <AccordionDetails>\n                                          <div className='flex' style={{width: '100%'}}>\n                                                <div style={{flex: 3, display: 'flex', flexDirection: 'column'}}>\n                                                      <div className=\"grid-item flex1\">\n                                                            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                                                            <Textfield \n                                                                  text={`${typeOfTxn} ${value} ${symbol} (${ truncateMiddle(chain == \"Goerli\" ? token : tronWeb.address.fromHex(`41${token}`), 12, '...')}) to ${ chain == \"Goerli\" ? submitTo : tronWeb.address.fromHex(`41${submitTo}`)}`}\n                                                                  color={'#000'}\n                                                                  fontSize={'15px'}\n                                                                  className={'m-b-15'}\n                                                                  fontWeight={'bold'}\n                                                            />\n                              \n                                                                  {/* <div>\n                                                                        <Icon className='cardIcon'>content_copy</Icon>\n                                                                  </div>  */}\n                              \n                                                            </div>\n                                                           \n                                                            <div>\n                                                                  {\n                                                                        \n\n                                                                        chain == \"Goerli\" ?\n\n                                                                        executed ? <div /> :\n                                                                        numConfirmations < confirmReq  ?\n                                                                        <Button\n                                                                              onClick={() => ConfirmTxn(index, typeOfTxn)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n                                                                              disabled={currentLoaderState}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Confirm\n                                                                        </Button> :\n                                                                        <div />  :\n\n                                                                        numConfirmations < noOfConfirmReq ?\n\n                                                                                                                                                                                                                 \n                                                                        <Button\n                                                                              onClick={() => ConfirmTxn(index, typeOfTxn)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n\n                                                                              // disabled={!disableConfirm}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Confirm\n                                                                        </Button> :\n                                                                        <div /> \n                                                                  }\n                                                            </div>\n                                                      </div>  \n                                                      <div className=\"grid-item flex1\">\n                                                            <div className='flex m-b-10'>\n                                                                  <Textfield \n                                                                        text={'Transaction ID:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  <div className='flex flex4'style={{alignItems: 'flex-start'}}>\n                                                                        <Textfield \n                                                                              text={index}\n                                                                              color={'#000'}\n                                                                              fontSize={'14px'}\n                                                                              className={'m-r-10'}\n                                                                        />\n                                                                        {/* <Icon className='m-r-5 cardIcon'>content_copy</Icon> */}\n                                                                  </div>\n                                                            </div>\n                                                            <div className='flex m-b-10'>\n                                                                  <Textfield \n                                                                        text={'Created:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  <Textfield \n                                                                        text={timeAgo(submitTime) + ` (${getDate(submitTime)} +UTC)`}\n                                                                        color={'#000'}\n                                                                        fontSize={'14px'}\n                                                                        className={'flex4'}\n                                                                  />\n                                                            </div>\n                                                            <div className='flex' style={{ marginBottom: '20px'}}>\n                                                                  <Textfield \n                                                                        text={'Executed:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  \n                                                                  {\n                                                                        (executed && numConfirmations > 0 && confirmData ) && \n                                                                        <Textfield \n                                                                              text={timeAgo(confirmData[confirmData?.length - 1].timeStamp) + ` (${getDate(confirmData[confirmData?.length - 1].timeStamp)} +UTC)`}\n                                                                              color={'#000'}\n                                                                              fontSize={'14px'}\n                                                                              className={'flex4'}\n                                                                        />\n                                                                  }\n                                                            \n                                                            </div>\n                                                            <div style={{paddingBottom: '15px', fontSize: '16px'}}>\n                                                                  <a \n                                                                        target=\"_blank\"\n                                                                        href={ chain == \"Goerli\" ?`${etherscanUrl}/tx/${submitHash}` : `https://nile.tronscan.org/#/transaction/${submitHash}`}>\n                                                                              View on explorer\n                                                                  </a>\n\n                                                            </div>\n                                                            \n                                                      </div>\n                                                </div>\n                                                <div className=\"grid-item \" style={{flex: 2}}>\n                                                      <Steps\n                                                            chain={chain}\n                                                            activeStep={activeStepHandler(numConfirmations, executed)}\n                                                            stepState={executed}\n                                                            stepData={{submitHash, submitFrom, submitTime, executed ,numConfirmations, confirmData}}\n                                                      />\n                                                </div>\n                                                \n                                          </div>\n\n                                    </AccordionDetails>\n                                   }\n                                    \n                                    \n                              </Accordion>\n                        )\n                  })\n            }\n      </div>\n     \n  )\n}\n\nexport default ConfirmationStep","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport useCore from \"./useCore\";\n\n\nconst useGetOwners = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState([])\n\n  const fetchData = useCallback(async () => {\n    const contract = await core.contracts[`${chain?.id}`].MultiSig;\n    const res = await contract.getOwners()\n\n    setResponse(res)\n  }, [chain]) \n\n  useEffect(() => {\n\n    if(core){\n      fetchData()\n        .catch((err) => setResponse([]))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetOwners","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\n\nconst useGetTokenBalance = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  let balance\n  const fetchData = async (address: string, stableCoin: string) => {\n    const contract = await core.contracts[`${chain?.id || core._activeNetwork}`][stableCoin];\n    const res = await contract.balanceOf(address)\n    console.log(\"useGetTokenBalance res\", res)\n    balance = getDisplayBalance(res)\n\n    return balance\n  }\n\n\n  return {fetchData}\n\n}\n\nexport default useGetTokenBalance","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport useCore from \"../useCore\";\n\n\nconst useGetTronTokenBalance = () => {\n  const {tronWeb} = useCore()\n  \n  let balance\n  const fetchTronTokenBal = async (address: string, stableCoin: string) => {\n    let contract = await tronWeb.contract().at(stableCoin);\n    const res = await contract.balanceOf(address).call()\n    console.log(\"useGetTronTokenBalance res\", res)\n    balance = getDisplayBalance(res)\n\n    return balance\n  }\n\n  return {fetchTronTokenBal}\n\n}\n\nexport default useGetTronTokenBalance","import React, { useEffect, useState } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Snackbar,\n  Grid,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { useAccount, useNetwork } from 'wagmi'\nimport {useMediaQuery} from \"react-responsive\";\n\nimport { formatToBN, getBalance } from '../../../utils/formatBalance';\nimport ConfirmationStep from '../../../components/ConfirmationStep';\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction';\nimport useGetAllMultiSigTxns from '../../../hooks/useGetAllMultiSigTxns';\nimport useGetOwners from '../../../hooks/useGetOwners';\nimport useCore from '../../../hooks/useCore';\nimport { BigNumber, ethers } from 'ethers';\nimport useGetAllTronTxns from '../../../hooks/tron/useGetAllTronTxns';\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport Textfield from '../../../components/Textfield';\nimport { useAllTransactions } from '../../../state/transactions/hooks';\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\nimport useGetTokenBalance from '../../../hooks/useGetTokenBalance';\nimport useGetTokenDetails from '../../../hooks/useGetTokenDetails';\nimport useGetTronOwners from '../../../hooks/tron/useGetTronOwners';\nimport { tronStableCoins } from '../../../utils/constants';\nimport useGetTronTokenBalance from '../../../hooks/tron/useGetTronTokenBalance';\nimport _ from 'lodash';\n\nfunction Burn({ ethTxns, tronTxns }) {\n  const isMobile = useMediaQuery({maxWidth: '768px'});\n  const { tokens, _activeNetwork, tronWeb } = useCore()\n  const { chain: chainName } = useNetwork()\n\n  // const { myAccount } = core\n  const { address: myAccount } = useAccount()\n  const chain = useGetActiveBlockChain()\n\n  let contractOwners: any = useGetOwners()\n  const tronContractOwners = useGetTronOwners()\n\n  // let allTx = Object.entries(allTransactions)?.map((key) => key[1])?.filter((tx) => tx.txDetail._typeOfTx == 1)\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n\n  // let allTronTxns = useGetAllTronTxns()\n  // allTronTxns = allTronTxns.filter((tx) => tx._typeOfTx.toNumber() == 1)\n\n  const [address, setAddress] = useState<string>('')\n  const [amount, setAmount] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [stableCoinDetails, setStableCoinDetails] = useState<any>()\n  const [allTransactions, setAllTransactions] = useState<any>([])\n  const [finalEthTxns, setFinalEthTxns] = useState<any>([])\n  const [finalTronTxns, setFinalTronTxns] = useState<any>([])\n\n  const burnTokenAction = useSubmitTransaction(\"burn\", address, amount, stableCoin)\n  const submitTronTxnAction = useSubmit(\"burn\", address, amount, stableCoin)\n  const { fetchData } = useGetTokenBalance();\n  const { fetchTronTokenBal } = useGetTronTokenBalance();\n\n  useEffect(() => {\n    if (address.length > 0 && stableCoin.length > 0)\n      getTokenDetails()\n  }, [stableCoin, address])\n\n  useEffect(() => {\n    sortTransactions()\n  }, [ethTxns, tronTxns, chain])\n\n  const sortTransactions = async () => {\n    let ethTxnsArr: any[] = [], tronTxnsArr: any[] = []\n    ethTxns.forEach(async (item) => {\n      if (item.submitResponse.input.includes(\"9dc29fac\")) {\n        ethTxnsArr.push({...item, typeOfTxn: \"Burn\"})\n      }\n    })\n\n    setFinalEthTxns(ethTxnsArr)\n\n    tronTxns.forEach(async (item) => {\n      if (item.submitResponse.input.includes(\"9dc29fac\")) {\n        tronTxnsArr.push({...item, typeOfTxn: \"Burn\"})\n      }\n    })\n\n    setFinalTronTxns(tronTxnsArr)\n\n  }\n\n  const submitTx = async () => {\n    updateLoader(true)\n\n    if (chain == 'Goerli') {\n      burnTokenAction(() => { }, () => { })\n    }\n    if (chain == \"Nile\") {\n      submitTronTxnAction()\n    }\n  }\n\n  const handleCoinChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const getTokenDetails = async () => {\n    let tokenDetails\n    if(chain == \"Goerli\"){\n      tokenDetails = await fetchData(address, stableCoin)\n    }else {\n      tokenDetails = await fetchTronTokenBal(address, stableCoin)\n    }\n    setStableCoinDetails(tokenDetails)\n  }\n\n  console.log(\"Burn tronTxns\", tronTxns)\n\n  const disableSubmitBtn = address && (chain == \"Goerli\" ? ethers.utils.isAddress(address) : tronWeb.isAddress(address)) \n    && amount && Number(amount) <= Number(stableCoinDetails) && !!stableCoin && chain && \n    (chain == \"Goerli\" ? contractOwners?.includes(myAccount) : tronContractOwners?.includes(tronWeb.defaultAddress.base58))\n\n  return (\n    <div style={{ marginLeft: isMobile ? \"20px\" : '260px', marginRight: '20px' }}>\n\n      <Card style={{ marginBottom: '15px' }}>\n        <CardContent className='p15'>\n          <Textfield\n            text={'Burn the Stablecoin'}\n            fontSize={'24px'}\n            fontWeight={'bold'}\n            className={'m-b-15'}\n          />\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={5}>\n              <TextField\n                helperText=\"This is the token to be burned\"\n                required\n                select\n                label=\"Stablecoin\"\n                value={stableCoin}\n                onChange={handleCoinChange}\n                fullWidth\n                // variant=\"outlined\"\n                size='small'\n              >\n\n                {\n                    chain == \"Nile\" ? \n                      tronStableCoins?.map((coin) => \n                        (<MenuItem\n                          key={coin.symbol}\n                          value={coin.contractAdrs}>\n                            {coin.symbol}\n                        </MenuItem>)\n                      ) \n                      :\n\n                      tokens[chainName?.id || _activeNetwork] ? Object.entries(tokens[chainName?.id || _activeNetwork])?.map((option) => (\n                        <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                          {option[1].symbol}\n                        </MenuItem>\n                      ))\n                      : <MenuItem>No coins available on this chain</MenuItem>\n                  }\n              </TextField>\n            </Grid>\n            <Grid item md={1}></Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                helperText={`This is the amount of token to be burned. ${stableCoin && `Max value: ${stableCoinDetails}`} `}\n                required\n                label=\"Amount\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e: any) => setAmount(e.target.value)}\n                value={amount}\n                fullWidth\n                size='small'\n              // variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                helperText=\"This is the address to which token to be burned\"\n                required\n                id=\"outlined-email\"\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e: any) => setAddress(e.target.value)}\n                value={address}\n                fullWidth\n                size='small'\n              // variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item md={9}></Grid>\n            <Grid item xs={12} md={3}>\n              <Button\n                disabled={!disableSubmitBtn}\n                onClick={submitTx}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                style={{ position: 'relative' }}\n              >\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n\n\n        </CardContent>\n\n      </Card>\n\n      {\n        chain == \"Goerli\" ? \n        <ConfirmationStep allTransactions={_.uniqWith(finalEthTxns, (arrVal: any, othVal: any) => arrVal.index == othVal.index)} /> :\n        <ConfirmationStep allTransactions={finalTronTxns} /> \n      }\n\n    </div>\n  )\n}\n\nexport default Burn\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport useCore from \"./useCore\";\n \nconst useFreezeToken = () => {\n  const core = useCore();\n  const { chain } = useNetwork();\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  const freeze = async (to: string, stableCoin: string) => {\n    try {\n      const contract = await core.contracts[`${chain?.id || core._activeNetwork}`][stableCoin];\n      console.log(\"contract\", contract)\n      const res = await contract.freeze(to);\n      const tx = await res.wait();\n\n      if (tx?.status === 1) {\n        let summary = \"Wallet address is frozen!\";\n\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useFreezeToken error\", e);\n      addPopup({\n        error: {\n          message: formatErrorMessage(e?.data?.message || e?.message),\n          stack: e?.stack,\n        },\n      });\n    }\n  }\n\n  return freeze\n}\nexport default useFreezeToken;\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\nconst useUnFreezeToken = () => {\n  const core = useCore();\n  const { chain } = useNetwork();\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  const unfreeze = async (to: string, stableCoin: string) => {\n    try {\n      const contract = await core.contracts[`${chain?.id || core._activeNetwork}`][stableCoin];\n      console.log(\"contract\", contract, stableCoin)\n\n      const res = await contract.unfreeze(to);\n      const tx = await res.wait();\n\n      if (tx?.status === 1) {\n        let summary = \"Wallet address is unfrozen!\";\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useUnFreezeToken error\", e);\n      addPopup({\n        error: {\n          message: e?.data?.message || e?.message,\n          stack: e?.stack,\n        },\n      });\n    }\n  }\n\n  return unfreeze\n};\n\nexport default useUnFreezeToken;\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport formatErrorMessage from \"../../utils/formatErrorMessage\";\nimport useCore from \"../useCore\";\n\n \nconst useFreezeTokenTron = () => {\n  const {tronWeb} = useCore()\n  \n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  const freeze = async (to: string, stableCoin: string) => {\n    try {\n      const contract = await window.tronWeb.contract().at(stableCoin)\n      const res = await contract.freeze(to).send()\n      let txnInfo = await tronWeb.trx.getTransaction(res);\n      if (txnInfo.ret[0].contractRet == \"SUCCESS\") {\n        let summary = \"Wallet address is frozen!\";\n\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: res,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useFreezeTokenTron error\", e);\n      addPopup({\n        error: {\n          message: e,\n          stack: e,\n        },\n      });\n    }\n  }\n\n  return freeze\n}\nexport default useFreezeTokenTron;\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\nimport formatErrorMessage from \"../../utils/formatErrorMessage\";\nimport useCore from \"../useCore\";\n\n \nconst useUnFreezeTokenTron = () => {\n  const {tronWeb} = useCore()\n\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  const unfreeze = async (to: string, stableCoin: string) => {\n    console.log(\"useUnFreezeTokenTron\", stableCoin)\n    try {\n      const contract = await window.tronWeb.contract().at(stableCoin)\n      const res = await contract.unfreeze(to).send()\n      let txnInfo = await tronWeb.trx.getTransaction(res);\n      if (txnInfo.ret[0].contractRet == \"SUCCESS\") {\n        let summary = \"Wallet address is unfrozen!\";\n\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: res,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useUnFreezeTokenTron error\", e);\n      addPopup({\n        error: {\n          message: e,\n          stack: e,\n        },\n      });\n    }\n  }\n\n  return unfreeze\n}\nexport default useUnFreezeTokenTron;\n","import {useEffect, useState} from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  MenuItem\n} from \"@material-ui/core\";\nimport {Puff} from \"react-loader-spinner\"\nimport { useNetwork } from 'wagmi'\nimport Textfield from '../../../components/Textfield'\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\nimport {useMediaQuery} from \"react-responsive\";\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport useFreezeToken from '../../../hooks/useFreezeToken';\nimport useUnFreezeToken from '../../../hooks/useUnFreezeToken';\nimport ProgressModal from '../../../components/ProgressModal';\nimport useCore from '../../../hooks/useCore';\nimport { tronStableCoins } from '../../../utils/constants';\nimport useFreezeTokenTron from '../../../hooks/tron/useFreezeTokenTron';\nimport useUnFreezeTokenTron from '../../../hooks/tron/useUnFreezeTokenTron';\nimport { ethers } from 'ethers';\n\nfunction Freeze() {\n  const {tokens, _activeNetwork, tronWeb} = useCore()\n  const { chain: chainName} = useNetwork()\n  const isMobile = useMediaQuery({maxWidth: '768px'});\n  \n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  const chain = useGetActiveBlockChain()\n\n  const [addressToFreeze, setAddressToFreeze] = useState<string>('')\n  const [addressToUnFreeze, setAddressToUnFreeze] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [stableCoinUnfreeze, setStableCoinUnfreeze] = useState<string>('')\n\n  const freezeAction = useFreezeToken()\n  const unFreezeAction = useUnFreezeToken()\n\n  const freezeActionTron = useFreezeTokenTron()\n  const unFreezeActionTron = useUnFreezeTokenTron()\n\n  const handleCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const handleUnfreezeCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoinUnfreeze(event.target.value);\n  };\n\n  const handleFreeze = () => {\n    if(chain == \"Goerli\"){\n      freezeAction(addressToFreeze, stableCoin)\n    }else {\n      freezeActionTron(addressToFreeze, stableCoin)\n    }\n    updateLoader(true)\n  }\n\n  const handleUnFreeze = () => {\n    if(chain == \"Goerli\"){\n      unFreezeAction(addressToUnFreeze, stableCoinUnfreeze)\n    }else {\n      unFreezeActionTron(addressToUnFreeze, stableCoinUnfreeze)\n    }\n    updateLoader(true)\n  }\n\n  const disableFreeze = stableCoin && addressToFreeze && chain == \"Goerli\" ? ethers.utils.isAddress(addressToFreeze) : tronWeb.isAddress(addressToFreeze)\n  const disableUnFreeze = stableCoinUnfreeze && addressToUnFreeze  && chain == \"Goerli\" ? ethers.utils.isAddress(addressToUnFreeze) : tronWeb.isAddress(addressToUnFreeze)\n  \n  return (\n    <div style={{marginLeft: isMobile ? \"20px\" : '260px', marginRight: '20px', position: 'relative'}}>\n      <ProgressModal currentLoaderState={currentLoaderState} />\n      <Textfield\n        text={'Freeze a wallet'}\n        fontSize={'24px'}\n        fontWeight={'bold'}\n        className={'m-b-15'}\n        />\n      <Card style={{marginBottom: '30px'}}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                helperText=\"This is the address to be frozen.\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddressToFreeze(e.target.value)}\n                value={addressToFreeze}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                  helperText=\"This is the stable coin to be frozen.\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoin}\n                  onChange={handleCoinChange}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                > \n                  {\n                    chain == \"Goerli\" ?\n                      Object.entries(tokens[chainName?.id || _activeNetwork]).map((option) => (\n                      <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                        {option[1].symbol}\n                      </MenuItem>\n                    )) :\n                    tronStableCoins.map((option) => (\n                      <MenuItem key={option.symbol} value={option.contractAdrs}>\n                        {option.symbol}\n                      </MenuItem>\n                    ))\n                }\n                </TextField> \n            </Grid>\n            <Grid item xs={8} md={9}></Grid>\n            <Grid item xs={4} md={3}>\n                      \n            <Button\n              onClick={handleFreeze}\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={!disableFreeze}\n              style={{position: 'relative'}}\n            >\n              <div>\n                Freeze\n              </div>\n            </Button>      \n            </Grid>\n          </Grid>\n          \n        </CardContent>\n\n      </Card>\n\n      <Textfield\n        text={'Unfreeze a wallet'}\n        fontSize={'24px'}\n        fontWeight={'bold'}\n        className={'m-b-15'}\n        />\n      <Card style={{marginBottom: '30px'}}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                helperText=\"This is the address to be unfrozen.\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddressToUnFreeze(e.target.value)}\n                value={addressToUnFreeze}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                  helperText=\"This is the stable coin to be unfrozen.\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoinUnfreeze}\n                  onChange={handleUnfreezeCoinChange}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                >\n                   {\n                    chain == \"Goerli\" ?\n                      Object.entries(tokens[chainName?.id || _activeNetwork]).map((option) => (\n                      <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                        {option[1].symbol}\n                      </MenuItem>\n                    )) :\n                    tronStableCoins.map((option) => (\n                      <MenuItem key={option.symbol} value={option.contractAdrs}>\n                        {option.symbol}\n                      </MenuItem>\n                    ))\n                  }\n                </TextField> \n            </Grid>\n            <Grid item xs={8} md={9}></Grid>\n            <Grid item xs={4} md={3}>\n                      \n            <Button\n              onClick={handleUnFreeze}\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={!disableUnFreeze}\n              style={{position: 'relative'}}\n            >\n              <div>\n                Unfreeze\n              </div>\n            </Button>      \n            </Grid>\n          </Grid>\n          \n        </CardContent>\n\n      </Card>\n    </div>\n  )\n}\n\nexport default Freeze","import React, { useState, useEffect, useMemo } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  MenuItem,\n} from \"@material-ui/core\";\nimport {useMediaQuery} from \"react-responsive\";\nimport Web3 from 'web3';\nimport { useNetwork } from 'wagmi'\nimport { formatToBN, getBalance } from '../../../utils/formatBalance';\nimport useCore from '../../../hooks/useCore';\nimport ConfirmationStep from '../../../components/ConfirmationStep';\nimport { useWallet } from 'use-wallet';\nimport { BigNumber, ethers, utils } from 'ethers';\nimport useGetOwners from '../../../hooks/useGetOwners';\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction';\nimport { useAllTransactions, useClearAllTransactions } from '../../../state/transactions/hooks';\nimport useGetAllMultiSigTxns from '../../../hooks/useGetAllMultiSigTxns';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport useGetAllTronTxns from '../../../hooks/tron/useGetAllTronTxns';\nimport { useGetActiveBlockChain, useGetActiveChainId } from '../../../state/chains/hooks';\nimport Textfield from '../../../components/Textfield';\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\nimport Test from '../Test';\nimport { tronStableCoins } from '../../../utils/constants';\nimport useGetTronOwners from '../../../hooks/tron/useGetTronOwners';\nimport _ from 'lodash';\n\nfunction Mint({ethTxns, tronTxns}) {\n\n  const core = useCore()\n  const {myAccount, provider, _activeNetwork, tokens, contracts, tronWeb } = core\n\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  const { chain: chainName} = useNetwork()\n  const isMobile = useMediaQuery({maxWidth: '768px'});\n\n  const chain = useGetActiveBlockChain()\n  const chaindId = useGetActiveChainId()\n  const fetchOwners = useGetTronOwners()\n\n  const [address, setAddress] = useState<string>('')\n  const [amount, setAmount] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [allTransactions, setAllTransactions] = useState<any>([])\n  const [finalTxns, setFinalTxns] = useState<any>([])\n  const [finalEthTxns, setFinalEthTxns] = useState<any>([])\n  const [finalTronTxns, setFinalTronTxns] = useState<any>([])\n  // let allTx = Object.entries(allTransactions)?.map((key) => key[1])?.filter((tx) => tx.txDetail._typeOfTx == 0)\n  // let allTronTxns = useGetAllTronTxns()\n  // allTronTxns = allTronTxns.filter((tx) => tx._typeOfTx.toNumber() == 0)\n\n  const contractOwners: any = useGetOwners()\n  const tronContractOwners = useGetTronOwners()\n \n  useEffect(() => {\n    sortTransactions()\n  }, [ethTxns, tronTxns, chain])\n\n\n  const sortTransactions = async () => {\n    let ethTxnsArr: any[] = [], tronTxnsArr: any[] = []\n    ethTxns.forEach((item) => {\n      if (item.submitResponse.input.includes(\"40c10f19\")) {\n        ethTxnsArr.push({...item, typeOfTxn: \"Mint\"})\n      }\n    })\n\n     console.log(\"ethTxnsArr\", ethTxnsArr)\n\n    setFinalEthTxns(ethTxnsArr)\n\n    tronTxns.forEach(async (item) => {\n      if (item.submitResponse.input.includes(\"40c10f19\")) {\n        tronTxnsArr.push({...item, typeOfTxn: \"Mint\"})\n      }\n    })\n\n    setFinalTronTxns(tronTxnsArr)\n\n  }\n\n  const handleCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const mintTokenAction = useSubmitTransaction(\"mint\", address, amount, stableCoin)\n  const submitTronTxnAction = useSubmit(\"mint\", address, amount, stableCoin)\n\n  const submitTx = async() => {\n    updateLoader(true)\n    if(chain == 'Goerli'){\n      mintTokenAction(() => {},() => {})\n    }\n\n    if(chain == 'Nile') {\n      submitTronTxnAction()\n    }\n  }\n\n  const disableMint = address && (chain == \"Goerli\" ? ethers.utils.isAddress(address) :  tronWeb.isAddress(address)) && amount && stableCoin && chain && (chain == \"Goerli\" ? contractOwners?.includes(myAccount) : tronContractOwners?.includes(tronWeb.defaultAddress.base58))\n\n  // console.log(\"finalTxns\", _.uniqWith(finalEthTxns, (arrVal: any, othVal: any) => arrVal.index == othVal.index), finalTronTxns)\n  console.log(\"Mint\", ethTxns, tronTxns)\n\n  return (\n    <div style={{marginLeft: isMobile ? \"20px\" : '260px', marginRight: '20px', position: 'relative',}}>      \n      <Card style={{marginBottom: '30px'}}>\n        <CardContent className='p15'>\n          <Textfield\n            text={'Mint the Stablecoin'}\n            fontSize={'24px'}\n            fontWeight={'bold'}\n            className={'m-b-15'}\n            />\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={5}>\n                  <TextField\n                    helperText=\"This is the token to be minted\"\n                    required\n                    select\n                    label=\"Stablecoin\"\n                    value={stableCoin}\n                    onChange={handleCoinChange}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size='small'\n                  >\n                    {\n                      chain == \"Nile\" ? \n                        tronStableCoins?.map((coin) => \n                          (<MenuItem\n                            key={coin.symbol}\n                            value={coin.contractAdrs}>\n                              {coin.symbol}\n                          </MenuItem>)\n                        ) \n                        :\n\n                        tokens[chainName?.id || _activeNetwork] ? Object.entries(tokens[chainName?.id || _activeNetwork])?.map((option) => (\n                          <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                            {option[1].symbol}\n                          </MenuItem>\n                        ))\n                        : <MenuItem>No coins available on this chain</MenuItem>\n                    }\n                    \n                  </TextField>           \n            </Grid>\n            <Grid item md={1}></Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                helperText=\"This is the amount of token to be minted\"\n                required\n                label=\"Amount\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAmount(e.target.value)}\n                value={amount}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                helperText=\"This is the address to which token to be minted\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddress(e.target.value)}\n                value={address}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}></Grid>\n            <Grid item md={9}>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <Button\n                onClick={submitTx}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                disabled={!disableMint}\n                style={{position: 'relative'}}\n              >\n                <div>Submit</div>\n\n              </Button>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    \n      {\n        chain == \"Goerli\" ? \n        <ConfirmationStep allTransactions={_.uniqWith(finalEthTxns, (arrVal: any, othVal: any) => arrVal.index == othVal.index)} /> :\n        <ConfirmationStep allTransactions={finalTronTxns} /> \n\n      }\n    </div>\n  )\n}\n\nexport default Mint\n\n","import React from 'react'\n\nfunction Stats() {\n  return (\n    <div style={{marginLeft: '260px'}}>\n      <h1>Statistics</h1>\n    </div>\n  )\n}\n\nexport default Stats","import React, { useEffect, useState } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Snackbar,\n  Grid,\n} from \"@material-ui/core\";\nimport validator from \"validator\";\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\nimport { useDisconnect } from 'wagmi'\nimport { useAccount, useSwitchNetwork, useNetwork } from 'wagmi'\nimport {useMediaQuery} from \"react-responsive\";\n\nimport '../../styles/authStyle.css'\nimport { useHandleBlokchainChange } from '../../state/chains/hooks';\nimport useCore from '../../hooks/useCore';\n\nfunction Auth() {\n  const { disconnect } = useDisconnect()\n  const setChain = useHandleBlokchainChange()\n  const [showSnackbar, setShowSnackbar] = useState<boolean>(false)\n  const { isConnected } = useAccount()\n  const {myAccount} = useCore()\n  const isMobile = useMediaQuery({maxWidth: '768px'});\n\n\n  const loginWithTron = () => {\n    if(!window.tronWeb.ready){\n      setShowSnackbar(true)\n      \n    }else{\n      console.log(\"show account\")\n      setChain(\"Nile\");\n      localStorage.setItem(\"ActiveChain\", \"Nile\")\n      document.location.href = \"\"\n    }\n    \n  }\n\n  if(isConnected){\n    document.location.href = \"\"\n    localStorage.setItem(\"ActiveChain\", \"Goerli\")\n  }\n \n  return (\n    <div id={!isMobile ? 'auth' : ''} style={{padding: isMobile ? \"100px 0\" : \"\"}} >\n       {\n        showSnackbar && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={showSnackbar}\n            onClose={() => setShowSnackbar(false)}\n            message={`Please login to TronLink extention wallet first. If you don't have then please download from the link below!`}\n            action={\n              <React.Fragment>\n                <a style={{color: '#fff'}} href={'https://chrome.google.com/webstore/detail/tronlink/ibnejdfjmmkpcnlpebklmnkoeoihofec'}>Tronlink wallet</a>\n              </React.Fragment>\n            }\n          />\n      }\n       <div className=\"auth-container\">\n      <Grid container>\n        <Grid item xs={12} sm={3}></Grid>\n        <Grid item xs={12} sm={6}>\n          <Card className=\"auth-container-card\">\n            <CardContent>\n              <Typography align={\"center\"} gutterBottom variant=\"h5\" component=\"h2\">\n                Welcome to Stablecoin Dashboard\n              </Typography>\n              <Typography align={\"center\"} variant=\"body2\" color=\"textSecondary\" style={{marginBottom: '60px'}} >\n                <p>\n                  Please login to one of the wallet below.\n                </p>\n              </Typography>\n              <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                <div>\n                  <ConnectButton chainStatus={\"none\"} />\n                </div>\n                <div>\n                  <button\n                    onClick={loginWithTron}\n                    className={\"tronlinkBtn\"}\n                    style={{padding: '11px'}}\n                  >\n                    Tronlink Wallet\n                  </button>\n                </div>\n              </div>\n              \n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={3}></Grid>\n      </Grid>\n     \n    </div>\n    </div>\n  )\n}\n\nexport default Auth","import web3 from \"web3\"\nimport axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport { useNetwork } from 'wagmi'\nimport { useGetTransactionCount } from '../../hooks/multisig/useMultiSig'\nimport useGetTronTransactionCount from '../../hooks/tron/useGetTronTransactionCount'\nimport useCore from '../../hooks/useCore'\nimport { useGetActiveBlockChain, useGetActiveChainId } from '../../state/chains/hooks'\nimport Admin from './Admin'\nimport Burn from './Burn'\nimport Freeze from './Freeze'\nimport Mint from './Mint'\nimport Stats from './Stats'\nimport { tronMultiSigContract } from \"../../utils/constants\"\nimport Auth from \"../Auth\"\n\nexport default function DashboardContent (){\n\n  const core = useCore()\n  const { provider, contracts, tronWeb} = core\n  const ethTxnCount = useGetTransactionCount()\n  const tronTxnCount = useGetTronTransactionCount()\n  const chaindId = useGetActiveChainId()\n  const { chain } = useNetwork()\n  const blochChain = useGetActiveBlockChain()\n\n  const [allApiTxns, setAllApiTxns] = useState<any>([])\n  const [allApiTronTxns, setAllApiTronTxns] = useState<any>([])\n  const [allApiTronRes, setAllApiTronRes] = useState<any>([])\n  const [allApiEthRes, setAllApiEthRes] = useState<any>([])\n  const [fetchInterval, setFetchinterval] = useState<boolean>(false)\n\n  const [tronObj, setTronObj] = useState<any>([])\n  const [ethObj, setEthObj] = useState<any>([])\n\n  useEffect(() => {\n\n    const intervalCall = setInterval(() => {\n      let timnow = Date.now() / 1000\n      axios.get(`https://nile.trongrid.io/v1/accounts/${tronMultiSigContract}/transactions?limit=200&min_timestamp=${timnow}`, { timeout:  50000})\n        .then((res) => {\n          console.log(\"inside troninterval\", res)\n          setAllApiTronRes(res.data.data)\n        })\n        .catch((err) => console.error(\"tronapi\", err))\n    }, 10000)\n\n    return () => {\n      clearInterval(intervalCall);\n    };\n    \n  }, [])\n\n  useEffect(() => {\n    const intervalCall = setInterval(() => {\n      axios.get(`https://api-goerli.etherscan.io/api?module=account&action=txlist&address=${contracts[chaindId].MultiSig.address}&sort=desc&apikey=${process.env.REACT_APP_ETHERSCAN_API_KEY}`, { timeout:  50000})\n      .then((res) => {\n        setAllApiEthRes(res.data.result)\n      })\n      .catch((err) => {\n        console.error(\"ethapi\", err)\n      })\n    }, 10000)\n   \n    return () => {\n      clearInterval(intervalCall);\n    };\n  }, [])\n\n  useEffect(() => {\n    getTronTxnsFromAPI()\n  },[allApiTronRes, tronTxnCount])\n\n  useEffect(() => {\n    setTronObj(allApiTronTxns)\n    tronGetConfirm()\n  }, [allApiTronTxns])\n\n  useEffect(() => {\n    getSubmitTxnsFromAPI()\n  }, [allApiEthRes, ethTxnCount])\n\n  useEffect(() => {\n    setEthObj(allApiTxns)\n    ethGetConfirm()\n  }, [allApiTxns])\n\n\n  const getSubmitTxnsFromAPI = async() => {\n    let index = ethTxnCount\n\n   if(!!allApiEthRes && index){\n    allApiEthRes?.forEach((res) => {\n      if(res.functionName.toLowerCase().includes(\"submittransaction\")){\n        let newIndex = index - 1\n        setAllApiTxns(prev => [...prev, {index: newIndex, submitResponse: res}])\n        index = index - 1\n      }\n    })\n   }\n  }\n\n  const getTronTxnsFromAPI = async() => {\n    if(!!allApiTronRes && tronTxnCount){\n      let index = tronTxnCount\n      allApiTronRes?.forEach((item, i) => {\n        if(item.raw_data?.contract[0].parameter.value.data?.includes(\"c6427474\") && item.ret[0].contractRet === \"SUCCESS\"){\n          let newIndex = index - 1\n          \n          setAllApiTronTxns(prev => [...prev, {index: newIndex, submitResponse: {from: tronWeb.address.fromHex(item.raw_data?.contract[0].parameter.value.owner_address), input: item.raw_data?.contract[0].parameter.value.data, hash: item.txID, timeStamp: item.raw_data.timestamp}}])\n          index = index - 1\n\n        }\n      })\n    }\n  }\n\n  const tronGetConfirm = () => {\n    allApiTronRes?.forEach((item, i) => {\n      if(item.raw_data?.contract[0].parameter.value.data?.includes(\"c01a8c84\") && item.ret[0].contractRet === \"SUCCESS\"){\n        let txIndex = web3.utils.hexToNumberString(`0x${item.raw_data?.contract[0].parameter.value.data.slice(10, item.raw_data?.contract[0].parameter.value.data.length)}`)\n          console.log(\"tronGetConfirmtxIndex\", txIndex)\n        setTronObj(prev => \n            prev.map((txns) => {\n              let confirmData: any[] = []\n              if(txns.index == txIndex){\n                if(txns.confirmData){\n                  confirmData = txns.confirmData\n                  confirmData.push({from: item.raw_data?.contract[0].parameter.value.owner_address, \n                    input: item.raw_data?.contract[0].parameter.value.data, \n                    hash: item.txID, \n                    timeStamp: item.raw_data.timestamp })\n                }\n                else {\n                  confirmData.push({from: item.raw_data?.contract[0].parameter.value.owner_address, \n                    input: item.raw_data?.contract[0].parameter.value.data, \n                    hash: item.txID, \n                    timeStamp: item.raw_data.timestamp\n                  })\n                }\n                return {...txns, confirmData}\n              }\n              return txns\n            })\n          )\n       }\n    })\n\n  }\n\n  const ethGetConfirm = () => {\n    allApiEthRes?.forEach((res, i, allApiTxns) => {\n      if(res.functionName.toLowerCase().includes(\"confirmtransaction\")) {\n        let txIndex = web3.utils.hexToNumberString(`0x${res.input.slice(10, res.input.length)}`)\n\n        setEthObj(prev => {\n          const newState = prev.map((txns) => {\n            let confirmData: any[] = []\n\n            if(txns.index == txIndex){\n              if(txns.confirmData){\n               \n                confirmData = txns.confirmData\n                confirmData.push(res)\n              }else {\n                confirmData.push(res)\n              }\n              \n              return {...txns, confirmData}\n            }\n            return txns\n          })\n          return newState;\n        })\n      }\n    })\n  }\n\n    return(\n    <Routes>\n        <Route path={'/login'} element={<Auth />} />\n\n        {\n            chain?.id === 5 ?\n                <Route path={'/dashboard'}>\n                    <Route path={'/dashboard/mint'} element={<Mint ethTxns={ethObj} tronTxns={tronObj} />} />\n                    <Route path={'/dashboard/burn'} element={<Burn ethTxns={ethObj} tronTxns={tronObj} />} />\n                    <Route path={'/dashboard/freeze'} element={<Freeze />} />\n                    <Route path={'/dashboard/admin'} element={<Admin ethTxns={ethObj} tronTxns={tronObj} />} />\n                    <Route path={'/dashboard/statistics'} element={<Stats />} />\n                    <Route path='*' element={<div />} />\n                </Route>\n            : \n            <Route path={'/dashboard'} />\n          }\n    </Routes>\n    )\n}","import axios from 'axios';\nimport { BigNumber, ethers } from 'ethers';\nimport web3 from \"web3\"\nimport React, { useEffect, useMemo, useState } from 'react';\nimport {\n  BrowserRouter,\n  HashRouter,\n  Routes,\n  Route,\n  Navigate,\n  \n} from \"react-router-dom\";\nimport useCore from './hooks/useCore';\nimport { useGetActiveChainId } from './state/chains/hooks';\n\nimport { useAllTransactions } from './state/transactions/hooks';\n\nimport Auth from './views/Auth';\nimport Dashboard from './views/dashboard';\nimport Dashbaord from './views/dashboard';\nimport Admin from './views/dashboard/Admin';\nimport Burn from './views/dashboard/Burn';\nimport Freeze from './views/dashboard/Freeze';\nimport Mint from './views/dashboard/Mint';\nimport Stats from './views/dashboard/Stats';\nimport { useGetConfirmationCount, useGetSingleTransaction, useGetTransactionCount } from './hooks/multisig/useMultiSig';\nimport useGetTokenDetails from './hooks/useGetTokenDetails';\nimport _ from 'lodash';\nimport { tronMultiSigContract } from './utils/constants';\nimport useGetTronTransactionCount from './hooks/tron/useGetTronTransactionCount';\nimport { useNetwork } from 'wagmi';\nimport DashboardContent from './views/dashboard/DashboardContent';\n\n\nfunction Navigation() {\n  return (\n    <HashRouter>\n      <div style={{ paddingBottom: '200px', backgroundColor: '#f2e6e6', minHeight: '100vh' }}>\n        <Dashboard />\n        <DashboardContent />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default Navigation\n","import {createReducer, nanoid} from '@reduxjs/toolkit';\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal, updateBlockNumber, loaderVisibile} from './actions';\nimport {INITIAL_APP_STATE} from '../../utils/constants';\n\nexport default createReducer(INITIAL_APP_STATE, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const {chainId, blockNumber} = action.payload; \n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\n      state.popupList = (key\n          ? state.popupList.filter((popup) => popup.key !== key)\n          : state.popupList\n      ).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, {payload: {key}}) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    })\n    .addCase(loaderVisibile, (state, {payload: {isVisible}}) => {\n      state.isVisible = isVisible;\n    })\n);\n","import {createReducer} from '@reduxjs/toolkit';\nimport { BigNumber } from 'ethers';\nimport _ from 'lodash';\n\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  saveTxn,\n  SerializableTransactionReceipt,\n  updateTransaction\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  // hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime?: number;\n  confirmedTime?: number;\n  from?: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: \n    {\n      [txIndex: number]: {\n        hash: string,\n        creation?: {\n          // hash: string;\n          approval?: { tokenAddress: string; spender: string };\n          summary?: string;\n          receipt?: SerializableTransactionReceipt;\n          lastCheckedBlockNumber?: number;\n          addedTime?: number;\n          confirmedTime?: number;\n          from?: string;\n        },\n        confirmation?: \n          { \n            // hash: string;\n            from?: string;\n            confirmedTime?: number;\n          }\n        ,\n        execution?: \n          { \n            // hash: string;\n            from?: string;\n            confirmedTime?: number;\n          }\n        ,\n        txDetail: {\n          _numConfirmations: any, \n          _typeOfTx: any, \n          _createdTime: any, \n          _executed: boolean, \n          _value: BigNumber, \n          _token: string, \n          txIndex: any, \n          _executedTime: any, \n          _to: string,\n        },\n        \n      },\n    }\n\n}\n\nexport interface TxnData {\n  hash: string[];\n}\n\n \nexport interface newTxnState {\n  [chainId: number]:\n    {\n      [txIndex: number]: TxnData\n    }\n\n}\n\n\nexport interface DashboardTxnDetails {\n  _numConfirmations: BigNumber, \n  _typeOfTx: BigNumber, \n  _createdTime: BigNumber, \n  _executed: boolean, \n  _value: BigNumber, \n  _token: string, \n  txIndex: BigNumber, \n  _executedTime: BigNumber, \n  _to: string\n}\n\nexport const initialState: newTxnState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      (transactions, {payload: \n        {chainId, txDetail, txIndex, hash, creation, confirmation, execution}}) => {\n        if (transactions[chainId]?.[txIndex]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n        let txs = transactions[chainId] ?? {};\n        // txs[txIndex] = {txDetail, hash, creation, confirmation, execution};\n\n        // let creationTxns = transactions[chainId][txIndex].creation ?? {};\n        // const {hash, approval, summary, from, addedTime, confirmedTime} = creation.txHash\n        // creationTxns[creation.txHash.hash] = {hash, approval, summary, from, addedTime: now(), confirmedTime};\n\n        // let confirmationTxns = transactions[chainId][txIndex].confirmation ?? {};\n        // const {hash: confirmHash, approval: confirmApproval, summary: confirmSummary, from: confirmFrom, addedTime: confirmAddedTime, confirmedTime: confirmConTime} = confirmation.txHash;\n        // confirmationTxns[confirmation.txHash.hash] = {hash: confirmHash, approval: confirmApproval, summary: confirmSummary, from: confirmFrom, addedTime: now(), confirmedTime: confirmConTime}\n\n        // let executionTxns = transactions[chainId][txIndex].execution ?? {};\n        // const {hash: executeHash, approval: executeApproval, summary: executeSummary, from: executeFrom, addedTime: executeAddedTime, confirmedTime: executeConTime} = execution.txHash;\n        // executionTxns[execution.txHash.hash] = {hash: executeHash, approval: executeApproval, summary: executeSummary, from: executeFrom, addedTime: now(), confirmedTime: executeConTime}\n\n        // txs[txIndex] = {creation: creationTxns, confirmation: confirmationTxns, execution: executionTxns, txDetail}\n\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(\n      updateTransaction,\n      (transactions, {payload: \n        {chainId, from, hash, approval, summary, txDetail}}) => {\n        // if (transactions[chainId]?.[hash]) {\n        //   throw Error('Attempted to add existing transaction.');\n        // }\n        \n        // let txs = transactions[chainId] ?? {};\n        // const mappedTxns = Object.entries(txs)\n        // const index = mappedTxns.findIndex(obj => obj[1].txDetail.txIndex == txDetail.txIndex)\n        // mappedTxns.splice(index, 1)\n        // txs = Object.fromEntries(mappedTxns) \n               \n        // txs[hash] = {hash, approval, summary, from, addedTime: now(), txDetail};\n        // transactions[chainId] = txs;\n\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(\n      checkedTransaction,\n      (transactions, {payload: {chainId, hash, blockNumber}}) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (!tx.lastCheckedBlockNumber) {\n          tx.lastCheckedBlockNumber = blockNumber;\n        } else {\n          tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n        }\n      },\n    )\n    .addCase(finalizeTransaction, (transactions, {payload: {chainId, txIndex, from, hash, creation, confirmation, execution}}) => {\n      const tx = transactions[chainId]?.[txIndex];\n      if (!tx) {\n        return;\n      }\n\n      // tx.creation = {receipt: creation.receipt, confirmedTime: Date.now(),}\n\n      // tx.creation.hash.receipt = receipt;\n      // tx.creation.hash.confirmedTime = now();\n    })\n    .addCase(saveTxn, (transactions, {payload: {txIndex, hash, chainId}}) => {\n      let txs = transactions[chainId] ?? {};\n\n      if(_.isEmpty(txs) || !txs[txIndex]){\n        txs[txIndex] = {hash: [hash]}\n      }else {\n        txs[txIndex].hash.push(hash)\n      }\n\n      transactions[chainId] = txs;\n\n    })\n);\n","import {IChainIdInitialState, IBlockChaianitialState} from './interface';\n\nexport const ChainIdInitialState: IChainIdInitialState = {\n  active: 1,\n};\n\nexport const BlockChaianitialState: IBlockChaianitialState = {\n  active: localStorage.getItem(\"ActiveChain\") || \"Goerli\"\n}\n","import {createReducer} from '@reduxjs/toolkit';\n\nimport {ChainIdInitialState, BlockChaianitialState} from '../../utils/chains/constant';\n\nimport {updateChainId, updateBlockchain} from './actions';\n\nexport const chainId = createReducer(ChainIdInitialState, (builder) =>\n    builder\n      .addCase(updateChainId, (chainsConfig, {payload: {chainId}}) => {\n        chainsConfig.active = chainId;\n      })\n  /* .addCase(updateAvailableChains, (chainsConfig, {payload: {chains}}) => {\n     chainsConfig.availableNetworks = chains;\n   }),*/\n);\n\nexport const blockChain = createReducer(BlockChaianitialState, (builder) =>\n    builder\n      .addCase(updateBlockchain, (blockChainConfig, {payload: {chain}}) => {\n        blockChainConfig.active = chain;\n      })\n);\n\n","import {createLogger} from 'redux-logger';\nimport {load, save} from 'redux-localstorage-simple';\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport { composeWithDevTools } from '@redux-devtools/extension';\n\nimport application from './application/reducer';\nimport transactions from './transactions/reducer';\nimport {blockChain, chainId} from './chains/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions', 'slippage'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n    chainId,\n    blockChain,\n  },\n  \n  middleware: [\n    ...getDefaultMiddleware({serializableCheck: false, thunk: false}),\n    save({states: PERSISTED_KEYS}),\n    createLogger(),\n  ]\n  ,\n  preloadedState: load({states: PERSISTED_KEYS}),\n}\n\n);\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import {useCallback, useEffect, useState} from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import {useWallet} from 'use-wallet';\nimport {useDispatch} from 'react-redux';\nimport {useCallback, useEffect, useState} from 'react';\nimport { useNetwork } from 'wagmi'\n\nimport config from '../../config';\nimport {updateBlockNumber} from './actions';\nimport useDebounce from '../../hooks/useDebounce';\nimport {getDefaultProvider} from '../../utils/provider';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport {useGetActiveChainId} from \"../chains/hooks\";\n\nexport default function Updater(): null {\n  // const {ethereum, chainId} = useWallet();\n  const { chain } = useNetwork()\n\n  let id\n  if(chain){\n    id = chain.id\n  }\n  \n  const dispatch = useDispatch();\n  const windowVisible = useIsWindowVisible();\n  const activeChainId = useGetActiveChainId();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId: id,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state: any) => {\n        if (id === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return {chainId: id, blockNumber};\n          return {chainId: id, blockNumber: Math.max(blockNumber, state.blockNumber)};\n        }\n        return state;\n      });\n    },\n    [chain?.id, setState],\n  );\n\n  // The attach/detach listeners.\n  useEffect(() => {\n    if (!window.ethereum || !id|| !windowVisible) return undefined;\n    setState({chainId: chain?.id, blockNumber: null});\n\n    const provider = getDefaultProvider(config[activeChainId]);\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error: any) =>\n        console.error(`Failed to get block number for chainId: ${chain?.id}`, error),\n      );\n\n    provider.on('block', blockNumberCallback);\n\n    return () => {\n      provider.removeListener('block', blockNumberCallback);\n    };\n  }, [dispatch, chain?.id, window.ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import {useEffect, useState} from 'react';\n\n/**\n * Modified from https://usehooks.com/useDebounce/\n */\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay.\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport { useNetwork, useAccount } from 'wagmi'\n\nimport config from '../../config';\nimport useCore from '../../hooks/useCore';\nimport {getDefaultProvider} from '../../utils/provider';\nimport {useAddPopup, useBlockNumber, useUpdateLoader} from '../application/hooks';\nimport {useGetActiveChainId} from '../chains/hooks';\nimport {AppDispatch, AppState} from '../index';\n\nimport {checkedTransaction, finalizeTransaction} from './actions';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // Every 10 blocks if pending for longer than an hour.\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // Every 3 blocks if pending more than 5 minutes.\n    return blocksSinceCheck > 2;\n  } else {\n    // Otherwise every block.\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  // const {chainId, ethereum} = useWallet();\n  const core = useCore()\n\n  const { chain} = useNetwork()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n\n  const lastBlockNumber = useBlockNumber();\n  const activeChainId = useGetActiveChainId();\n  const updateLoader = useUpdateLoader()\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // Show d on confirm.\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !window.ethereum || !lastBlockNumber) {\n      {\n        console.log('updater if failed', !chainId, !window.ethereum, !lastBlockNumber, lastBlockNumber)\n        return;\n      }\n    }\n\n    const provider = getDefaultProvider(config[activeChainId]);\n\n    Object.entries(transactions)\n      .filter((tx, i) => shouldCheck(lastBlockNumber, {addedTime: Date.now()}))\n      .forEach((tx, i) => {\n\n        const hash = tx[1].hash[tx[1].hash.length - 1]\n\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  hash,\n                  chainId,\n                  txIndex: Number(tx[0]),\n                  from: receipt.from,\n                  creation: {\n                    receipt: {\n                      blockHash: receipt.blockHash,\n                      blockNumber: receipt.blockNumber,\n                      contractAddress: receipt.contractAddress,\n                      from: receipt.from,\n                      status: receipt.status,\n                      to: receipt.to,\n                      transactionHash: receipt.transactionHash,\n                      transactionIndex: receipt.transactionIndex,\n                    }\n                  }\n\n                }),\n              );\n              // console.log(\"loadertest upif\")\n              \n              // updateLoader(false)\n              // addPopup(\n              //   {\n              //     txn: {\n              //       hash,\n              //       success: receipt.status === 1,\n              //       summary: transactions[tx[1].txDetail.txIndex]?.summary,\n              //     },\n              //   },\n              //   hash,\n              // );\n            } else {\n              updateLoader(false)\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, window.ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","import React from 'react';\n\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater/>\n    <TransactionUpdater/>\n  </>\n);\n\nexport default Updaters;\n","import styled from 'styled-components'\nimport React, {createContext, useCallback, useState} from 'react';\n\nimport {ModalsContext} from '../../utils/interface';\n \nexport const Context = createContext<ModalsContext>({\n  onPresent: (content) => {},\n  onDismiss: () => {},\n})\n\nconst Modals: React.FC = ({children}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [content, setContent] = useState<React.ReactNode>()\n\n  const handlePresent = useCallback((modalContent: React.ReactNode) => {\n    setContent(modalContent)\n    setIsOpen(true)\n  }, [setContent, setIsOpen])\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined)\n    setIsOpen(false)\n  }, [setContent, setIsOpen])\n\n  return (\n    <Context.Provider value={{\n      content,\n      isOpen,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss,\n    }}>\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss}/>\n          {React.isValidElement(content) && React.cloneElement(content)}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  )\n}\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nexport default Modals;\n","import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport Slide from '@material-ui/core/Slide';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {makeStyles, Theme} from '@material-ui/core/styles';\nimport {TransitionProps} from '@material-ui/core/transitions';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\n// import theme from '../../theme';\n// import '../../customCss/Custom-Snackbar.css';\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\nimport config from '../../config';\nimport {PopupContent} from '../../utils/interface';\nimport {useGetActiveBlockChain, useGetActiveChainId} from \"../../state/chains/hooks\";\nimport { useUpdateLoader } from '../../state/application/hooks';\n\ninterface TxButtonProps {\n  notificationCount?: number;\n  index?: number;\n  open?: boolean;\n  content?: PopupContent;\n  handleCancel?: Function;\n}\n\n\nconst CustomizedSnackbars: React.FC<TxButtonProps> = ({\n  open,\n  content,\n  handleCancel,\n}) => {\n\n  const [openSnackbar, setOpen] = React.useState(open);\n\n  const isScucess = content?.txn?.success;\n  const isLoading = content?.txn?.loading;\n  const chainId = useGetActiveChainId();\n  const updateLoader = useUpdateLoader()\n  const chain = useGetActiveBlockChain()\n\n  useEffect(() => {\n    setOpen(true)\n    console.log(\"loadertest CustomizedSnackbars\")\n    updateLoader(false)\n  }, [isScucess, isLoading])\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    \n    if (reason === 'clickaway') return;\n\n    setOpen(false);\n    if (handleCancel) handleCancel();\n\n    setTimeout(() => {\n      window.location.reload()\n    }, 3000)\n  };\n\n  function SlideTransition(props: TransitionProps) {\n    return <Slide {...props} direction=\"left\"/>;\n  }\n\n  const SnackHeader = () => {\n    if (isLoading) {\n      return (\n        <SnackBarInnerContainer>\n          <div className=\"row-left-center\">\n            <div onClick={handleClose} className={'m-r-10'}><WarningIcon /></div>\n            Transaction Pending\n          </div>\n          <div onClick={handleClose}> <CancelIcon /> </div>\n        </SnackBarInnerContainer>\n      )\n    } else if (isScucess) {\n      return (\n        <SnackBarInnerContainer> \n          <div className=\"row-left-center\">\n            <div onClick={handleClose} className={'m-r-10'}><CheckCircleIcon /></div>\n            <div>Transaction Successful</div>\n          </div>\n          <div onClick={handleClose}><CancelIcon /> </div>\n        </SnackBarInnerContainer> \n      )\n    } else {\n      return (\n        <SnackBarInnerContainer style={{background: '#B61500'}}>\n          <div className=\"row-left-center\">\n          <div onClick={handleClose} className={'m-r-10'}><WarningIcon /></div>\n            Transaction Failed\n          </div>\n          <div onClick={handleClose}><CancelIcon /></div>\n        </SnackBarInnerContainer>\n      )\n    }\n  }\n\n  const SnackBody = () => {\n    return (\n      <SnackBarBody>\n        <div>\n          {\n            content?.txn?.success || content?.txn?.loading\n            ? content?.txn?.summary || \"\"\n            : content?.error?.message || \"Error Occured\"\n          }\n        </div>\n        { \n          config[chainId].etherscanUrl !== '' && content?.txn?.hash && (\n            <AnchorTag\n              href={chain == \"Nile\" ? `https://nile.tronscan.org/#/transaction/${content?.txn?.hash}`  :`${config[chainId].etherscanUrl}/tx/${content?.txn?.hash}`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <div className={'m-r-5'}>View on Explorer</div>\n              <div onClick={handleClose} style={{display: 'flex', alignItems: 'center'}}>\n                <TrendingFlatIcon />\n              </div>\n\n            </AnchorTag>\n          )\n        }\n      </SnackBarBody>\n    )\n  }\n\n  return (\n    <div>\n      {openSnackbar && (\n        <Snackbar\n          open={openSnackbar}\n          autoHideDuration={5000}\n          TransitionComponent={SlideTransition}\n          onClose={handleClose}\n          anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n          <SnackBarParent>\n            {SnackHeader()}\n            {SnackBody()}\n          </SnackBarParent>\n        </Snackbar>\n      )}\n    </div>\n  );\n};\n\nconst AnchorTag = styled.a`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin-top: 4px;\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst SnackBarInnerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 50px;\n  padding: 0 12px 0 18px;\n  justify-content: space-between;\n  border-radius: 4px 4px 0 0;\n  background: #3f046d;\n  color: white;\n`;\n\nconst SnackBarBody = styled.div`\n  background: rgba(0, 0, 0, 0.2);\n  backdrop-filter: blur(70px);\n  border-radius: 0 0 4px 4px;\n  padding: 12px 12px 12px 52px;\n  font-weight: 600;\n  font-size: 14px;\n  width: 100%;\n  color: black;\n`;\n\nconst SnackBarParent = styled.div`\n  background: rgba(255, 255, 255, 0.02);\n  backdrop-filter: blur(70px);\n  border-radius: 4px 4px 0 0;\n  border: 1px solid;\n  width: 378px;\n  border-image-source: linear-gradient(180deg,\n  rgba(255, 116, 38, 0.1) 0%,\n  rgba(255, 255, 255, 0) 100%);\n  color: #ffffff;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 20px;\n  @media (max-width: 600px) {\n    width: 100%;\n  }\n`;\n\nexport default CustomizedSnackbars;\n","import React from 'react';\n\nimport TransactionSnackbar from './TransactionSnackbar';\nimport {useActivePopups} from '../../state/application/hooks';\n\nexport default function Popups() {\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      {\n        activePopups.map((p, i) => (\n          <TransactionSnackbar\n            key={i}\n            index={i}\n            notificationCount={i + 1}\n            open\n            content={p.content}\n          />\n        ))\n      }\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { SnackbarProvider } from \"notistack\";\nimport {Provider} from \"react-redux\";\nimport dotenv from 'dotenv'\nimport '@rainbow-me/rainbowkit/styles.css';\nimport {\n  getDefaultWallets,\n  RainbowKitProvider,\n  connectorsForWallets,\n  wallet,\n  lightTheme,\n  Chain\n} from '@rainbow-me/rainbowkit';\nimport {\n  chain,\n  configureChains,\n  createClient,\n  WagmiConfig,\n} from 'wagmi';\nimport { jsonRpcProvider } from 'wagmi/providers/jsonRpc';\nimport { publicProvider } from 'wagmi/providers/public';\nimport { useAccount, useSwitchNetwork, useNetwork } from 'wagmi'\nimport TronWeb from \"tronweb\"\nimport config, { getSupportedChains } from './config';\nimport ProtocolProvider from './context/Provider';\n// import ModalsProvider from './context/Modals'\nimport Navigation from './navigation';\nimport useCore from './hooks/useCore';\nimport Dashbaord from './views/dashboard';\nimport store from './state';\nimport Updaters from './state/Updaters';\nimport ModalsProvider from './context/Modals'\nimport Popups from './components/Popups';\nimport { useGetActiveChainId, useGetUpdateActiveChainId } from './state/chains/hooks';\nimport { ethers } from 'ethers';\nimport { alchemyProvider } from 'wagmi/providers/alchemy'\n\ndotenv.config()\n\n// Rainbowkit starts\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.goerli],\n  [\n    alchemyProvider({ apiKey: process.env.REACT_APP_ALCHEMY_GOERLI_API_KEY}),\n    // publicProvider()\n  ]\n);\n\nconst connectors = connectorsForWallets([\n  {\n    groupName: 'Recommended',\n    wallets: [\n      wallet.injected({ chains }),\n      wallet.rainbow({ chains }),\n      wallet.metaMask({chains}),\n      wallet.ledger({chains})\n    ],\n  },\n]);\n\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors,\n  provider,\n})\n\nconst WalletProvider = ({ children }: any) => {\n  return (\n    <WagmiConfig client={wagmiClient}>\n      <RainbowKitProvider \n        chains={chains} \n        coolMode={true}\n        theme={lightTheme({\n          accentColor: '#3f046d',\n          // accentColorForeground: 'white',\n          // borderRadius: 'medium',\n          // fontStack: 'system',\n        })}\n        >\n        <Updaters/>\n        <ProtocolProvider>\n          <AppContent>{children}</AppContent>\n        </ProtocolProvider>\n      </RainbowKitProvider>\n    </WagmiConfig>\n  );\n}\n\n// Rainbow kit code ends\n\n\nconst Providers: React.FC = ({children}) => {\n  return (\n    <Provider store={store}>\n      <WalletProvider>{children}</WalletProvider>\n    </Provider>\n\n  );\n};\n\nconst AppContent: React.FC = ({children}) => {\n\n  const core = useCore()\n  const { chain } = useNetwork()\n  const { isConnected } = useAccount()\n\n  const newprovider = ((window.ethereum != null) ? new ethers.providers.Web3Provider(window.ethereum): ethers.providers.getDefaultProvider())\n\n  newprovider.on(\"network\", (newNetwork, oldNetwork) => {\n    // When a Provider makes its initial connection, it emits a \"network\"\n    // event with a null oldNetwork along with the newNetwork. So, if the\n    // oldNetwork exists, it represents a changing network\n    if (oldNetwork) {\n        window.location.reload();\n    }\n  });\n\n  console.log('core', core)\n\n  // const {ethereum, chainId} = useWallet();\n  const setChainId = useGetUpdateActiveChainId();\n\n  useEffect(() => {\n    if (isConnected) \n      // @ts-ignore\n      setChainId(chain.id)\n  }, [isConnected]);\n\n  // if (!window.ethereum) {\n  //   console.log('no window ethereum')\n  //   return <div />\n  // };\n  if (!core){\n    console.log('no core');\n    return <div />\n  };\n\n  return(\n    <ModalsProvider>\n      <SnackbarProvider\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        maxSnack={2}\n        autoHideDuration={2500}\n      >\n        <>\n          <Popups/>\n          {children}\n        </>\n      </SnackbarProvider>\n    </ModalsProvider>\n  )\n}\n\nfunction App() {\n\n  return (\n    <Providers>\n      <Navigation />\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/components/confirmation.css'\nimport './styles/common.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}