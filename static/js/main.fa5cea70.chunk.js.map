{"version":3,"sources":["chainConfig/ethereum.ts","chainConfig/maticMumbai.ts","chainConfig/goerli.ts","config.ts","protocol/ERC20.ts","protocol/deployments/abi.ts","utils/constants.ts","utils/provider.ts","protocol/index.tsx","state/chains/actions.ts","state/chains/hooks.ts","context/Provider/Provider.tsx","hooks/useCore.ts","state/application/actions.ts","state/application/hooks.ts","state/transactions/actions.ts","hooks/useGetConfirmReq.ts","state/transactions/hooks.tsx","styles/material-dashboard-react.js","styles/adminStyle.js","styles/components/sidebarStyle.js","views/dashboard/Sidebar.tsx","views/dashboard/index.tsx","components/Textfield.tsx","utils/formatErrorMessage.ts","hooks/multisig/useMultiSig.tsx","utils/formatBalance.ts","hooks/useGetTokenDetails.ts","hooks/useSubmitTransaction.ts","hooks/useConfirmTxn.ts","utils/index.tsx","components/ProgressModal.tsx","hooks/useGetAllTokenDetails.ts","views/dashboard/Admin/index.tsx","components/Steps.tsx","hooks/useExecuteTxn.ts","hooks/tron/useConfirm.ts","hooks/tron/useExecute.ts","hooks/tron/useNoOfConfimReq.ts","components/ConfirmationStep.tsx","hooks/useGetOwners.ts","hooks/tron/useSubmit.ts","hooks/useGetTokenBalance.ts","views/dashboard/Burn/index.tsx","hooks/useFreezeToken.ts","hooks/useUnFreezeToken.ts","views/dashboard/Freeze/index.tsx","hooks/useGetAllMultiSigTxns.ts","views/dashboard/Test.tsx","views/dashboard/Mint/index.tsx","views/dashboard/Stats/index.tsx","navigation.tsx","state/application/reducer.ts","state/transactions/reducer.ts","state/chains/reducer.ts","utils/chains/constant.ts","state/index.ts","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","context/Modals/Modals.tsx","components/Popups/TransactionSnackbar.tsx","components/Popups/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["configurations","ethereum","networkName","networkDisplayName","chainId","etherscanUrl","defaultProvider","deployments","require","refreshInterval","gasLimitMultiplier","blockchainToken","blockchainTokenName","blockchainTokenDecimals","networkSetupDocLink","supportedTokens","decimalOverrides","USDC","maticMumbai","goerli","getSupportedChains","Object","keys","map","i","Number","ERC20","address","provider","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFro","balance","formatUnits","supply","toFixed","name","type","anonymous","inputs","indexed","internalType","constant","outputs","payable","stateMutability","abis","IERC20","StablecoinImpl","MultiSig","DAY_IN_MS","WEEK_IN_MS","BigNumber","from","Date","now","Math","floor","pow","getDefaultProvider","config","_window","window","ethers","providers","Web3Provider","web3","currentProvider","JsonRpcProvider","Protocol","cfg","myAccount","signer","contracts","tokens","_activeNetwork","entries","chainIdString","networkConfig","deployment","abi","includes","ABIS","e","console","log","newProvider","Web3","getSigner","connect","values","token","dispatch","id","gas","multiplied","toNumber","gasLimit","updateChainId","createAction","updateBlockchain","useGetActiveBlockChain","useSelector","state","blockChain","active","useGetActiveChainId","updateId","useGetUpdateActiveChainId","avaiableIds","changedId","chains","useDispatch","useCallback","Context","createContext","core","ProtocolProvider","props","children","useState","setCore","useProvider","useAccount","useEffect","newCore","unlockWallet","Provider","value","useCore","useContext","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","addPopup","removePopup","loaderVisibile","useAddPopup","content","key","useGetLoader","application","isVisible","useUpdateLoader","addTransaction","updateTransaction","clearAllTransactions","finalizeTransaction","checkedTransaction","saveTxn","useGetConfirmReq","chain","useNetwork","React","response","setResponse","fetchData","numConfirmationsRequired","res","catch","err","useTransactionUpdater","transDetail","summary","approval","hash","_numConfirmations","_typeOfTx","_createdTime","_executed","_value","_token","txIndex","_executedTime","_to","Error","txn","loading","success","txDetail","useAllTransactions","transactions","hexToRgb","input","replace","test","length","first","second","last","toUpperCase","parseInt","drawerWidth","transition","container","padding","marginRight","overflow","height","marginLeft","defaultFont","fontFamily","fontWeight","lineHeight","primaryColor","warningColor","dangerColor","successColor","infoColor","roseColor","grayColor","blackColor","whiteColor","primaryBoxShadow","boxShadow","infoBoxShadow","successBoxShadow","warningBoxShadow","dangerBoxShadow","roseBoxShadow","title","background","margin","paddingTop","borderTop","color","textDecoration","marginTop","marginBottom","minHeight","appStyle","theme","wrapper","position","top","mainPanel","breakpoints","up","width","overflowScrolling","sidebarStyle","drawerPaper","border","backgroundColor","bottom","left","zIndex","down","display","right","visibility","overflowY","textAlign","paddingRight","paddingLeft","transform","logo","logoLink","fontSize","logoLinkRTL","logoImage","maxHeight","img","verticalAlign","backgroundSize","backgroundPosition","opacity","list","paddingBottom","listStyle","item","itemLink","borderRadius","itemIcon","float","itemText","sidebarWrapper","fab","useStyles","makeStyles","styles","Sidebar","setState","toggleDrawer","open","event","classes","links","List","className","url","icon","r","to","isActive","ListItem","button","Icon","classNames","ListItemText","primary","disableTypography","brand","Hidden","mdUp","implementation","Fab","size","style","outline","onClick","Drawer","variant","anchor","paper","onClose","Divider","smDown","Dashbaord","connector","isConnecting","isDisconnected","useSwitchNetwork","data","error","isLoading","pendingChainId","switchNetwork","status","isSuccess","isConnected","connectMetamask","setConnectMetamask","justifyContent","Snackbar","anchorOrigin","vertical","horizontal","message","Textfield","text","formatErrorMessage","toLowerCase","useGetRequiredCount","required","useGetConfirmationCount","txnId","getConfirmationCount","count","useGetOwners","getOwners","useGetSingleTransaction","sendRes","txId","executed","getBalance","decimals","getDisplayBalance","fractionDigits","formattedBalance","decimalsPointIndex","indexOf","slice","formatToBN","split","beforeDecimals","afterDecimal","beforeDecimalsPrecisionText","afterDecimalsPrecisionText","fixedPrecisionValue","parseUnits","LOADING_DEFAULT_BASIC_STATE","NON_LOADING_DEFAULT_BASIC_STATE","useGetTokenDetails","tokenDetails","setTokenDetails","fetch","utils","isAddress","useMultiSig","typeOfTx","destinationAdrs","updateLoader","activeID","creation","confirmedTime","confirmation","useTransactionAdder","onSuccess","onFailure","iface","Interface","encodeFunctionData","parseEther","submitTransaction","wait","tx","setTimeout","transactionCount","txnsCount","transactionHash","stack","useConfirmTxn","confirmCallback","index","confirmTransaction","reason","truncateMiddle","fullStr","strLen","separator","sepLen","charsToShow","frontChars","ceil","backChars","substr","DialogTitle","withStyles","createStyles","root","spacing","closeButton","palette","grey","other","Typography","IconButton","DialogContent","MuiDialogContent","MuiDialogActions","ProgressModal","currentLoaderState","setOpen","handleClose","Dialog","fullWidth","dividers","ariaLabel","wrapperStyle","wrapperClass","radius","visible","useGetAllTokenDetails","forEach","bal","prev","table","minWidth","Admin","adminTxns","chainName","contractOwners","adddressToAdd","setAddressToAdd","adddressRemove","setAddressToRemove","noOfConfirmations","setNoOfConfirmations","finalData","setFinalData","tableRows","setTableRows","addOwnerAction","useSubmitTransaction","removeOwnerAction","noConfirmAction","setConfirmationCount","setIsExecuted","confirmReq","confirmTxnAction","allTokensTotalSupply","getAllData","createRowData","returnRes","getTxnHash","testFn","getTransaction","blockNumber","getBlock","blockres","timestamp","typeOfTxn","toAdrs","val","Promise","all","singleHash","hashData","then","submitData","confirmData","filter","arr","outOfData","details","outOfCount","action","createData","_","uniqWith","isEqual","Grid","xs","Card","CardContent","TextField","helperText","label","onChange","target","Button","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","arrVal","othVal","sort","a","b","row","component","scope","href","rel","actionsContainer","resetContainer","getDate","date","_moment","unix","utc","format","getStepContent","step","stepData","Steps","stepState","activeStep","setStepLabelColor","steps","Stepper","orientation","Step","StepLabel","StepContent","useExecuteTxn","executeCallback","executeTransaction","useConfirm","tronWeb","defaultAddress","base58","at","send","useExecute","useNoOfConfimReq","call","ConfirmationStep","allTransactions","testOwners","executeTxAction","useGetTxnFromHash","noOfConfirmReq","confirmTronTxnAction","executeTronTxnAction","getAlltheData","ConfirmTxn","executeTxn","timeAgo","fromNow","methodID","formatEther","confirmCount","isExecuted","tokenAdrs","tokenSymbol","Accordion","AccordionSummary","AccordionDetails","flex","flexDirection","disabled","alignItems","useSubmit","trc20TokenAddress","useGetTokenBalance","stableCoin","Burn","burnTxns","adddress","setAddress","setAmount","setStableCoin","stableCoinDetails","setStableCoinDetails","burnTokenAction","submitTronTxnAction","getTokenDetails","submitTx","handleCoinChange","disableSubmitBtn","select","option","MenuItem","useFreezeToken","USDB","freeze","useUnFreezeToken","unfreeze","Freeze","adddressToFreeze","setAddressToFreeze","adddressToUnFreeze","setAddressToUnFreeze","stableCoinUnfreeze","setStableCoinUnfreeze","freezeAction","unFreezeAction","disableFreeze","disableUnFreeze","useGetAllMultiSigTxns","getTransactionCount","prevState","Test","USDA","Mint","mintTxns","multiSigTxns","setAllTransactions","mintTokenAction","disableMint","Stats","Navigation","setMintTxns","setBurnTxns","setAdminTxns","sortTransactions","chaindId","mutlisigAddr","path","element","createReducer","popupList","walletModalOpen","settingsMenuOpen","builder","addCase","payload","max","removeAfterMs","popup","concat","nanoid","show","p","execution","txs","lastCheckedBlockNumber","isEmpty","push","chainsConfig","blockChainConfig","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","thunk","save","states","createLogger","preloadedState","load","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","activeChainId","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","useDebounce","lastBlockNumber","useBlockNumber","receipt","blocksSinceCheck","minutesPending","getTime","addedTime","shouldCheck","getTransactionReceipt","blockHash","contractAddress","transactionIndex","Updaters","onPresent","onDismiss","StyledModalWrapper","styled","div","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","undefined","isValidElement","cloneElement","AnchorTag","SnackBarInnerContainer","SnackBarBody","SnackBarParent","CustomizedSnackbars","handleCancel","openSnackbar","isScucess","autoHideDuration","TransitionComponent","Slide","direction","SnackBody","Popups","activePopups","useMemo","useActivePopups","TransactionSnackbar","notificationCount","dotenv","configureChains","mainnet","polygon","polygonMumbai","publicProvider","connectors","connectorsForWallets","groupName","wallets","wallet","injected","rainbow","walletConnect","metaMask","ledger","wagmiClient","createClient","autoConnect","WalletProvider","client","coolMode","Providers","AppContent","newNetwork","oldNetwork","location","reload","setChainId","maxSnack","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fa5cea70.chunk.js","sourcesContent":["import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    ethereum: {\n        networkName: 'Ethereum',\n        networkDisplayName: 'Ethereum',\n        chainId: 1,\n        etherscanUrl: 'https://etherscan.io',\n        defaultProvider:'https://silent-black-frost.quiknode.pro/6fbee126d2692f4c84d1c11167b0d7c4a77b8fb5/',\n        deployments: require('../protocol/deployments/ethereum.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'MATIC',\n        blockchainTokenName: 'MATIC',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"DBT\"\n        ], \n        decimalOverrides: {\n          'ARTH-DP': 18,\n          USDC: 6,\n          \"DBT\": 18\n        },\n    },\n}\n\nexport default configurations;","import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    80001: {\n        networkName: 'Matic Mumbai Testnet',\n        networkDisplayName: 'Polygon testnet',\n        chainId: 80001,\n        etherscanUrl: 'https://mumbai.polygonscan.com',\n        defaultProvider:\n          'https://matic-mumbai.chainstacklabs.com',\n        deployments: require('../protocol/deployments/maticMumbai.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'MATIC',\n        blockchainTokenName: 'MATIC',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"USDA\"\n        ], \n        decimalOverrides: {\n          'ARTH-DP': 18,\n          USDC: 6,\n          \"DBT\": 18\n        },\n      },\n}\n\nexport default configurations;","import {Configuration} from '../utils/interface';\n\nconst configurations: { [env: string]: Configuration } = {\n    5: {\n        networkName: 'Goerli Testnet',\n        networkDisplayName: 'Goerli testnet',\n        chainId: 5,\n        etherscanUrl: 'https://goerli.etherscan.io',\n        defaultProvider:\n          'https://goerli.infura.io/v3/3a9a6018905e45669f505505420d81d6',\n        deployments: require('../protocol/deployments/goerli.json'),\n        refreshInterval: 10000,\n        gasLimitMultiplier: 1.1,\n        blockchainToken: 'ETH',\n        blockchainTokenName: 'ETH',\n        blockchainTokenDecimals: 18,\n        networkSetupDocLink: 'https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/',\n        supportedTokens: [\n          \"USDB\"\n        ], \n        decimalOverrides: {\n\n        },\n      },\n}\n\nexport default configurations;","import { Configuration } from './utils/interface';\nimport ethereum from './chainConfig/ethereum'\nimport maticMumbai from './chainConfig/maticMumbai'\nimport goerli from './chainConfig/goerli';\n\nconst configurations: { [env: string]: Configuration } = {\n  ...ethereum,\n  ...maticMumbai,\n  ...goerli\n};\n\nexport default configurations;\n\nexport const getSupportedChains = (): number[] =>\n  Object.keys(configurations).map((i) => Number(i));\n","import { BigNumber, Contract } from 'ethers';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { TransactionResponse } from '@ethersproject/providers';\n\nclass ERC20 {\n  protected contract: Contract;\n\n  symbol: string;\n  address: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(\n    sender: string,\n    recipient: string,\n    amount: BigNumber,\n  ): Promise<TransactionResponse> {\n    return this.contract.transferFro(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nexport const ABI = [\n  {\n    name: 'Approval',\n    type: 'event',\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'owner', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'spender', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'address', name: 'from', type: 'address' },\n      { indexed: true, internalType: 'address', name: 'to', type: 'address' },\n      { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transfer',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      { internalType: 'address', name: 'owner', type: 'address' },\n      { internalType: 'address', name: 'spender', type: 'address' },\n    ],\n    name: 'allowance',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'spender', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { internalType: 'address', name: 'sender', type: 'address' },\n      { internalType: 'address', name: 'recipient', type: 'address' },\n      { internalType: 'uint256', name: 'amount', type: 'uint256' },\n    ],\n    name: 'transferFrom',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","import IERC20 from \"./abi/IERC20.json\";\n\nimport ERC20 from \"./abi/ERC20.json\";\nimport { IABIS } from \"../../utils/interface\";\nimport StablecoinImpl from \"./abi/StablecoinImpl.json\";\nimport MultiSig from \"./abi/MultiSig.json\";\n\nconst abis: IABIS = {\n  IERC20,\n  StablecoinImpl,\n  MultiSig,\n  ERC20,\n};\n\nexport default abis;\n","import { BigNumber } from 'ethers';\nimport {\n  BasicState,\n  LockedState,\n  RewardEarned,\n  ApplicationState,\n  TransactionState,\n  DateInput,\n  SingleDateInput,\n  EthereumConfig,\n  BasicStateString,\n  PoolTokenRateState,\n  DebtPoolTokenRateState\n} from './interface';\n\nexport const DAY = 86400;\nexport const DAY_IN_MS = 86400000;\n\nexport const YEAR = 365 * 86400;\nexport const YEAR_IN_MS = YEAR * 1000;\n\nexport const MONTH = 31 * 24 * 60 * 60;\nexport const MONTH_IN_MS = MONTH * 1000;\n\nexport const WEEK = 7 * 86400;\nexport const WEEK_IN_MS = 7 * 86400000;\n\nexport const MAXTIME = 4 * 365 * 86400;\nexport const MAXTIME_IN_MS = 4 * 365 * 86400000;\n\nexport const LOADING_DEFAULT_BASIC_STATE: BasicState = {\n  isLoading: true,\n  value: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEFAULT_BASIC_STATE: BasicState = {\n  isLoading: false,\n  value: BigNumber.from(0)\n};\n\nexport const LOADING_DEBTPOOLTOKEN_RATE_STATE: DebtPoolTokenRateState = {\n  isLoading: true,\n  poolToken: BigNumber.from(0),\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEBTPOOLTOKEN_RATE_STATE: DebtPoolTokenRateState = {\n  isLoading: false,\n  arth: BigNumber.from(0),\n  poolToken: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_LOCKED_STATE: LockedState = {\n  isLoading: true,\n  lockedOn: BigNumber.from(0),\n  lockedUntil: BigNumber.from(0),\n  amountLocked: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_BASIC_STATE_STRING: BasicStateString = {\n  isLoading: true,\n  value: \"\",\n};\n\nexport const LOADING_POOLTOKEN_RATE_STATE: PoolTokenRateState = {\n  isLoading: true,\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0),\n  scallop: BigNumber.from(0),\n};\n\nexport const NON_LOADING_POOLTOKEN_RATE_STATE: PoolTokenRateState = {\n  isLoading: false,\n  arth: BigNumber.from(0),\n  usdc: BigNumber.from(0),\n  maha: BigNumber.from(0),\n  scallop: BigNumber.from(0),\n};\n\nexport const NON_LOADING_DEFAULT_BASIC_STATE_STRING: BasicStateString = {\n  isLoading: false,\n  value: \"0\",\n};\n\nexport const NON_LOADING_DEFAULT_LOCKED_STATE: LockedState = {\n  isLoading: false,\n  lockedOn: BigNumber.from(0),\n  lockedUntil: BigNumber.from(0),\n  amountLocked: BigNumber.from(0)\n};\n\nexport const LOADING_DEFAULT_REWARD_EARNED: RewardEarned = {\n  isLoading: true,\n  value: BigNumber.from(0)\n};\n\nexport const NON_LOADING_DEFAULT_REWARD_EARNED: RewardEarned = {\n  isLoading: false,\n  value: BigNumber.from(0)\n};\n\nexport const DEFAULT_ETHEREUM_CONFIG: EthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 1,\n  defaultGas: '6000000',\n  defaultGasPrice: '1000000000000',\n  ethereumNodeTimeout: 10000,\n};\n\nexport const DEFAULT_DATEINPUT_STATE: DateInput = {\n  startDate: new Date(),\n  endDate: new Date(\n    Date.now() % DAY_IN_MS === 0 ? Date.now() + WEEK_IN_MS + DAY_IN_MS : (Math.floor(Date.now() / DAY_IN_MS) * DAY_IN_MS) + WEEK_IN_MS + DAY_IN_MS\n  )\n};\n\nexport const DEFAULT_SINGLE_DATEINPUT_STATE: SingleDateInput = new Date(\n  Date.now() % DAY_IN_MS === 0 ? Date.now() + WEEK_IN_MS + DAY_IN_MS : (Math.floor(Date.now() / DAY_IN_MS) * DAY_IN_MS) + WEEK_IN_MS + DAY_IN_MS\n);\n\nexport const DECIMALS_18 = BigNumber.from(10).pow(18);\n\nexport const INITIAL_APP_STATE: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n  isVisible: false\n};\n\nexport const INITIAL_TRANSACTION_STATE: TransactionState = {};\n\nexport const BNZERO = BigNumber.from(0);\n\nexport const noOp = () => { };\n\nexport const handleDate = (date: any) => {\n  return new Date(date.setHours(0, 0, 0, 0));\n}\n\nexport const addDays = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + (DAY_IN_MS) * no));\n}\n\nexport const addWeeks = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + (WEEK_IN_MS) * no));\n}\n\nexport const addMonths = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + MONTH_IN_MS * no));\n}\n\nexport const addYears = (date: Date, no: number = 1) => {\n  return handleDate(new Date(date.getTime() + YEAR_IN_MS * no));\n}\n","import { ethers } from 'ethers';\n\nimport { Configuration } from './interface';\nimport { web3ProviderFrom } from './etherUtils';\n\nexport function getDefaultProvider(config: Configuration): ethers.providers.BaseProvider {\n  // @ts-ignore\n  const _window: { ethereum?: any, web3?: any } = window;\n\n  // Modern dapp browsers.\n  if (_window.ethereum) {\n    try {\n      // Request account access\n      // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      // App.YOUR_ADDRESS = accounts[0]\n    } catch (error) {\n      // User denied account access...\n      console.error(\"User denied account access\");\n    }\n\n    return new ethers.providers.Web3Provider(_window.ethereum);\n  }\n\n  // Legacy dapp browsers...\n  if (_window.web3) {\n    return new ethers.providers.Web3Provider(_window.web3.currentProvider);\n  }\n\n  // If no injected web3 instance is detected, fall back to backup node.\n  return new ethers.providers.JsonRpcProvider(config.defaultProvider);\n}\n\nexport function getGanacheProvider(config: Configuration): ethers.providers.JsonRpcProvider {\n  return new ethers.providers.JsonRpcProvider(\n    web3ProviderFrom(config.defaultProvider),\n    config.chainId\n  );\n}\n","import {BigNumber, Contract, ethers, Overrides} from 'ethers';\n\nimport ERC20 from './ERC20';\nimport ABIS from './deployments/abi';\nimport {configKeys, Configuration} from '../utils/interface';\nimport {getDefaultProvider} from '../utils/provider';\nimport Web3 from \"web3\";\n\n/**\n * An API module of ARTH contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class Protocol {\n  // @ts-ignore\n  myAccount: string;\n\n  // @ts-ignore\n  web3: Web3;\n\n  signer?: ethers.Signer;\n\n  config: {\n    [chainId: number]: Configuration;\n  };\n\n  contracts: {\n    [chainId: number]: { [name: string]: Contract };\n  };\n\n  // @ts-ignore\n  provider: ethers.providers.BaseProvider;\n\n  tokens: {\n    [chainId: number]: { [name: string]: ERC20 };\n  };\n\n  _activeNetwork: number;\n\n  constructor(cfg: { [chainId: number]: Configuration }, chainId: number) {\n    this._activeNetwork = chainId;\n    this.contracts = {};\n    this.tokens = {};\n    this.tokens = {};\n\n    try {\n      for (const [chainIdString, config] of Object.entries(cfg)) {\n        const chainId = Number(chainIdString);\n        const {deployments} = config;\n        this.provider = getDefaultProvider(config);\n        const networkConfig: { [name: string]: Contract } = {};\n        const tokens: { [name: string]: ERC20 } = {};\n\n        for (const [name, deployment] of Object.entries(deployments)) {\n          if (!deployment.abi) continue;\n          //to push all erc20 tokens in tokens array\n          if (cfg[chainId].supportedTokens.includes(name)) {\n            tokens[name] = new ERC20(\n              deployments[name].address,\n              this.provider,\n              name,\n              cfg[chainId].decimalOverrides[name] || 18,\n            );\n          }\n          //to push all others as contracts\n          networkConfig[name] = new Contract(\n            deployment.address,\n            ABIS[deployment.abi],\n            this.provider,\n          );\n\n        }\n        this.contracts[chainId] = networkConfig;\n        this.tokens[chainId] = tokens;\n      }\n    } catch (e) {\n      console.log('Error in contracts mapping', e);\n    }\n\n    this.config = cfg;\n  };\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  };\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    // @ts-ignore\n    const newProvider = new ethers.providers.Web3Provider(provider);\n    this.web3 = new Web3(provider);\n    this.provider = newProvider;\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n\n    for (const [chainId, contracts] of Object.entries(this.contracts)) {\n      for (const [name, contract] of Object.entries(contracts)) {\n        this.contracts[Number(chainId)][name] = contract.connect(this.signer);\n      }\n    }\n\n    for (const tokens of Object.values(this.tokens)) {\n      for (const token of Object.values(tokens)) {\n        if (token && token.address) token.connect(this.signer);\n      }\n    }\n  }\n\n  updateActiveNetwork(chainId: number, dispatch: any) {\n    this._activeNetwork = chainId;\n  }\n\n  getConfig(id: configKeys, chainId: number) {\n    return this.config[chainId][id];\n  }\n\n  gasOptions(gas: BigNumber = BigNumber.from('6000000')): Overrides {\n    const multiplied = Math.floor(gas.toNumber() * this.config[137]['gasLimitMultiplier']);\n    return {\n      gasLimit: BigNumber.from(multiplied),\n    };\n  };\n\n}\n","import {createAction} from '@reduxjs/toolkit';\n\nexport const updateChainId = createAction<{ chainId: number }>('app/updateChainId');\n\nexport const updateBlockchain = createAction<{chain: string}>('app/updateBlockchain')\n\nexport const updateAvailableChains = createAction<{ chains: Array<number> }>(\n  'app/updateAvailableChains',\n);\n","import {useCallback} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {getSupportedChains} from '../../config';\nimport {AppDispatch, AppState} from '../index';\n\nimport {updateBlockchain, updateChainId} from './actions';\n\n\nexport function useGetActiveBlockChain(): string {\n\n  const chain = useSelector((state: AppState) => {\n    return state.blockChain.active\n  })\n  return chain\n}\n\n\nexport function useHandleBlokchainChange(): (chain: string) => void{\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chain: string) => {\n      dispatch(\n        updateBlockchain({\n          chain\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n}\n\n/**\n * Returns the active chainId\n */\nexport function useGetActiveChainId(): number {\n  const updateId = useGetUpdateActiveChainId();\n  // const updateIds = useUpdateAvailableChains();\n  const id = useSelector((state: AppState) => {\n    return state.chainId.active;\n  });\n  const avaiableIds = getSupportedChains();\n  if (avaiableIds.includes(id)) {\n    return id;\n  } else {\n    const changedId = avaiableIds[0];\n    // updateIds(avaiableIds);\n    updateId(changedId);\n    return changedId;\n  }\n}\n\n/**\n * Used to update the active chainId\n * @param chainId to update the active chainId\n */\nexport function useGetUpdateActiveChainId(): (chainId: number) => void {\n  const chains = getSupportedChains();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chainId: number) => {\n      if (chains.includes(chainId)) {\n        dispatch(\n          updateChainId({\n            chainId: chainId,\n          }),\n        );\n      } else {\n        console.log(`chainId: ${chainId} is not supported on this app`);\n      }\n    },\n    [chains, dispatch],\n  );\n}\n\n/**\n * Used to update the avaiable Chains\n */\n/*export function useGetAvaiableChains(): Array<number> {\n  return useSelector((state: AppState) => {\n    return state.chains.availableNetworks;\n  });\n}*/\n\n/**\n * Used to add the new chain to the available chains array\n * @param chainId to add it to available chains array\n */\n\n/*export function useAddAvaiableChains(): (chainId: number) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const chains = useSelector((state: AppState) => {\n    return state.chains.availableNetworks;\n  });\n\n  return useCallback(\n    (chainId: number) => {\n      if (chains.includes(chainId)) {\n        console.log(`Trying to add the already present chainId ${chainId}`);\n        return;\n      } else {\n        const updatingChains = chains;\n        updatingChains.push(chainId);\n        dispatch(\n          updateAvailableChains({\n            chains: updatingChains,\n          }),\n        );\n      }\n    },\n    [chains, dispatch],\n  );\n}*/\n\n/*export function useUpdateAvailableChains(): (chainId: number[]) => void {\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (chainId: number[]) => {\n      dispatch(\n        updateAvailableChains({\n          chains: chainId,\n        }),\n      );\n    },\n    [dispatch],\n  );\n}*/\n","import {useWallet} from 'use-wallet';\nimport React, {createContext, useEffect, useState} from 'react';\nimport { useProvider } from 'wagmi'\nimport { useAccount } from 'wagmi'\n\nimport config from '../../config';\nimport {Protocol} from '../../protocol';\nimport {useGetActiveChainId} from '../../state/chains/hooks';\nimport {useDispatch} from \"react-redux\";\n\nexport interface ProtocolContext {\n  core: Protocol;\n}\n\n// @ts-ignore\nexport const Context = createContext<ProtocolContext>({core: null});\n\ninterface IProps {\n  children: any;\n}\n\nexport const ProtocolProvider = (props: IProps) => {\n  const {children} = props;\n  const chainId = useGetActiveChainId();\n  // const {ethereum} = useWallet();\n  const [core, setCore] = useState<Protocol>();\n  const dispatch = useDispatch();\n  const provider = useProvider()\n  const { address: account } = useAccount()\n\n  // console.log('ethereum', ethereum)\n  useEffect(() => {\n    if (!core && config) {\n      const newCore = new Protocol(config, chainId);\n      if (account) {\n        newCore.unlockWallet(window.ethereum, account);\n      }\n      setCore(newCore);\n    } else if (account && core) {\n      core.unlockWallet(window.ethereum, account);\n    }\n  }, [account, core, dispatch, window.ethereum, chainId]);\n\n  // @ts-ignore\n  return <Context.Provider value={{core}}>{children}</Context.Provider>;\n};\n","import { useContext } from 'react';\n\nimport { Context } from '../context/Provider';\n\nconst useCore = () => {\n  const { core } = useContext(Context);\n  return core;\n};\n\nexport default useCore;\n","import {createAction} from '@reduxjs/toolkit';\n\nimport {PopupContent} from '../../utils/interface';\n\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>(\n  'app/updateBlockNumber',\n);\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\n\nexport const loaderVisibile = createAction<{isVisible: boolean}>('app/updateLoader')\n","import {useWallet} from 'use-wallet';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useNetwork } from 'wagmi'\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal,loaderVisibile} from './actions';\nimport {AppState} from '../index';\nimport {PopupContent} from '../../utils/interface';\n\nexport function useBlockNumber(): number | undefined {\n  // const {chainId} = useWallet();\n  const { chain} = useNetwork()\n\n  const test = useSelector((state: AppState) => state)\n\n  console.log('useBlockNumber', chain?.id, test, test.application.blockNumber[chain?.id ?? -1])\n\n  return useSelector((state: AppState) => state.application.blockNumber[chain?.id ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// Returns a function that allows adding a popup.\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({content, key}));\n    },\n    [dispatch],\n  );\n}\n\n// Returns a function that allows removing a popup via its key.\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({key}));\n    },\n    [dispatch],\n  );\n}\n\n// Get the list of active popups.\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n\n// Get the loader\nexport function useGetLoader(): boolean {\n  return useSelector((state: AppState) => state.application.isVisible);\n}\n\n\nexport function useUpdateLoader(): (isVisible: boolean) => void {\n  const dispatch = useDispatch();\n  return useCallback((isVisible: boolean) => dispatch((loaderVisibile({isVisible}))), [dispatch]);\n}","import {createAction} from '@reduxjs/toolkit';\nimport { BigNumber } from 'ethers';\nimport { DashboardTxnDetails, TransactionDetails } from './reducer';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n  \n}\n\nexport const addTransaction = createAction<{\n  txIndex: number;\n  chainId: number;\n  hash: string;\n  // from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  creation?: TransactionDetails,\n  confirmation?: TransactionDetails,\n  execution?: TransactionDetails,\n  // approval?: { tokenAddress: string; spender: string };\n  // summary?: string;\n  // blockchain?: string;\n\n}>('transactions/addTransaction');\n\nexport const updateTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  from: string;\n  txDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  blockchain?: string;\n}>('transactions/updateTransaction')\n\n\nexport const clearAllTransactions = createAction<{ chainId: number }>(\n  'transactions/clearAllTransactions',\n);\n\nexport const finalizeTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  // receipt: SerializableTransactionReceipt;\n  txIndex: number;\n  from: string;\n  creation: TransactionDetails,\n  confirmation?: { [txHash: string]: TransactionDetails; },\n  execution?: { [txHash: string]: TransactionDetails; },\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: number;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n\n\nexport const saveTxn = createAction<{\n  txIndex: number;\n  hash: string;\n  chainId: number;\n\n}>('transactions/saveTxn')\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport useCore from \"./useCore\";\n\n\nconst useGetConfirmReq = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState('')\n\n  const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.numConfirmationsRequired()\n        setResponse(res.toNumber())\n  }, [chain]) \n\n  useEffect(() => {\n\n    if(core){\n        fetchData()\n            .catch((err) => setResponse(''))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetConfirmReq","import {TransactionResponse} from '@ethersproject/providers';\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport { useNetwork, useAccount } from 'wagmi'\nimport { BigNumber } from 'ethers';\n\nimport {useAddPopup} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {addTransaction, clearAllTransactions, updateTransaction} from './actions';\nimport {DashboardTxnDetails, newTxnState, TransactionDetails, TxnData} from './reducer';\nimport {useGetActiveChainId} from \"../chains/hooks\";\nimport useGetConfirmReq from '../../hooks/useGetConfirmReq';\n\n/**\n * Helper that can take a ethers library transaction response and\n * add it to the list of transactions.\n */\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  transDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n  // const {chainId, account} = useWallet();\n\n  const { address: account } = useAccount()\n  const dispatch = useDispatch<AppDispatch>();\n  const addPopup = useAddPopup();\n  const { chain} = useNetwork()\n  let confirmReq = useGetConfirmReq()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n \n  // chainId, creation, confirmation, execution, txDetail, txIndex\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      transDetail: {\n        _numConfirmations: any, \n        _typeOfTx: any, \n        _createdTime: any, \n        _executed: boolean, \n        _value: BigNumber, \n        _token: string, \n        txIndex: any, \n        _executedTime: any, \n        _to: string,\n      },\n      {\n        summary,\n        approval,\n      }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chain) return;\n\n      const {hash} = response;\n      \n      const {_numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = transDetail\n\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n\n      addPopup(\n        {\n          txn: {\n            hash,\n            loading: true,\n            success: false,\n            summary: summary,\n          },\n        },\n        hash,\n      );\n\n      // if(_numConfirmations < confirmReq){\n      //   dispatch(addTransaction({hash, txIndex, chainId, confirmation: {confirmedTime: Date.now(), from: account}, txDetail: {\n      //     _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      //   }}));\n      // }\n \n      dispatch(addTransaction({hash, txIndex, chainId, creation: {confirmedTime: Date.now(), from: account}, confirmation: {confirmedTime: Date.now(), from: account}, txDetail: {\n        _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      }}));\n    },\n    // eslint-disable-next-line\n    [dispatch, chain, account],\n  );\n}\n\nexport function useTransactionUpdater(): (\n  response: TransactionResponse,\n  transDetail: {\n    _numConfirmations: any, \n    _typeOfTx: any, \n    _createdTime: any, \n    _executed: boolean, \n    _value: BigNumber, \n    _token: string, \n    txIndex: any, \n    _executedTime: any, \n    _to: string,\n  },\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\n) => void {\n   // const {chainId, account} = useWallet();\n   const { chain} = useNetwork()\n   const { address: account } = useAccount()\n   let chainId\n\n   if(chain){\n     chainId = chain.id\n   }\n  const dispatch = useDispatch<AppDispatch>();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      transDetail: {\n        _numConfirmations: any, \n        _typeOfTx: any, \n        _createdTime: any, \n        _executed: boolean, \n        _value: BigNumber, \n        _token: string, \n        txIndex: any, \n        _executedTime: any, \n        _to: string,\n      },\n      {\n        summary,\n        approval,\n      }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\n    ) => {\n      if (!account) return;\n      if (!chain) return;\n\n      const {hash} = response;\n\n      const {_numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to} = transDetail\n\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n\n      addPopup(\n        {\n          txn: {\n            hash,\n            loading: true,\n            success: false,\n            summary: summary,\n          },\n        },\n        hash,\n      );\n\n      dispatch(updateTransaction({hash, from: account, chainId, approval, summary, txDetail: {\n        _numConfirmations, _typeOfTx, _createdTime, _executed, _value, _token, txIndex, _executedTime, _to\n      }}));\n    },\n    // eslint-disable-next-line\n    [dispatch, chainId, account],\n  );\n}\n\n// Returns all the transactions for the current chain.\nexport function useAllTransactions() {\n  // const {chainId} = useWallet();\n  const { chain} = useNetwork()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n  \n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n  console.log(\"useAllTransactions\", state)\n  // return {}\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) {\n    return false;\n  }\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\n// export function isTransactionRecent(tx: TransactionDetails): boolean {\n//   return new Date().getTime() - tx.addedTime < 86_400_000;\n// }\n\n// Returns whether a token has a pending approval transaction.\nexport function useHasPendingApproval(\n  tokenAddress: string | undefined,\n  spender: string | undefined,\n): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return (\n            approval.spender === spender &&\n            approval.tokenAddress === tokenAddress \n            // &&\n            // isTransactionRecent(tx)\n          );\n        }\n      }),\n    [allTransactions, spender, tokenAddress],\n  );\n}\n\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\n  const activeChainId = useGetActiveChainId()\n  console.log('activeChainId', activeChainId)\n  const dispatch = useDispatch<AppDispatch>();\n  return {\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({chainId: activeChainId})), [\n      activeChainId,\n      dispatch,\n    ]),\n  };\n}\n\n\n","/*!\n\n =========================================================\n * Material Dashboard React - v1.8.0 based on Material Dashboard - v1.2.0\n =========================================================\n\n * Product Page: http://www.creative-tim.com/product/material-dashboard-react\n * Copyright 2019 Creative Tim (http://www.creative-tim.com)\n * Licensed under MIT (https://github.com/creativetimofficial/material-dashboard-react/blob/master/LICENSE.md)\n\n =========================================================\n\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n */\n\n// ##############################\n// // // Function that converts from hex color to rgb color\n// // // Example: input = #9c27b0 => output = 156, 39, 176\n// // // Example: input = 9c27b0 => output = 156, 39, 176\n// // // Example: input = #999 => output = 153, 153, 153\n// // // Example: input = 999 => output = 153, 153, 153\n// #############################\nconst hexToRgb = input => {\n  input = input + \"\";\n  input = input.replace(\"#\", \"\");\n  let hexRegex = /[0-9A-Fa-f]/g;\n  if (!hexRegex.test(input) || (input.length !== 3 && input.length !== 6)) {\n    throw new Error(\"input is not a valid hex color.\");\n  }\n  if (input.length === 3) {\n    let first = input[0];\n    let second = input[1];\n    let last = input[2];\n    input = first + first + second + second + last + last;\n  }\n  input = input.toUpperCase(input);\n  let first = input[0] + input[1];\n  let second = input[2] + input[3];\n  let last = input[4] + input[5];\n  return (\n    parseInt(first, 16) +\n    \", \" +\n    parseInt(second, 16) +\n    \", \" +\n    parseInt(last, 16)\n  );\n};\n\n// ##############################\n// // // Variables - Styles that are used on more than one component\n// #############################\n\nconst drawerWidth = 220;\n\nconst transition = {\n  transition: \"all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)\"\n};\n\nconst container = {\n  padding: \"30px 15px\",\n  marginRight: \"auto\",\n  overflow: 'scroll',\n  height: '100%',\n  marginLeft: \"auto\"\n};\n\nconst defaultFont = {\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  fontWeight: \"300\",\n  lineHeight: \"1.5em\"\n};\n\nconst primaryColor = [\"#6c5fc7\", \"#5a4eb2\", \"#3e319b\", \"#af2cc5\"];\nconst warningColor = [\"#ff9800\", \"#ffa726\", \"#fb8c00\", \"#ffa21a\"];\nconst dangerColor = [\"#f44336\", \"#ef5350\", \"#e53935\", \"#f55a4e\"];\nconst successColor = [\"#4caf50\", \"#66bb6a\", \"#43a047\", \"#5cb860\"];\nconst infoColor = [\"#00acc1\", \"#26c6da\", \"#00acc1\", \"#00d3ee\"];\nconst roseColor = [\"#e91e63\", \"#ec407a\", \"#d81b60\", \"#eb3573\"];\nconst grayColor = [\n  \"#999\",\n  \"#777\",\n  \"#3C4858\",\n  \"#AAAAAA\",\n  \"#D2D2D2\",\n  \"#DDD\",\n  \"#b4b4b4\",\n  \"#555555\",\n  \"#333\",\n  \"#a9afbb\",\n  \"#eee\",\n  \"#e7e7e7\"\n];\nconst blackColor = \"#000\";\nconst whiteColor = \"#FFF\";\n\nconst boxShadow = {\n  boxShadow:\n    \"0 10px 30px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 4px 25px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\"\n};\n\nconst primaryBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(primaryColor[0]) +\n    \",.4)\"\n};\nconst infoBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(infoColor[0]) +\n    \",.4)\"\n};\nconst successBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(successColor[0]) +\n    \",.4)\"\n};\nconst warningBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(warningColor[0]) +\n    \",.4)\"\n};\nconst dangerBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(dangerColor[0]) +\n    \",.4)\"\n};\nconst roseBoxShadow = {\n  boxShadow:\n    \"0 4px 20px 0 rgba(\" +\n    hexToRgb(blackColor) +\n    \",.14), 0 7px 10px -5px rgba(\" +\n    hexToRgb(roseColor[0]) +\n    \",.4)\"\n};\n\nconst warningCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + warningColor[1] + \", \" + warningColor[2] + \")\",\n  ...warningBoxShadow\n};\nconst successCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + successColor[1] + \", \" + successColor[2] + \")\",\n  ...successBoxShadow\n};\nconst dangerCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + dangerColor[1] + \", \" + dangerColor[2] + \")\",\n  ...dangerBoxShadow\n};\nconst infoCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + infoColor[1] + \", \" + infoColor[2] + \")\",\n  ...infoBoxShadow\n};\nconst primaryCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + primaryColor[1] + \", \" + primaryColor[2] + \")\",\n  ...primaryBoxShadow\n};\nconst roseCardHeader = {\n  background:\n    \"linear-gradient(60deg, \" + roseColor[1] + \", \" + roseColor[2] + \")\",\n  ...roseBoxShadow\n};\n\nconst cardActions = {\n  margin: \"0 20px 10px\",\n  paddingTop: \"10px\",\n  borderTop: \"1px solid \" + grayColor[10],\n  height: \"auto\",\n  ...defaultFont\n};\n\nconst cardHeader = {\n  margin: \"-20px 15px 0\",\n  borderRadius: \"3px\",\n  padding: \"15px\"\n};\n\nconst card = {\n  display: \"inline-block\",\n  position: \"relative\",\n  width: \"100%\",\n  margin: \"25px 0\",\n  boxShadow: \"0 1px 4px 0 rgba(\" + hexToRgb(blackColor) + \", 0.14)\",\n  borderRadius: \"3px\",\n  color: \"rgba(\" + hexToRgb(blackColor) + \", 0.87)\",\n  background: whiteColor\n};\n\nconst defaultBoxShadow = {\n  border: \"0\",\n  borderRadius: \"3px\",\n  boxShadow:\n    \"0 10px 20px -12px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.42), 0 3px 20px 0px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.12), 0 8px 10px -5px rgba(\" +\n    hexToRgb(blackColor) +\n    \", 0.2)\",\n  padding: \"10px 0\",\n  transition: \"all 150ms ease 0s\"\n};\n\nconst title = {\n  color: grayColor[2],\n  textDecoration: \"none\",\n  fontWeight: \"300\",\n  marginTop: \"30px\",\n  marginBottom: \"25px\",\n  minHeight: \"32px\",\n  fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n  \"& small\": {\n    color: grayColor[1],\n    fontWeight: \"400\",\n    lineHeight: \"1\"\n  }\n};\n\nconst cardTitle = {\n  ...title,\n  marginTop: \"0\",\n  marginBottom: \"3px\",\n  minHeight: \"auto\",\n  \"& a\": {\n    ...title,\n    marginTop: \".625rem\",\n    marginBottom: \"0.75rem\",\n    minHeight: \"auto\"\n  }\n};\n\nconst cardSubtitle = {\n  marginTop: \"-.375rem\"\n};\n\nconst cardLink = {\n  \"& + $cardLink\": {\n    marginLeft: \"1.25rem\"\n  }\n};\n\nexport {\n  hexToRgb,\n  //variables\n  drawerWidth,\n  transition,\n  container,\n  boxShadow,\n  card,\n  defaultFont,\n  primaryColor,\n  warningColor,\n  dangerColor,\n  successColor,\n  infoColor,\n  roseColor,\n  grayColor,\n  blackColor,\n  whiteColor,\n  primaryBoxShadow,\n  infoBoxShadow,\n  successBoxShadow,\n  warningBoxShadow,\n  dangerBoxShadow,\n  roseBoxShadow,\n  warningCardHeader,\n  successCardHeader,\n  dangerCardHeader,\n  infoCardHeader,\n  primaryCardHeader,\n  roseCardHeader,\n  cardActions,\n  cardHeader,\n  defaultBoxShadow,\n  title,\n  cardTitle,\n  cardSubtitle,\n  cardLink\n};\n","import {\n      drawerWidth,\n      transition,\n      container\n    } from \"./material-dashboard-react.js\";\n    \n    const appStyle = theme => ({\n      wrapper: {\n        position: \"relative\",\n        top: \"0\",\n        height: \"100%\"\n      },\n      mainPanel: {\n        [theme.breakpoints.up(\"md\")]: {\n          width: `calc(100% - ${drawerWidth}px)`\n        },\n        overflow: \"auto\",\n        position: \"relative\",\n        float: \"right\",\n        ...transition,\n        height: \"100%\",\n        width: \"100%\",\n        overflowScrolling: \"touch\"\n      },\n      content: {\n        position: 'relative',\n        // marginTop: \"70px\",\n        // padding: \"30px 0\",\n        height: '100%',\n        // minHeight: \"calc(100vh - 123px)\"\n      },\n      container,\n      map: {\n        marginTop: \"70px\"\n      }\n    });\n    \n    export default appStyle;\n    ","import {\n  drawerWidth,\n  transition,\n  defaultFont,\n  whiteColor,\n  grayColor,\n  blackColor,\n  hexToRgb\n} from \"../material-dashboard-react.js\";\n\nconst sidebarStyle = theme => ({\n  drawerPaper: {\n    border: \"none\",\n    position: \"fixed\",\n    top: \"0\",\n    backgroundColor: '#2d004c',\n    bottom: \"0\",\n    left: \"0\",\n    zIndex: \"1\",\n    width: drawerWidth,\n    [theme.breakpoints.up(\"md\")]: {\n      width: drawerWidth,\n      position: \"fixed\",\n      height: \"100%\"\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      width: drawerWidth,\n      position: \"fixed\",\n      display: \"block\",\n      top: \"0\",\n      height: \"100vh\",\n      right: \"0\",\n      left: \"auto\",\n      zIndex: \"1032\",\n      visibility: \"visible\",\n      overflowY: \"visible\",\n      borderTop: \"none\",\n      textAlign: \"left\",\n      paddingRight: \"0px\",\n      paddingLeft: \"0\",\n      transform: `translate3d(${drawerWidth}px, 0, 0)`,\n      ...transition\n    }\n  },\n  logo: {\n    position: \"relative\",\n    padding: \"15px 15px\",\n    zIndex: \"4\",\n    \"&:after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      bottom: \"0\",\n\n      height: \"1px\",\n      right: \"15px\",\n      width: \"calc(100% - 30px)\",\n      backgroundColor: \"rgba(\" + hexToRgb(grayColor[6]) + \", 0.3)\"\n    }\n  },\n  logoLink: {\n    ...defaultFont,\n    padding: \"5px 0\",\n    display: \"block\",\n    fontSize: \"25px\",\n    fontWeight: \"200\",\n    textAlign: 'center',\n    lineHeight: \"30px\",\n    textDecoration: \"none\",\n    backgroundColor: \"transparent\",\n    \"&,&:hover\": {\n      color: whiteColor\n    }\n  },\n  logoLinkRTL: {\n    textAlign: \"right\"\n  },\n  logoImage: {\n    width: \"30px\",\n    display: \"inline-block\",\n    maxHeight: \"30px\",\n    marginLeft: \"10px\",\n    marginRight: \"15px\"\n  },\n  img: {\n    width: \"35px\",\n    top: \"22px\",\n    position: \"absolute\",\n    verticalAlign: \"middle\",\n    border: \"0\"\n  },\n  background: {\n    position: \"absolute\",\n    zIndex: \"1\",\n    height: \"100%\",\n    width: \"100%\",\n    display: \"block\",\n    top: \"0\",\n    left: \"0\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center center\",\n    \"&:after\": {\n      position: \"absolute\",\n      zIndex: \"3\",\n      width: \"100%\",\n      height: \"100%\",\n      content: '\"\"',\n      display: \"block\",\n      background: blackColor,\n      opacity: \".8\"\n    }\n  },\n  list: {\n    marginTop: \"20px\",\n    paddingLeft: \"0\",\n    paddingTop: \"0\",\n    paddingBottom: \"0\",\n    marginBottom: \"0\",\n    listStyle: \"none\",\n    position: \"unset\"\n  },\n  item: {\n    position: \"relative\",\n    display: \"block\",\n    textDecoration: \"none\",\n    color: 'rgb(149, 134, 165)',\n    \"&:hover,&:focus,&:visited,&.active\": {\n      color: '#fff'\n    }\n  },\n  itemLink: {\n    width: \"auto\",\n    transition: \"all 300ms linear\",\n    margin: \"0\",\n    borderRadius: \"3px\",\n    position: \"relative\",\n    display: \"block\",\n    padding: \"10px\",\n    backgroundColor: \"transparent\",\n    ...defaultFont\n  },\n  itemIcon: {\n    width: \"24px\",\n    height: \"30px\",\n    fontSize: \"24px\",\n    lineHeight: \"30px\",\n    float: \"left\",\n    margin: \"0 15px\",\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    // color: 'rgb(149, 134, 165)'\n  },\n  itemText: {\n    ...defaultFont,\n    margin: \"0\",\n    lineHeight: \"30px\",\n    fontWeight: 'bold',\n    fontSize: \"14px\",\n    // color: 'rgb(149, 134, 165)'\n  },\n  sidebarWrapper: {\n    position: \"relative\",\n    height: \"calc(100vh - 75px)\",\n    overflow: \"auto\",\n    width: \"220px\",\n    zIndex: \"4\",\n    overflowScrolling: \"touch\"\n  },\n  fab: {\n    position: 'fixed',\n    bottom: 15,\n    right: 15\n  }\n});\n\nexport default sidebarStyle;\n","import { makeStyles } from \"@material-ui/core/styles\"\nimport { NavLink } from \"react-router-dom\"\nimport classNames from \"classnames\"\nimport Divider from '@material-ui/core/Divider'\nimport Drawer from \"@material-ui/core/Drawer\"\nimport Fab from '@material-ui/core/Fab'\nimport Hidden from \"@material-ui/core/Hidden\"\nimport Icon from \"@material-ui/core/Icon\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport MenuIcon from '@material-ui/icons/Menu'\nimport React from \"react\"\nimport styles from \"../../styles/components/sidebarStyle.js\"\n\n\n// @ts-ignore\nconst useStyles = makeStyles(styles)\n\n\nexport default function Sidebar () {\n  const [state, setState] = React.useState<boolean>(false)\n\n  const toggleDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) return\n    setState(open)\n  }\n\n\n  const classes = useStyles()\n  // verifies if routeName is the one active (in browser input)\n  function activeRoute(routeName: any) {\n    if (!routeName) return false\n    return window.location.href.indexOf(routeName.url) > -1 ? true : false\n  }\n\n  const routes = [\n    {\n      url: '/mint',\n      icon: 'construction',\n      name: 'Mint token'\n    },\n    {\n      url: '/burn',\n      icon: 'whatshot',\n      name: 'Burn token'\n    },\n    {\n      url: '/freeze',\n      icon: 'ac_unit',\n      name: 'Freeze'\n    },\n    {\n      url: '/admin',\n      icon: 'supervisor_account',\n      name: 'Admin'\n    },\n    // {\n    //   url: '/statistics',\n    //   icon: 'signal_cellular_alt',\n    //   name: 'Statistics'\n    // },\n  ]\n\n  const links = (\n    <List className={classes.list}>\n      {\n        routes.map(r => {\n          return (\n            <NavLink key={r.name} to={r.url} className={({isActive}) => isActive ? `active ${classes.item}` : classes.item}>\n              <ListItem button className={classes.itemLink}>\n                <Icon className={classNames(classes.itemIcon)}>{r.icon}</Icon>\n                <ListItemText primary={r.name} className={classNames(classes.itemText)} disableTypography={true} />\n              </ListItem>\n            </NavLink>\n          )\n        })\n      }\n    </List>\n  )\n\n  var brand = (\n    <div className={classes.logo}>\n      <div className={classNames(classes.logoLink)}>Stablecoin Dashboard</div>\n    </div>\n  )\n\n  return (\n    <div>\n      <Hidden mdUp implementation=\"css\">\n        <Fab\n          size=\"small\"\n          color=\"secondary\" aria-label=\"add\"\n          style={{ outline: 'none', position: 'fixed', bottom: 15, right: 15, zIndex: 100 }}>\n          <MenuIcon onClick={toggleDrawer(true)} />\n        </Fab>\n\n        <Drawer\n          variant=\"temporary\"\n          open={state}\n          anchor={\"right\"}\n          classes={{ paper: classNames(classes.drawerPaper) }}\n          onClose={toggleDrawer(false)}\n          >\n          {brand}\n          <Divider />\n          <div className={classes.sidebarWrapper}>{links}</div>\n        </Drawer>\n      </Hidden>\n\n      <Hidden smDown implementation=\"css\">\n        <Drawer\n          anchor={\"left\"}\n          variant=\"permanent\"\n          open\n          classes={{ paper: classNames(classes.drawerPaper) }}>\n          {brand}\n          <Divider />\n          <div className={classes.sidebarWrapper}>{links}</div>\n        </Drawer>\n      </Hidden>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Outlet } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useWallet } from \"use-wallet\";\nimport {Button, MenuItem, Snackbar, TextField} from '@material-ui/core'\nimport { useAccount, useSwitchNetwork, useNetwork } from 'wagmi'\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nimport styles from '../../styles/adminStyle.js'\nimport Sidebar from './Sidebar';\nimport { noOp } from '../../utils/constants';\nimport { truncateMiddle } from '../../utils/index';\nimport Navigation from '../../navigation';\nimport { useGetActiveBlockChain, useHandleBlokchainChange } from '../../state/chains/hooks';\n\nexport const chains = [\n  {\n    label: 'MaticMumbai',\n    chainID: 'MaticMumbai'\n  },\n  // {\n  //   label: \"Neil\",\n  //   chainID: 'Neil',\n  // }\n]\n\n// @ts-ignore\nconst useStyles = makeStyles(styles);\nfunction Dashbaord() {\n\n  const { address: account, isConnecting, isDisconnected, connector } = useAccount()\n  const { data, error, isLoading, pendingChainId, switchNetwork, status, isSuccess } = useSwitchNetwork()\n  const { chain, chains,  } = useNetwork()\n  const { isConnected } = useAccount()\n\n  console.log('isConnected', isConnected)\n\n  console.log('connector', connector)\n  console.log('chain', chain)\n\n  // useEffect(() => {\n  //   connectWalletOnPageLoad()\n  // },[])\n\n  // const { connect, connector, account } = useWallet();\n  // const { tronLink } = window;\n  // const chain = useGetActiveBlockChain()\n  // const setChain = useHandleBlokchainChange()\n\n  const [connectMetamask, setConnectMetamask] = useState(true)\n\n  // const connectWalletOnPageLoad = async () => {\n  //   if (localStorage?.getItem('isWalletConnected') === 'true') {\n  //     try {\n  //       await connect('injected')\n  //     } catch (ex) {\n  //       console.log(ex)\n  //     }\n  //   }\n  // }\n\n  // const handleChainChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   setChain(event.target.value);\n\n  // };\n\n  return (\n \n    <div style={{padding: '15px 15px 40px 0'}}>\n      <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n        <ConnectButton />\n      </div>\n\n      {\n        !account && \n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n            open={connectMetamask}\n            onClose={() => setConnectMetamask(false)}\n            message=\"Please connect to the Metamask on MumbaiTestnet\"\n          />\n      }\n      {/* <div style={{padding: '28px', display: 'flex', justifyContent: 'flex-end'}}>\n        <TextField\n          required\n          id=\"standard-select-currency\"\n          select\n          label=\"Chain\"\n          value={chain}\n          onChange={handleChainChange}\n          // fullWidth\n          variant=\"outlined\"\n          size='small'\n          style={{marginRight: '15px', width: '150px'}}\n        >\n          {chains.map((option) => (\n            <MenuItem alignItems={\"center\"} key={option.chainID} value={option.label}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        {\n          !account ? (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={connector === \"injected\" ? noOp : () => {\n                connect('injected')\n                  .then(() => {\n                    console.log('Connected', account)                  \n                    localStorage.setItem('isWalletConnected', 'true')\n                    localStorage.removeItem('disconnectWallet')\n\n                  })\n                  .catch((e) => {\n                    console.log('Connection error', e)\n                  })\n              }}\n            >\n              Connect Wallet\n            </Button>\n            \n          ) :\n          (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => console.log('account address click')}\n            >\n              {chain == 'MaticMumbai' ?  \n                truncateMiddle(account, 12, '...') : \n                window.tronWeb.defaultAddress.base58.slice(0, 3) + '...' + window.tronWeb.defaultAddress.base58.slice(31, 34)\n              }\n            </Button>\n          )\n        }\n      </div> */}\n\n      <Sidebar />\n      <Outlet />\n    </div>\n\n  )\n}\n\nexport default Dashbaord","\n\nfunction Textfield(props: any) {\n  const {text, color, fontSize, fontWeight,className} = props\n  return (\n    <div \n      className={className}\n      style={{\n            color, fontSize, fontWeight\n      }}>\n      {text}\n    </div>\n  )\n}\n\nexport default Textfield","const formatErrorMessage = (message: string): string => {\n  message = message.toLowerCase();\n\n  if (message.includes('cannot add to expired lock. withdraw')) return 'Cannot add to an expired lock. You need to Withdraw.';\n  if (message.includes(`withdraw old tokens first`)) return 'Withdraw old tokens first.';\n  if (message.includes('can only lock until time in the future')) return `Can only lock for future unlock time.`;\n  if (message.includes('voting lock can be 4 years max')) return `Voting lock cannot be greater than 4 Years.`;\n  if (message.includes('no existing lock found')) return 'No lock found.';\n  if (message.includes('nothing is locked')) return 'Nothing is locked.';\n  if (message.includes('can only increase lock duration')) return 'Can only increase the lock duration.';\n  if (message.includes('lock expired')) return 'The lock has expired.';\n  if (message.includes(\"the lock didn't expire\")) return 'The lock did not expire.';\n  if (message.includes(\"fallback not initiated\")) return 'Emergency withdraw is not enabled.';\n  if (message.includes(\"amount < left\")) return 'Amount has to be more than the current rewards. Else try after the reward period has finished.';\n  if (message.includes(\"transaction is already confirmed\")) return \"Transaction is already confirmed by you.\";\n  if (message.includes(\"owner does not exist\")) return \"Not owner\";\n\n\n  // Fail safes like overflows etc.;\n  return 'Error Occured, Please try again later.';\n};\n\nexport default formatErrorMessage;\n","import { ethers } from 'ethers';\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { useNetwork } from 'wagmi'\nimport { useAddPopup } from '../../state/application/hooks';\nimport formatErrorMessage from '../../utils/formatErrorMessage';\nimport MultiSig from \"../../protocol/deployments/abi/MultiSig.json\"\n\nimport useCore from \"../useCore\"\n\n// confirmation hooks = required // current confirmation count of a txn\n// is transaction confirmed(true/false) // get addresses who confirmed the transaction\n\nexport const useGetRequiredCount = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<number>(0)\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.required()\n        setResponse(res.toNumber())\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    console.log('useGetRequiredCount err', err)\n                    setResponse(0)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetConfirmationCount = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n\n    const fetchData = async (txnId: number) => {\n        const contract = core.contracts[`${chain?.id || core._activeNetwork}`].MultiSig\n\n        const res = await contract.getConfirmationCount(txnId);\n        console.log('useGetConfirmationCount', res);\n        let count = res.toNumber();\n\n        return count\n\n    }\n\n    return fetchData\n}\n\n\nexport const useIsTxnConfirmed = (txnId: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<boolean>(false)\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.isConfirmed(txnId)\n        setResponse(res)\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse(false)\n                    console.log('useIsTxnConfirmed err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetConfirmaByAddresses = (txnId: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.getConfirmations(txnId)\n        setResponse(res)\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse([])\n                    console.log('useGetConfirmaByAddresses err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\n// get owner hooks\n\nexport const useGetOwners = () => {\n    const core = useCore();\n\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id || core._activeNetwork}`].MultiSig;\n        const res = await contract.getOwners()\n        setResponse(res)\n    }, [chain, core._activeNetwork])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    console.log('useGetOwners err', err)\n                    setResponse([])\n                })\n        }\n    }, [fetchData, chain, core._activeNetwork])\n\n    return response\n}\n\n// Transaction count and get all transactions\n\nexport const useGetTransactionCount = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<number>(0)\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const res = await contract.transactionCount()\n        setResponse(res.toNumber())\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse(0)\n                    console.log('useGetTransactionCount err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetTransactions = (count: number) => {\n    const core = useCore();\n    const { chain } = useNetwork()\n    const [response, setResponse] = useState<any[]>([])\n\n    const fetchData = useCallback(async () => {\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        setResponse([])\n        for (let i = 0; i < count; i++) {\n            const res = await contract.transactions(i)\n            setResponse(prev => [...prev, res])\n        }\n\n    }, [chain])\n\n    useEffect(() => {\n        if (core) {\n            fetchData()\n                .catch((err) => {\n                    setResponse([])\n                    console.log('useGetTransaction err', err)\n                })\n        }\n    }, [fetchData])\n\n    return response\n}\n\nexport const useGetSingleTransaction = () => {\n    const core = useCore();\n    const { chain } = useNetwork()\n\n\n    const sendRes = async (txId: number) => {\n\n        const contract = core.contracts[`${chain?.id}`].MultiSig\n        const res = await contract.transactions(txId)\n        console.log(\"useGetSingleTransaction res\", res.executed)\n        let executed = res.executed\n\n        return executed\n    }\n\n    return sendRes\n}\n\nexport const useGetTxnFromHash = () => {\n    const core = useCore();\n    const { provider } = core\n\n    // const [test, setTest] = useState<any>()\n    let data, from, blockNumber\n    let toAdrs, val, token, typeOfTxn, timestamp, returnRes\n\n    const sendRes = (hash: string) => {\n\n        const testFn = async () => {\n\n            const res = await provider.getTransaction(hash)\n            console.log('useGetTxnFromHash res', res.data)\n            data = res.data\n            from = res.from\n            blockNumber = res.blockNumber\n\n            token = data.slice(10, 74)\n            typeOfTxn = data.slice(266, 274)\n            toAdrs = data.slice(274, 338)\n            val = data.slice(338, 402)\n\n            const methodID = data?.slice(0, 10)\n\n            // if(blockNumber)\n            //     {\n            //         const res = await provider.getBlock(blockNumber)\n            //         timestamp = res.timestamp\n\n            //         returnRes = {\n            //             methodID,\n            //             token: `0x${token.slice(24, token.length)}`,\n            //             typeOfTxn: typeOfTxn == \"40c10f19\" ? \"Mint\" : \"Burn\",\n            //             toAdrs: `0x${toAdrs.slice(24, toAdrs.length)}`,\n            //             val: ethers.utils.formatEther(`0x${val}`),\n            //             from,\n            //             timestamp\n            //         }\n            //     }\n\n            const blockres = await provider.getBlock(blockNumber)\n            timestamp = blockres.timestamp\n\n            returnRes = {\n                methodID,\n                token: `0x${token.slice(24, token.length)}`,\n                typeOfTxn: typeOfTxn == \"40c10f19\" ? \"Mint\" : \"Burn\",\n                toAdrs: `0x${toAdrs.slice(24, toAdrs.length)}`,\n                val: ethers.utils.formatEther(`0x${val}`),\n                from,\n                timestamp\n            }\n\n            return returnRes\n\n        }\n\n        let test = testFn()\n        console.log(\"useGetTxnFromHash final\", test)\n\n        return returnRes\n        // console.log('getTxnFromHash res', ethers.utils.formatEther(`0x${'0000000000000000000000000000000000000000000000008ac7230489e80000'}`))\n\n    }\n\n    return sendRes\n}\n\n\n// Add Owner / Remove Owner / Replace owner / ChangeRequirement\n\n\nexport const useAddOwner = (address: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.addOwner(address)\n\n            const txresult = await res.wait()\n            console.log('useAddOwner txresult', txresult)\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'New owner Added'\n                    }\n                })\n            }\n        } catch (e: any) {\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [address, chain])\n}\n\nexport const useRemoveOwner = (address: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.removeOwner(address)\n\n            const txresult = await res.wait()\n            console.log('useRemoveOwner txresult', txresult)\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useRemoveOwner error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [address, chain])\n}\n\nexport const useReplaceOwner = (oldAddress: string, newAddress: string) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.replaceOwner(oldAddress, newAddress)\n\n            const txresult = await res.wait()\n            console.log('useReplaceOwner txresult', txresult)\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useReplaceOwner error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [oldAddress, newAddress, chain])\n}\n\nexport const useChangeRequirement = (requiredCount: number) => {\n    const core = useCore()\n    const { chain } = useNetwork()\n    const addPopup = useAddPopup()\n\n    return useCallback(async () => {\n        try {\n            const contract = await core.contracts[`${chain?.id}`].MultiSig\n            const res = await contract.changeRequirement(requiredCount)\n\n            const txresult = await res.wait()\n            console.log('useChangeRequirement txresult', txresult)\n\n            if (txresult?.status == 1) {\n                addPopup({\n                    txn: {\n                        hash: txresult.transactionHash,\n                        success: true,\n                        summary: 'Owner removed'\n                    }\n                })\n            }\n        } catch (e: any) {\n            console.log('useChangeRequirement error', e)\n            addPopup({\n                error: {\n                    message: formatErrorMessage(e?.data?.message || e?.message),\n                    stack: e?.stack,\n                }\n            });\n        }\n    }, [requiredCount, chain])\n}\n","import { BigNumber } from 'ethers';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\n\nexport function getBalance(\n  balance: BigNumber,\n  decimals = 18\n): string {\n  try {\n    return formatUnits(balance, decimals);\n  } catch (err) {\n    return '0';\n  }\n};\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 3\n): string => {\n  try {\n    const formattedBalance: string = getBalance(balance, decimals);\n    const decimalsPointIndex = formattedBalance.indexOf('.');\n    if (decimalsPointIndex === -1) return formattedBalance;\n    return (\n      formattedBalance.slice(0, decimalsPointIndex) +\n      '.' +\n      formattedBalance.slice(decimalsPointIndex + 1, decimalsPointIndex + 1 + fractionDigits)\n    );\n  } catch (error) {\n    return '0';\n  }\n};\n\nexport const formatToBN = (\n  value: number | string,\n  decimals = 18\n): BigNumber => {\n  try {\n    const [beforeDecimals, afterDecimal] = `${value}`.split('.');\n\n    const beforeDecimalsPrecisionText = beforeDecimals?.slice(0, 18) || '0';\n    const afterDecimalsPrecisionText = afterDecimal?.slice(0, decimals) || '0';\n    const fixedPrecisionValue = `${beforeDecimalsPrecisionText}.${afterDecimalsPrecisionText}`;\n\n    return BigNumber.from(parseUnits(`${fixedPrecisionValue}`, decimals));\n  } catch (error) {\n    return BigNumber.from('0');\n  }\n};\n","import {BigNumber, Contract, utils} from 'ethers';\nimport {useCallback, useEffect, useState} from 'react';\nimport { useAccount } from 'wagmi'\n\nimport ABIS from '../protocol/deployments/abi';\nimport {useWallet} from 'use-wallet';\nimport useCore from './useCore';\n\nexport type TokenDetailsState = {\n  isLoading: boolean,\n  value: {\n    symbol: string;\n    decimals: number;\n    balance: BigNumber;\n    totalSupply: BigNumber;\n  }\n}\n\nconst LOADING_DEFAULT_BASIC_STATE = {\n  isLoading: true,\n  value: {\n    symbol: '',\n    decimals: 18,\n    balance: BigNumber.from(0),\n    totalSupply: BigNumber.from(0)\n  }\n}\n\nconst NON_LOADING_DEFAULT_BASIC_STATE = {\n  isLoading: false,\n  value: {\n    symbol: '',\n    decimals: 18,\n    balance: BigNumber.from(0),\n    totalSupply: BigNumber.from(0)\n  }\n}\n\nconst useGetTokenDetails = () => {\n  // const [fetchingDetails, setFetchingDetails] = useState<boolean>(false);\n  const [tokenDetails, setTokenDetails] = useState<TokenDetailsState>(LOADING_DEFAULT_BASIC_STATE);\n\n  const core = useCore();\n  // const {myAccount: account, provider } = core\n\n  const { address: account } = useAccount()\n\n\n  const fetch = async (address: string) => {\n    if (!utils.isAddress(address) || !account) {\n      setTokenDetails(NON_LOADING_DEFAULT_BASIC_STATE);\n      console.log(\"useGetTokenDetails if\")\n    } else {\n\n      // setFetchingDetails(true);\n      // console.log('provider', core.provider)\n      const contract = new Contract(address, ABIS.ERC20, core.signer);\n      const symbol = await contract.symbol();\n      const decimals = await contract.decimals();\n      const balance = await contract.balanceOf(account);\n      const totalSupply = await contract.totalSupply()\n\n      // console.log(\"useGetTokenDetails else\", symbol, decimals, balance, totalSupply)\n\n      // setFetchingDetails(false);\n      setTokenDetails({isLoading: false, value: {symbol, decimals: decimals, balance, totalSupply}});\n      return({isLoading: false, value: {symbol, decimals: decimals, balance, totalSupply}})\n    }\n  }\n\n  // useEffect(() => {\n  //   if (core && address) {\n  //     fetch().catch((err) => {\n  //       setFetchingDetails(false);\n  //       setTokenDetails(NON_LOADING_DEFAULT_BASIC_STATE);\n  //       console.error(\n  //         `Failed to fetch token details of ${address} for ${address}: ${err.stack} `,\n  //       );\n  //     });\n  //   } else {\n  //     setFetchingDetails(false);\n  //     setTokenDetails(NON_LOADING_DEFAULT_BASIC_STATE);\n  //   }\n  // }, [address, core, fetch]);\n\n  return {fetch, tokenDetails};\n};\n\nexport default useGetTokenDetails;\n","import { BigNumber, ethers } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionAdder } from \"../state/transactions/hooks\";\nimport { truncateMiddle } from \"../utils\";\nimport { formatToBN, getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport { AppDispatch, AppState } from \"../state/index\";\nimport useCore from \"./useCore\";\nimport { saveTxn } from \"../state/transactions/actions\";\nimport StablecoinImpl from \"../protocol/deployments/abi/StablecoinImpl.json\";\nimport MultiSig from \"../protocol/deployments/abi/MultiSig.json\";\nimport useGetTokenDetails from \"./useGetTokenDetails\";\nimport { useGetActiveChainId } from \"../state/chains/hooks\";\n\nconst useMultiSig = (\n  typeOfTx: string,\n  to: string,\n  amount: string,\n  destinationAdrs: string\n) => {\n  const core = useCore();\n  const { _activeNetwork } = core;\n  const updateLoader = useUpdateLoader();\n  const activeID = useGetActiveChainId();\n  console.log(\"activeID\", activeID);\n\n  const { chain } = useNetwork();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n  const { fetch } = useGetTokenDetails();\n\n  return useCallback(\n    async (onSuccess: () => void, onFailure: () => void): Promise<void> => {\n      try {\n        // typeOfTx // mint, burnFrom, addOwner, removeOwner, replaceOwner, changeRequirement\n\n        let iface;\n        let data;\n\n        if (typeOfTx == \"mint\" || typeOfTx == \"burn\") {\n          iface = new ethers.utils.Interface(StablecoinImpl);\n          data = iface.encodeFunctionData(typeOfTx, [\n            to,\n            ethers.utils.parseEther(amount),\n          ]);\n\n          console.log(data);\n        } else {\n          iface = new ethers.utils.Interface(MultiSig);\n          if (typeOfTx == \"changeRequirement\") {\n            data = iface.encodeFunctionData(typeOfTx, [Number(amount)]);\n            console.log(\"changeRequirement\", data);\n          } else {\n            data = iface.encodeFunctionData(typeOfTx, [to]);\n          }\n        }\n\n        const contract = await core.contracts[`${chain?.id}`].MultiSig;\n        const response = await contract.submitTransaction(\n          core.contracts[`${chain?.id}`][destinationAdrs].address,\n          formatToBN(0),\n          data\n        );\n        const tx = await response.wait();\n\n        setTimeout(async () => {\n          if (tx?.status === 1) {\n            let txnsCount = await contract.transactionCount();\n            let summary;\n\n            dispatch(\n              saveTxn({\n                txIndex: txnsCount - 1,\n                hash: tx.transactionHash,\n                chainId: chain?.id || _activeNetwork,\n              })\n            );\n\n            if (typeOfTx == \"mint\" || typeOfTx == \"burn\") {\n              let tokenDetails = await fetch(destinationAdrs);\n              summary = `Submitted to ${\n                typeOfTx == \"mint\" ? \"Mint\" : \"Burn\"\n              } ${Number(amount)} ${tokenDetails?.value.symbol}`;\n            }\n\n            if (typeOfTx == \"addOwner\") summary = \"Submitted to add owner\";\n            if (typeOfTx == \"removeOwner\")\n              summary = \"Submitted to remove owner\";\n            if (typeOfTx == \"changeRequirement\")\n              summary = \"Submitted to change requirement\";\n            updateLoader(false);\n            addPopup({\n              txn: {\n                hash: tx.transactionHash,\n                success: true,\n                summary,\n              },\n            });\n          }\n        }, 1000);\n\n        if (tx?.status !== 1) {\n        }\n      } catch (e: any) {\n        console.error(\"useMultiSig error\", e);\n        onFailure();\n        updateLoader(false);\n\n        addPopup({\n          error: {\n            message: formatErrorMessage(e?.data?.message || e?.message),\n            stack: e?.stack,\n          },\n        });\n      }\n    },\n    [core, amount, addTransaction, to, destinationAdrs]\n  );\n};\n\nexport default useMultiSig;\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useNetwork } from 'wagmi'\nimport { addPopup } from \"../state/application/actions\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionUpdater } from \"../state/transactions/hooks\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport useCore from \"./useCore\";\nimport { saveTxn } from \"../state/transactions/actions\";\nimport {AppDispatch, AppState} from \"../state/index\";\n \nconst useConfirmTxn = () => {\n  const core = useCore();\n  const { chain} = useNetwork()\n  const updateTransaction = useTransactionUpdater();\n  const addPopup = useAddPopup()\n  const dispatch = useDispatch<AppDispatch>();\n  const updateLoader = useUpdateLoader()\n\n  const confirmCallback = async (index: number, typeOfTx: string) => {\n      \n    try {\n      const contract = await core.contracts[`${chain?.id}`].MultiSig;\n      const response = await contract.confirmTransaction(index)\n      console.log('useConfirmTxn response', response)\n \n      const tx = await response.wait();\n      console.log('useConfirmTxn tx', tx)\n\n      setTimeout(async() => {\n        if (tx?.status === 1){\n          updateLoader(false)\n          dispatch(saveTxn({txIndex: index, hash: tx.transactionHash, chainId: chain?.id || core._activeNetwork}))\n          let summary = `Confirmed ID ${index}`\n          \n          addPopup({\n            txn: {\n              hash: tx.transactionHash,\n              success: true,\n              summary\n            }\n          });\n\n        }\n      }, 1000)\n\n    } catch (e: any) {\n      console.log('useConfirmTxn error', e.reason);\n      updateLoader(false)\n\n      addPopup({\n        error: {\n          message: formatErrorMessage(e?.data?.message || e?.message || e?.reason),\n          stack: e?.stack,\n        }\n      });\n    }\n\n  }\n\n  return confirmCallback\n}\n\nexport default useConfirmTxn\n\n","import { BigNumber } from 'ethers';\nimport useCore from '../hooks/useCore';\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nexport const truncateMiddle = function (\n  fullStr: string = '',\n  strLen: number,\n  separator?: string,\n) {\n  if (fullStr.length <= strLen) return fullStr;\n  separator = separator || '...';\n\n  var sepLen = separator.length,\n    charsToShow = strLen - sepLen,\n    frontChars = Math.ceil(charsToShow / 3),\n    backChars = Math.floor(charsToShow / 3);\n\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n\nexport const InputValidation = function (\n  value: string = \" \",\n  balance: BigNumber,\n  collateral: string,\n  toCheckFor: [\"MAX\", \"DECIMALS\"]\n) {\n  let returnObj = {\n    status: \"Success\",\n    restrict: false,\n    msg: \"\",\n  };\n\n  if (toCheckFor.includes(\"MAX\")) {\n    if (Number(value) > Number(balance)) {\n      returnObj = {\n        status: \"Warning\",\n        restrict: true,\n        msg: \"Input cannot be more than your wallet balance\",\n      }\n\n      return returnObj;\n    }\n  }\n};\n\n","import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport {Puff} from \"react-loader-spinner\"\nimport { useUpdateLoader } from '../state/application/hooks';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function ProgressModal({currentLoaderState}) {\n  const [open, setOpen] = React.useState(currentLoaderState);\n  const updateLoader = useUpdateLoader()\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n    updateLoader(false)\n  };\n\n  return (\n    <div>\n      <Dialog  onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={currentLoaderState} fullWidth >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Please wait..! \n        </DialogTitle>\n        <DialogContent dividers>\n          <div style={{display: 'flex', justifyContent: 'space-between'}}>\n            <div>Transaction is in progress.</div> \n            <Puff\n                height=\"30\"\n                width=\"30\"\n                ariaLabel=\"progress-bar-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"progress-bar-wrapper\"\n                radius={1}\n                color={`#444`}\n                visible={true}\n            />\n          </div>\n          \n        </DialogContent>\n        \n      </Dialog>\n    </div>\n  );\n}\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\n\nconst useGetAllTokenDetails = () => {\n  const {tokens, _activeNetwork, contracts} = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState<any>('')\n\n  const fetchData = useCallback(async () => {\n    Object.entries(tokens[chain?.id || _activeNetwork]).forEach(async(item) => {\n        const contract = await contracts[`${chain?.id || _activeNetwork}`][item[0]]\n        const res = await contract.totalSupply()\n        \n        console.log(\"useGetAllTokenDetails res\", res)\n        const bal = {\n            totalSupply: getDisplayBalance(res),\n            symbol: item[1].symbol\n        }\n        setResponse(prev => [...prev, bal])\n\n    })\n    \n  }, [chain]) \n\n  useEffect(() => {\n    fetchData()\n  }, [tokens, _activeNetwork, chain])\n\n  return response\n\n}\n\nexport default useGetAllTokenDetails","import { useEffect, useState } from 'react'\nimport { Button, Card, CardContent, Grid, TextField } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useNetwork } from \"wagmi\"\n\nimport Textfield from '../../../components/Textfield'\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks'\nimport { useAddOwner, useRemoveOwner, useChangeRequirement, useGetConfirmationCount, useGetSingleTransaction, useGetRequiredCount, useGetOwners } from '../../../hooks/multisig/useMultiSig'\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction'\nimport useCore from '../../../hooks/useCore';\nimport { ethers } from 'ethers';\nimport _ from 'lodash';\nimport useConfirmTxn from '../../../hooks/useConfirmTxn';\nimport { truncateMiddle } from '../../../utils';\nimport { PersonalVideo } from '@material-ui/icons';\nimport ProgressModal from '../../../components/ProgressModal';\nimport useGetTokenDetails from '../../../hooks/useGetTokenDetails';\nimport useGetAllTokenDetails from '../../../hooks/useGetAllTokenDetails';\n// import useRemoveOwner from '../../../hooks/useRemoveOwner'\n// import useChangeNoConfirmations from '../../../hooks/useChangeNoConfirmations'\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction createData(id: number, details: any, outOfCount: string, status: string, action: string, hash: []) {\n  return { id, details, outOfCount, status, action, hash };\n}\n\n// const rows = [\n//   createData(0, 'Frozen yoghurt', \"1 out of 2\", \"Needs Confirmation\", \"Confirm\"),\n//   createData(1, 'Ice cream sandwich', \"1 out of 2\", \"Needs Confirmation\", \"Confirm\"),\n//   createData(2, 'Eclair', \"2 out of 2\", \"Success\", \"\"),\n//   createData(3, 'Cupcake', \"1 out of 2\", \"Needs Confirmation\", \"Confirm\"),\n//   createData(4, 'Gingerbread', \"1 out of 2\", \"Needs Execution\", \"Execute\"),\n// ];\n\nfunction Admin({ adminTxns }) {\n  const { provider, tokens, _activeNetwork, contracts, config } = useCore()\n  const classes = useStyles();\n  const { chain: chainName } = useNetwork()\n  console.log(\"adminTxns\", adminTxns)\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  let contractOwners: any = useGetOwners()\n\n  const [adddressToAdd, setAddressToAdd] = useState<string>('')\n  const [adddressRemove, setAddressToRemove] = useState<string>('')\n  const [noOfConfirmations, setNoOfConfirmations] = useState<string>(\"\")\n  const [finalData, setFinalData] = useState<any[]>([])\n  const [tableRows, setTableRows] = useState<any[]>([])\n\n  // const addOwnerAction = useAddOwner(adddressToAdd);\n  // const removeOwnerAction = useRemoveOwner(adddressRemove);\n  // const noConfirmAction = useChangeRequirement(noOfConfirmations);\n  const addOwnerAction = useSubmitTransaction(\"addOwner\", adddressToAdd, '0', \"MultiSig\")\n  const removeOwnerAction = useSubmitTransaction(\"removeOwner\", adddressRemove, '0', \"MultiSig\")\n  const noConfirmAction = useSubmitTransaction(\"changeRequirement\", \"\", noOfConfirmations, \"MultiSig\")\n  const setConfirmationCount = useGetConfirmationCount()\n  const setIsExecuted = useGetSingleTransaction()\n  let confirmReq = useGetRequiredCount()\n  const confirmTxnAction = useConfirmTxn()\n  const { fetch } = useGetTokenDetails();\n  const allTokensTotalSupply = useGetAllTokenDetails()\n  console.log(\"allTokensTotalSupply\", allTokensTotalSupply)\n  let etherscanUrl = config[chainName?.id || _activeNetwork].etherscanUrl\n\n  useEffect(() => {\n    getAllData()\n\n  }, [adminTxns])\n\n  useEffect(() => {\n    createRowData()\n  }, [finalData])\n\n  const handleAddOwner = () => {\n    addOwnerAction(() => { }, () => { })\n    updateLoader(true)\n  }\n\n  const handleRemoveOwner = () => {\n    removeOwnerAction(() => { }, () => { })\n    updateLoader(true)\n  }\n\n  const handleChangeConfirmation = () => {\n    noConfirmAction(() => { }, () => { })\n    updateLoader(true)\n  }\n\n  const handleConfirm = (id: number, typeOfTxn: string) => {\n    confirmTxnAction(id, typeOfTxn)\n    updateLoader(true)\n\n  }\n\n  const handleExecute = () => {\n\n  }\n\n  let returnRes\n\n  const getTxnHash = async (hash: any, i: number) => {\n    let data, from, blockNumber\n    let toAdrs, val, token, typeOfTxn, timestamp, methodID\n\n    const testFn = async () => {\n      if (i == 0) {\n        const res = await provider.getTransaction(hash)\n        console.log('useGetTxnFromHash res', res.data)\n        data = res.data\n        from = res.from\n        blockNumber = res.blockNumber\n\n        const blockres = await provider.getBlock(blockNumber)\n        timestamp = blockres\n        // methodID = data?.slice(0, 10)\n        token = data.slice(10, 74)\n        token = `0x${token.slice(24, token.length)}`\n        typeOfTxn = data.slice(266, 274)\n        toAdrs = data.slice(274, 338)\n\n        if (typeOfTxn == \"ba51a6df\") val = data.slice(337, 338)\n        else {\n          val = \"0\"\n        }\n\n        return returnRes = {\n          token,\n          typeOfTxn: typeOfTxn == \"173825d9\" ? \"removeOwner\" : typeOfTxn == \"7065cb48\" ? \"addOwner\" : \"changeRequirement\",\n          toAdrs: `0x${toAdrs.slice(24, toAdrs.length)}`,\n          from,\n          timestamp,\n          val\n        }\n      } else {\n\n        console.log(\"hash\", hash)\n        let hashData = await Promise.all(hash.map(async (singleHash) => {\n          const res = await provider.getTransaction(singleHash)\n          blockNumber = res.blockNumber\n          const blockres = await provider.getBlock(blockNumber)\n          timestamp = blockres.timestamp\n          from = res.from\n          return {\n            from, timestamp\n          }\n\n        }))\n\n        return hashData\n      }\n    }\n    await testFn().then((res) => {\n      returnRes = res\n    }\n    )\n\n    return returnRes\n\n  }\n\n\n  const getAllData = () => {\n    adminTxns.map(async (item) => {\n      console.log(\"getAllData item\", item)\n      let submitData = await getTxnHash(item[1].hash[0], 0)\n      let confirmData = [] // this should be array of data of confirm hashes / exclueded first (submit) txn hash\n      if (item[1].hash.length > 1) {\n\n        confirmData = await getTxnHash(item[1].hash.filter((arr, i) => i != 0), 1)\n      }\n      let _numConfirmations = await setConfirmationCount(item[0])\n\n      const { token, typeOfTxn, toAdrs, from, timestamp, val } = submitData\n\n      const txIndex = item[0]\n      const _executed = await setIsExecuted(item[0])\n\n      setFinalData(prev => [...prev, {\n        _token: token,\n        _typeOfTx: typeOfTxn,\n        _to: toAdrs,\n        from,\n        timestamp,\n        txIndex,\n        _executed,\n        _numConfirmations,\n        confirmData,\n        hash: item[1].hash,\n        val\n      }])\n    })\n  }\n\n  let supply\n  const getTotalSupply = (token: string) => {\n\n\n    console.log(\"getTotalSupply token\", token)\n\n    const getTokenDetails = async () => {\n      let tokenDetails = await fetch(token)\n      console.log(\"getTotalSupply tokenDetails\", tokenDetails)\n      return tokenDetails\n    }\n\n    // getTokenDetails()\n    //   .then((res) => {\n    //     console.log(\"getTotalSupply res\" , res)\n    //     supply = res\n    //   })\n\n    // console.log(\"getTotalSupply supply\", supply)\n\n    return supply\n  }\n\n\n  // console.log(\"testSupply\", testSupply)\n\n\n  const createRowData = () => {\n    finalData.map((item) => {\n\n      const { token, _typeOfTx, _to, from, txIndex, _executed, _numConfirmations, hash, confirmData, val } = item\n\n      let outOfData = _executed ? `Fullfilled` : `${_numConfirmations} out of ${confirmReq}`\n      let details = `Transaction (${_typeOfTx} to ${_typeOfTx == \"changeRequirement\" ? val : _to}) is Submitted by ${truncateMiddle(from, 12, \"...\")}.` +\n        `${_numConfirmations > 1 ? `Confirmed by ${truncateMiddle(from, 12, \"...\")} ${confirmData?.map((data) => \"and \" + truncateMiddle(data.from, 12, \"...\"))}` : \"\"} ${_executed && !!confirmData.length ? `Excuted by ${truncateMiddle(confirmData[confirmData?.length - 1].from, 12, \"...\")}.` : \"\"}`\n      let status = _executed ? \"Success\" : _numConfirmations < confirmReq ? 'Needs Confirmation' : 'Needs Execution'\n      let action = _executed ? \"\" : _numConfirmations < confirmReq ? \"Confirm\" : \"\"\n      const res = createData(txIndex, details, outOfData, status, action, hash)\n      setTableRows(prev => _.uniqWith([...prev, res], _.isEqual))\n    })\n  }\n  console.log(\"tableRows\", tableRows)\n  console.log(\"finalData\", finalData)\n  // return <div />\n  return (\n    <div style={{ marginLeft: '260px', marginRight: '20px', position: 'relative', paddingTop: '50px' }}>\n      <ProgressModal currentLoaderState={currentLoaderState} />\n\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Textfield\n                text={'Total Supply'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid item xs={2}>\n                {\n                  allTokensTotalSupply && allTokensTotalSupply?.map((item, i) => (\n                    <div className={\"row-spacebetween-center\"} key={i}>\n                      <Textfield\n                        text={item.symbol + \":\"}\n                        fontSize={'15px'}\n                        fontWeight={'500'}\n                        className={'m-b-15'}\n                      />\n                      <Textfield\n                        text={item.totalSupply}\n                        fontSize={'15px'}\n                        fontWeight={'bold'}\n                        className={'m-b-15'}\n                      />\n                    </div>\n                  ))\n                }\n\n              </Grid>\n\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card style={{ marginBottom: '30px' }}>\n\n            <CardContent>\n              <Textfield\n                text={'Add an owner'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText=\"Enter the address to which you want to add as an owner\"\n                    required\n                    label=\"Address\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setAddressToAdd(e.target.value)}\n                    value={adddressToAdd}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleAddOwner}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    // disabled={!disableMint}\n                    style={{ position: 'relative' }}>Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card style={{ marginBottom: '30px' }}>\n            <CardContent>\n              <Textfield\n                text={'Remove an owner'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText=\"Enter the address to which you want to remove as an owner\"\n                    required\n                    label=\"Address\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setAddressToRemove(e.target.value)}\n                    value={adddressRemove}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleRemoveOwner}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    // disabled={!disableMint}\n                    style={{ position: 'relative' }}>Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card style={{ marginBottom: '30px' }}>\n            <CardContent>\n              <Textfield\n                text={'Change the number of confirmations'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TextField\n                    helperText={`Enter the count that needs to be updated. Current count: ${confirmReq}`}\n                    required\n                    label=\"Confirmation count\"\n                    // margin=\"dense\"\n                    type=\"text\"\n                    onChange={(e: any) => setNoOfConfirmations(e.target.value)}\n                    value={noOfConfirmations}\n                    fullWidth\n                    // variant=\"outlined\"\n                    size={'small'}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    onClick={handleChangeConfirmation}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    // disabled={!disableMint}\n                    style={{ position: 'relative' }}>Change\n                  </Button>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={6}>\n          <Card style={{ marginBottom: '30px', maxHeight: '200px', height: '200px' }} className={\"scrollable\"}>\n            <CardContent>\n              <Textfield\n                text={'Current Owners list'}\n                fontSize={'20px'}\n                fontWeight={'bold'}\n                className={'m-b-15'}\n              />\n              <div className={\"scrollable\"}>\n                {\n                  contractOwners.map((owner, i) =>\n                    <Textfield\n                      key={i}\n                      text={`${i + 1}. ${owner}`}\n                      fontSize={'13px'}\n                      // fontWeight={'bold'}\n                      className={'m-b-15'}\n                    />\n                  )\n                }\n              </div>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <TableContainer>\n                <Table className={classes.table} aria-label=\"simple table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>ID</TableCell>\n                      <TableCell>Details</TableCell>\n                      <TableCell align=\"right\">Confirmation Count</TableCell>\n                      <TableCell align=\"right\">Staus</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {_.uniqWith(tableRows, (arrVal, othVal) => arrVal.id == othVal.id).sort((a, b) => b.id - a.id)?.map((row) => (\n                      <TableRow key={row.id}>\n                        <TableCell>{row.id}</TableCell>\n                        <TableCell component=\"th\" scope=\"row\">\n                          {row.details}\n                          {\n                            row.action.length ?\n                              <div style={{ margin: '15px 0 15px 0' }}>\n                                <Button onClick={() => {\n                                  if (row.action == \"Confirm\") handleConfirm(row.id, row._typeOfTx)\n                                  else handleExecute()\n                                }}>{row.action}</Button>\n                              </div>\n                              :\n                              <div />\n                          }\n                          Click on the links for more details. &nbsp;&nbsp;\n                          {\n                            row.hash.map((singleHash, i) =>\n                              <span key={i}><a target=\"_blank\" href={`${etherscanUrl}/tx/${singleHash}`} rel=\"noreferrer\"> {truncateMiddle(singleHash, 22, \"...\")}</a>\n                                &nbsp;&nbsp;</span>\n                            )\n                          }\n                        </TableCell>\n                        <TableCell align=\"right\">{row.outOfCount}</TableCell>\n                        <TableCell align=\"right\">{row.status}</TableCell>\n                        {/* {\n                          row.action.length ?\n                          <TableCell align=\"right\">\n                              <Button onClick={() => {\n                              if(row.action == \"Confirm\") handleConfirm(row.id, row._typeOfTx)\n                              else handleExecute()\n                            }}>{row.action}</Button>\n                          </TableCell>\n                          :\n                          <div />\n                        } */}\n\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Admin\n","import {useState, useEffect} from 'react'\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport { makeStyles, Typography, createStyles, Theme } from '@material-ui/core';\nimport _moment from \"moment\"\nimport {useNetwork} from \"wagmi\"\n\nimport { truncateMiddle } from '../utils';\nimport useCore from '../hooks/useCore';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n      marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n      padding: theme.spacing(3),\n    },\n  }),\n);\n\nfunction getSteps() {\n      return ['Creation', 'Confirmations', 'Execution'];\n}\n\nconst getDate = (val: number) => {\n      let timestamp = val\n      let date = _moment.unix(timestamp).utc().format(\"MM-D-YYYY h:mm:ss a\");\n      if(timestamp == 0) return 'N/A'\n      return `${date}`\n}\n\nfunction getStepContent(step: number, stepData: any, core: any, chainName) {\n\n      const {from, _createdTime, _executed, hash, _numConfirmations, confirmData} = stepData;\n      console.log(\"getStepContent confirmData\", confirmData)\n      const {config, _activeNetwork} = core\n\n      let etherscanUrl = config[chainName?.id || _activeNetwork].etherscanUrl\n\n      switch (step) {\n        case 0:\n          return (\n            <div style={{padding: '10px 0'}}>\n                  Created by&nbsp;\n                  <a \n                        target=\"_blank\"\n                        href={ `${etherscanUrl}/tx/${hash[0]}`}>\n                              {truncateMiddle(from, 12, \"...\")}\n                  </a>&nbsp;\n                   on {getDate(_createdTime)}&nbsp;+UTC\n            </div>\n          );\n        case 1:\n            if( _numConfirmations > 1 ) return (\n                  <div style={{padding: '10px 0'}}>\n                        Confirmed by&nbsp;\n                        {\n                              hash?.map((data, i) => \n                                    <span key={i}><a key={i} target=\"_blank\" href={ `${etherscanUrl}/tx/${data}`}>{truncateMiddle(data, 12, \"...\")}</a> {} and </span>\n                              )\n                        }\n                        &nbsp;on {getDate(_createdTime)}&nbsp;+UTC and&nbsp;\n                        {\n                            confirmData?.map((data) => getDate(data.timestamp))\n                        }&nbsp;+UTC\n                        &nbsp;respectively.\n                  </div>\n            )\n          return <div />\n        case 2:\n          return (\n            <div style={{padding: '10px 0'}}>\n                  {\n                        _executed && \n                        <div>\n                              Executed by&nbsp; \n                              <a \n                                    target=\"_blank\" \n                                    href={ `${etherscanUrl}/tx/${hash[hash?.length - 1]}`}>\n                                          {truncateMiddle(confirmData[confirmData?.length - 1].from, 12, \"...\")} \n                              </a>&nbsp;\n                              on {getDate(confirmData[confirmData?.length - 1].timestamp)}&nbsp;+UTC\n                        </div>\n                  }\n                 \n            </div>\n          );\n        default:\n          return 'Unknown step';\n      }\n\n}\n\n\nfunction Steps(props: any) {\n      const classes = useStyles();\n      const core = useCore()\n      const { chain: chainName} = useNetwork()\n\n      const {stepState, activeStep,  chain, stepData} = props\n      console.log(\"stepData\", stepData)\n      const [stepLabelColor, setStepLabelColor] = useState('#999');\n      \n      const steps = getSteps();\n\n      useEffect(() => {\n            if(stepState == 'successful') setStepLabelColor('#369e94')\n            if(stepState == 'inProgress') setStepLabelColor('#ed7117')\n\n      }, [stepState])\n\n  return (\n      <div className={classes.root}>\n            <Stepper activeStep={activeStep} orientation=\"vertical\">\n                  {\n                        steps.map((step: any, i: number) => (\n                              <Step active={true} key={step}>\n                                    <StepLabel style={{color: 'green'}}>{step}</StepLabel>\n                                    <StepContent style={{paddingLeft: '20px'}}>\n                                          <div>\n                                                {\n                                                      getStepContent(i, stepData, core, chainName)\n                                                }\n                                          </div>\n                                    </StepContent>\n                              </Step>\n                        ))\n                  }\n            </Stepper>\n      </div>\n      \n  )\n}\n\nexport default Steps","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\nimport { useTransactionUpdater } from \"../state/transactions/hooks\";\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport formatErrorMessage from \"../utils/formatErrorMessage\";\nimport useCore from \"./useCore\";\nimport {AppDispatch, AppState} from \"../state/index\";\nimport { saveTxn } from \"../state/transactions/actions\";\n\nconst useExecuteTxn = () => {\n  const core = useCore();\n  const { chain} = useNetwork()\n  const updateTransaction = useTransactionUpdater();\n  const addPopup = useAddPopup()\n  const dispatch = useDispatch<AppDispatch>();\n  const updateLoader = useUpdateLoader()\n\n  const executeCallback = async (index: number, typeOfTx: string) => {\n      \n    try {\n      const contract = await core.contracts[`${chain?.id}`].MultiSig;\n      const response = await contract.executeTransaction(index)\n      const tx = await response.wait();\n\n    setTimeout(async() => {\n      if (tx?.status === 1){\n        updateLoader(false)\n        dispatch(saveTxn({txIndex: index, hash: tx.transactionHash, chainId: chain?.id || core._activeNetwork}))\n        let summary = `Executed ID ${index}`\n\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary\n          }\n        });\n       \n      }\n    }, 1000)\n\n    } catch (e: any) {\n      console.log('useExecuteTxn error', e);\n      updateLoader(false)\n\n      addPopup({\n        error: {\n          message: formatErrorMessage(e?.data?.message || e?.message),\n          stack: e?.stack,\n        }\n      });\n    }\n  }\n\n  return executeCallback\n}\n\nexport default useExecuteTxn\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useConfirm = () => {\n\n  const confirmCallback = async (index: number) => {\n      \n    try {\n        const trc20TokenAddress = \"TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE\"; \n        const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n        console.log('account', window.tronWeb.defaultAddress.base58)\n\n        let contract = await window.tronWeb.contract().at(trcMultSigContract)\n\n        const response = await contract.confirmTransaction(index).send()\n       \n        console.log('response', response, index)\n\n    } catch (e: any) {\n        console.log('useConfirm error', e);\n\n    }\n  }\n\n  return confirmCallback\n}\n\nexport default useConfirm\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useExecute = () => {\n\n    const confirmCallback = async (index: number) => {\n      \n        try {\n            const trc20TokenAddress = \"TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE\"; \n            const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n            let contract = await window.tronWeb.contract().at(trcMultSigContract)\n    \n            const response = await contract.executeTransaction(index).send()\n           \n            console.log('response', response)\n    \n        } catch (e: any) {\n            console.log('useExecute error', e);\n    \n        }\n      }\n    \n      return confirmCallback\n}\n\nexport default useExecute\n\n","import { BigNumber } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useNoOfConfimReq = () => {\n  \n    const [response, setResponse] = useState<number>(0)\n  \n    const fetchData = useCallback(async () => {\n        const trc20TokenAddress = \"TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE\"; \n        const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n        let contract = await window.tronWeb.contract().at(trcMultSigContract)\n\n        const response = await contract.numConfirmationsRequired().call()\n       \n        setResponse(response.toNumber())\n\n    }, []) \n  \n    useEffect(() => {\n        fetchData()\n            .catch((err) => setResponse(0))\n  \n    }, [fetchData])\n  \n    return response\n}\n\nexport default useNoOfConfimReq\n\n","import { useEffect, useState } from 'react'\nimport Icon from \"@material-ui/core/Icon\"\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport _moment from \"moment\"\nimport {Button} from \"@material-ui/core\";\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport {useNetwork} from \"wagmi\"\nimport _ from \"lodash\"\nimport Steps from './Steps'\nimport Textfield from './Textfield';\nimport { truncateMiddle } from '../utils';\n// import { tronWeb } from '../views/dashboard/TestTron';\n\nimport { formatToBN, getBalance, getDisplayBalance } from '../utils/formatBalance';\nimport useCore from '../hooks/useCore';\nimport useConfirmTxn from '../hooks/useConfirmTxn';\nimport { BigNumber, ethers } from 'ethers';\nimport useGetConfirmReq from '../hooks/useGetConfirmReq';\nimport useExecuteTxn from '../hooks/useExecuteTxn';\nimport useConfirm from '../hooks/tron/useConfirm';\nimport useExecute from '../hooks/tron/useExecute';\nimport useNoOfConfimReq from '../hooks/tron/useNoOfConfimReq';\nimport { useGetActiveBlockChain } from '../state/chains/hooks';\nimport { useGetLoader, useUpdateLoader } from '../state/application/hooks';\nimport { useGetRequiredCount, useGetSingleTransaction, useGetOwners, useGetConfirmationCount, useGetTxnFromHash } from '../hooks/multisig/useMultiSig';\nimport useGetTokenDetails from '../hooks/useGetTokenDetails';\nimport ProgressModal from './ProgressModal';\n\n\nfunction ConfirmationStep({allTransactions}) {\n      const core = useCore()\n\n      const {myAccount, provider, config, _activeNetwork } = core\n      const { chain: chainName} = useNetwork()\n\n      const chain = useGetActiveBlockChain()\n      const updateLoader = useUpdateLoader()\n      const currentLoaderState = useGetLoader()\n      const {fetch} = useGetTokenDetails();\n\n      const [finalData, setFinalData] = useState<any[]>([])\n      const [txnData, setTxnData] = useState<any[]>([])\n\n      // maticMumbai network\n      let testOwners: any = useGetOwners()\n      let confirmReq = useGetRequiredCount()\n      const disableConfirm = testOwners?.includes(myAccount)\n      const confirmTxnAction = useConfirmTxn()\n      const executeTxAction = useExecuteTxn()\n      const setIsExecuted = useGetSingleTransaction()\n      const getTxnFromHash = useGetTxnFromHash()\n      const setConfirmationCount = useGetConfirmationCount()\n      let etherscanUrl = config[chainName?.id || _activeNetwork].etherscanUrl\n\n      // const {_numConfirmations, setNumConfirmations} = useGetConfirmationCount()\n      \n      // Nile network\n      let noOfConfirmReq = useNoOfConfimReq()\n      const confirmTronTxnAction = useConfirm()\n      const executeTronTxnAction = useExecute()\n\n      useEffect(() => {\n            getAlltheData()\n            console.log(\"useEffectConfirmationStep allTransactions\", allTransactions)\n      }, [allTransactions])\n\n      const ConfirmTxn = (txIndex: number, _typeOfTx: string) => {\n\n            updateLoader(true)\n\n            if(chain != \"MaticMumbai\"){\n                  confirmTronTxnAction(txIndex)  \n            }else{\n                  confirmTxnAction(txIndex, _typeOfTx)\n            }\n\n      }\n\n      const executeTxn = (txIndex: number, _typeOfTx: string) => {\n            updateLoader(true)\n\n            if(chain != \"MaticMumbai\"){\n                  executeTronTxnAction(txIndex)  \n            }else{\n                  executeTxAction(txIndex, _typeOfTx)\n            }\n\n      }\n\n      const getDate = (val: number) => {\n            let timestamp = val\n            let date = _moment.unix(timestamp).utc().format(\"MMM Do YYYY h:mm:ss a\");\n            if(timestamp == 0) return 'N/A'\n            return `${date}`\n      }\n\n      const timeAgo = (val: number) => {\n            let timestamp = val  \n            let date = _moment.unix(timestamp).fromNow();\n\n            return date\n      }\n\n      const activeStepHandler = (confirmCount, isExecuted) => {\n\n            if(chain == \"MaticMumbai\"){\n                  if(isExecuted) return 3\n                  else if(confirmCount < confirmReq) return 1\n                  else if(confirmCount == confirmReq) return 2\n                  else return\n            }else{\n                  if(isExecuted) return 3\n                  else if(confirmCount < noOfConfirmReq) return 1\n                  else if(confirmCount == noOfConfirmReq) return 2\n                  else return \n            }\n      }\n\n      let returnRes\n\n      const getTxnHash = async(hash: any, i: number) => {\n            let data, from, blockNumber\n            let toAdrs, val, token, typeOfTxn, timestamp, methodID\n\n            const testFn = async() => {\n            \n                 \n                  if(i == 0){\n                        const res = await provider.getTransaction(hash)\n                        console.log('useGetTxnFromHash res', res.data)\n                        data = res.data\n                        from = res.from\n                        blockNumber = res.blockNumber\n                        const blockres = await provider.getBlock(blockNumber)\n                        timestamp = blockres.timestamp\n\n                        methodID = data?.slice(0, 10)\n                        token = data.slice(10, 74)\n                        token =  `0x${token.slice(24, token.length)}`\n                        typeOfTxn = data.slice(266, 274)\n                        toAdrs = data.slice(274, 338)\n                        val = data.slice(338, 402) \n\n                        let tokenDetails = await fetch(token)\n                        console.log(\"tokenDetails\", tokenDetails)\n\n                        return returnRes = {\n                              methodID,\n                              token: {\n                                    address: token,\n                                    symbol: tokenDetails?.value.symbol,\n                                    balance: tokenDetails?.value.balance\n                              },\n                              typeOfTxn: typeOfTxn == \"40c10f19\" ? \"Mint\" : \"Burn\",\n                              toAdrs: `0x${toAdrs.slice(24, toAdrs.length)}`,\n                              val: ethers.utils.formatEther(`0x${val}`),\n                              from,\n                              timestamp\n                        }\n                  }else {\n\n                        let hashData = await Promise.all(hash.map(async(singleHash) => {\n                              const res = await provider.getTransaction(singleHash)\n                              blockNumber = res.blockNumber\n                              const blockres = await provider.getBlock(blockNumber)\n                              timestamp = blockres.timestamp\n                              from = res.from\n                              return { from, timestamp }\n        \n                        }))\n\n                        console.log('hashData', hashData)\n\n                        return hashData \n                  }\n\n  \n            }\n            await testFn().then((res) => \n                  {\n                        returnRes = res\n                  }\n           )\n\n            console.log('updater returnRes', returnRes)\n            return returnRes\n\n      }\n\n      const getAlltheData = () => {\n\n            console.log(\"updater getAlltheData\", allTransactions)\n\n            _.uniqWith(allTransactions)\n                  .map(async(item: any, i) => {\n                        \n                        let submitData = await getTxnHash(item[1].hash[0], 0)\n                        let confirmData = [] \n                        if(item[1].hash.length > 1) {\n                              confirmData = await getTxnHash(item[1].hash.filter((arr, i) => i != 0), 1)\n                        }else {\n                              confirmData = await getTxnHash(item[1].hash, 1)\n                        }\n\n                        console.log(\"confirmData\", confirmData)\n\n                        let _numConfirmations = await setConfirmationCount(item[0])\n                        console.log(\"_numConfirmations\", _numConfirmations)\n                        console.log('submitData', submitData)\n                        const {token, typeOfTxn, toAdrs, val: _value, from, timestamp} = submitData\n                        // const {from: confirmAndexecuteFrom, timestamp: confirmAndexecuteTime} = confrimData\n\n                        const txIndex = item[0]\n                        const _executed = await setIsExecuted(item[0])\n                        console.log(\"_executed\", _executed)\n\n                        setFinalData(prev => [...prev, {\n                              _token: token,\n                              _typeOfTx: typeOfTxn,\n                              _to: toAdrs,\n                              _value,\n                              from,\n                              timestamp,\n                              txIndex,\n                              _executed,\n                              _numConfirmations,\n                              confirmData,\n                              hash: item[1].hash\n                        }])\n                  })\n      }\n\n      console.log(\"updater finalData\", finalData)\n\n//   return <div />\n  return (\n      <div>\n            <ProgressModal currentLoaderState={currentLoaderState} />\n            <Textfield\n                  text={'Transactions'}\n                  fontSize={'24px'}\n                  fontWeight={'bold'}\n                  className={'m-b-15'}\n            />\n            {\n                   _.uniqWith(finalData, (arrVal, othVal) => arrVal.txIndex == othVal.txIndex)?.sort((a, b) => b.txIndex - a.txIndex).map((item: any, i) => {\n                        const {from, timestamp: _createdTime, _typeOfTx, _value, _token, _to, _executed, txIndex, _numConfirmations, hash, confirmData} = item\n                        const {address: tokenAdrs, symbol: tokenSymbol, balance: tokenBal} = _token\n                        return(\n                              <Accordion key={i} style={{marginBottom: '16px'}}>\n                                    <AccordionSummary\n                                          // expandIcon={<ExpandMoreIcon />}\n                                          >\n                                          <div\n                                                className={'grid-item header'}   \n                                                style={{width: '100%'}}                                 \n                                          >\n                                                <div>\n                                                      <Textfield \n                                                            text={txIndex}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}    \n                                                      />\n                                                </div>\n                                                <div>\n                                                      <Textfield \n                                                            text={`${_typeOfTx} (${_value} ${tokenSymbol})`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </div>\n                                                <div>\n                                                      <Textfield \n                                                            text={`${timeAgo(_createdTime)}`}\n                                                            color={'#333'}\n                                                            fontSize={'16px'}\n                                                      />\n                                                </div>\n                                                <div className='row-left-center'>\n                                                      <div><Icon className='m-r-5 headerIcon'>supervisor_account</Icon> </div>\n                                                      <Textfield \n                                                            text={ _executed ? `Fullfilled` : `${_numConfirmations} out of ${confirmReq}`}\n                                                            color={'#aaa'}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                </div>\n                                                <div style={{width: '180px'}} className={\"row-allcenter\"}>\n                                                      <Textfield \n                                                            text={`${\n                                                                  chain == 'MaticMumbai' ? \n                                                                  _executed ? \"Success\" : _numConfirmations < confirmReq ? 'Needs Confirmation' : 'Needs Execution' :\n                                                                  _numConfirmations < noOfConfirmReq ? 'Needs Confirmation' : !_executed ? 'Needs Execution' : 'Success'}`}\n                                                            // color={'#ed7117'}\n                                                            color={`${\n                                                                  chain == 'MaticMumbai' ? \n                                                                  // _numConfirmations < confirmReq ? '#FF4500' : !_executed ? '#FF4500' : '#228B22' :\n                                                                  _executed ? '#228B22' : _numConfirmations < confirmReq ? '#FF4500' : \"\" :\n                                                                  _numConfirmations < noOfConfirmReq ? '#FF4500' : !_executed ? '#FF4500' : '#228B22'}`}\n                                                            fontSize={'14px'}\n                                                            fontWeight={'bold'}\n                                                      />\n                                                      \n                                                </div>  \n                                                <div>&nbsp; &nbsp; <KeyboardArrowUpIcon /> </div>\n                                          </div>\n                                    </AccordionSummary>\n                                    <AccordionDetails>\n                                          <div className='flex' style={{width: '100%'}}>\n                                                <div style={{flex: 3, display: 'flex', flexDirection: 'column'}}>\n                                                      <div className=\"grid-item flex1\">\n                                                            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                                                            <Textfield \n                                                                  text={`${_typeOfTx} ${_value} ${tokenSymbol} (${ truncateMiddle(tokenAdrs, 12, '...')}) to ${_to}`}\n                                                                  color={'#000'}\n                                                                  fontSize={'15px'}\n                                                                  className={'m-b-15'}\n                                                                  fontWeight={'bold'}\n                                                            />\n                              \n                                                                  {/* <div>\n                                                                        <Icon className='cardIcon'>share</Icon>\n                                                                  </div>  */}\n                              \n                                                            </div>\n                                                      \n                                                            <div>\n                                                                  {\n                                                                        chain == \"MaticMumbai\" ?\n\n                                                                        _executed ? <div /> :\n                                                                        _numConfirmations < confirmReq  ?\n                                                                        <Button\n                                                                              onClick={() => ConfirmTxn(txIndex, _typeOfTx)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n                                                                              disabled={currentLoaderState}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Confirm\n                                                                        </Button> :\n                                                                        <Button\n                                                                              onClick={() => executeTxn(txIndex, _typeOfTx)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n\n                                                                              disabled={currentLoaderState}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Execute\n                                                                        </Button>  :\n\n                                                                        _numConfirmations < noOfConfirmReq ?\n                                                                                                                                          \n                                                                        <Button\n                                                                              onClick={() => ConfirmTxn(txIndex, _typeOfTx)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n\n                                                                              // disabled={!disableConfirm}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Confirm\n                                                                        </Button> :\n                                                                        !_executed ?\n                                                                        <Button\n                                                                              onClick={() => executeTxn(txIndex, _typeOfTx)}\n                                                                              variant=\"contained\"\n                                                                              color=\"primary\"\n\n                                                                              // disabled={!disableConfirm}\n                                                                              size={'large'}\n                                                                              >\n                                                                              Execute\n                                                                        </Button> : <div /> \n                                                                  }\n                                                            </div>\n                              \n                                                      </div>  \n                                                      <div className=\"grid-item flex1\">\n                                                            <div className='flex m-b-10'>\n                                                                  <Textfield \n                                                                        text={'Transaction ID:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  <div className='flex flex4'style={{alignItems: 'flex-start'}}>\n                                                                        <Textfield \n                                                                              text={txIndex}\n                                                                              color={'#000'}\n                                                                              fontSize={'14px'}\n                                                                              className={'m-r-10'}\n                                                                        />\n                                                                        {/* <Icon className='m-r-5 cardIcon'>content_copy</Icon> */}\n                                                                  </div>\n                                                            </div>\n                                                            <div className='flex m-b-10'>\n                                                                  <Textfield \n                                                                        text={'Created:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  <Textfield \n                                                                        text={timeAgo(_createdTime) + ` (${getDate(_createdTime)} +UTC)`}\n                                                                        color={'#000'}\n                                                                        fontSize={'14px'}\n                                                                        className={'flex4'}\n                                                                  />\n                                                            </div>\n                                                            <div className='flex' style={{ marginBottom: '20px'}}>\n                                                                  <Textfield \n                                                                        text={'Executed:'}\n                                                                        color={'#777'}\n                                                                        fontSize={'15px'}\n                                                                        className={'flex1'}\n                                                                  />\n                                                                  {\n                                                                        _executed && \n                                                                        <Textfield \n                                                                              text={timeAgo(confirmData[confirmData?.length - 1].timestamp) + ` (${getDate(confirmData[confirmData?.length - 1].timestamp)} +UTC)`}\n                                                                              color={'#000'}\n                                                                              fontSize={'14px'}\n                                                                              className={'flex4'}\n                                                                        />\n                                                                  }\n                                                            \n                                                            </div>\n                                                            <div style={{paddingBottom: '15px', fontSize: '16px'}}>\n                                                                  <a \n                                                                        target=\"_blank\"\n                                                                        href={ chain == \"MaticMumbai\" ?`${etherscanUrl}/tx/${hash[hash.length - 1]}` : 'https://nile.tronscan.org/#/'}>\n                                                                              View on explorer\n                                                                  </a>\n\n                                                            </div>\n                                                            \n                                                      </div>\n                                                </div>\n                                                <div className=\"grid-item \" style={{flex: 2}}>\n                                                      <Steps\n                                                            chain={chain}\n                                                            activeStep={activeStepHandler(_numConfirmations, _executed)}\n                                                            stepState={_executed}\n                                                            stepData={{hash, from, _createdTime, _executed ,_numConfirmations, confirmData}}\n                                                      />\n                                                </div>\n                                                \n                                          </div>\n\n                                    </AccordionDetails>\n                              </Accordion>\n                        )\n                  })\n            }\n      </div>\n     \n  )\n}\n\nexport default ConfirmationStep","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport useCore from \"./useCore\";\n\n\nconst useGetOwners = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState([])\n\n  const fetchData = useCallback(async () => {\n    const contract = await core.contracts[`${chain?.id}`].MultiSig;\n    const res = await contract.getOwners()\n\n    setResponse(res)\n  }, [chain]) \n\n  useEffect(() => {\n\n    if(core){\n      fetchData()\n        .catch((err) => setResponse([]))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetOwners","import { BigNumber } from \"ethers\";\nimport { useCallback } from \"react\";\nimport { getDisplayBalance } from \"../../utils/formatBalance\";\n// import { tronWeb } from \"../../views/dashboard/TestTron\";\n\n\nconst useSubmit = (to: string, amount: BigNumber, token: string, typeOfTx: BigNumber) => {\n\n  return useCallback(\n    async () => {\n      \n      try {\n\n        const trc20TokenAddress = \"TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE\"; \n        const trcMultSigContract = \"TGfdcKi7vMi86ceXxrUYyAopvqEUKFHojE\"\n        let contract = await window.tronWeb.contract().at(trcMultSigContract)\n\n        const response = await contract.submitTransaction(to, amount, trc20TokenAddress, typeOfTx).send()\n       \n        console.log('response', response)\n       \n      } catch (e: any) {\n        console.log('useSubmit error', e);\n      }\n    },\n    [amount, to, token, typeOfTx],\n  );\n}\n\nexport default useSubmit\n\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\n\nconst useGetTokenBalance = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  let balance\n  const fetchData = async (address: string, stableCoin: string) => {\n    const contract = await core.contracts[`${chain?.id || core._activeNetwork}`][stableCoin];\n    const res = await contract.balanceOf(address)\n    console.log(\"useGetTokenBalance res\", res)\n    balance = getDisplayBalance(res)\n\n    return balance\n  }\n\n\n  return {fetchData}\n\n}\n\nexport default useGetTokenBalance","import React, { useEffect, useState } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Snackbar,\n  Grid,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { useAccount, useNetwork } from 'wagmi'\n\nimport { formatToBN, getBalance } from '../../../utils/formatBalance';\nimport { chains, stableCoins } from '../Mint';\nimport ConfirmationStep from '../../../components/ConfirmationStep';\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction';\nimport useGetAllMultiSigTxns from '../../../hooks/useGetAllMultiSigTxns';\nimport useGetOwners from '../../../hooks/useGetOwners';\nimport useCore from '../../../hooks/useCore';\nimport { BigNumber } from 'ethers';\nimport useGetAllTronTxns from '../../../hooks/tron/useGetAllTronTxns';\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport Textfield from '../../../components/Textfield';\nimport { useAllTransactions } from '../../../state/transactions/hooks';\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\nimport useGetTokenBalance from '../../../hooks/useGetTokenBalance';\nimport useGetTokenDetails from '../../../hooks/useGetTokenDetails';\n\nfunction Burn({ burnTxns }) {\n  const { tokens, _activeNetwork } = useCore()\n  const { chain: chainName } = useNetwork()\n\n  // const { myAccount } = core\n  const { address: myAccount } = useAccount()\n\n  console.log(\"BurnmyAccount\", myAccount)\n  const chain = useGetActiveBlockChain()\n\n  let contractOwners: any = useGetOwners()\n  // let allTx = Object.entries(allTransactions)?.map((key) => key[1])?.filter((tx) => tx.txDetail._typeOfTx == 1)\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n\n  // let allTronTxns = useGetAllTronTxns()\n  // allTronTxns = allTronTxns.filter((tx) => tx._typeOfTx.toNumber() == 1)\n\n  const [adddress, setAddress] = useState<string>('')\n  const [amount, setAmount] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [stableCoinDetails, setStableCoinDetails] = useState<any>()\n\n  const burnTokenAction = useSubmitTransaction(\"burn\", adddress, amount, stableCoin)\n  const submitTronTxnAction = useSubmit(adddress, formatToBN(amount), stableCoin, BigNumber.from('1'))\n  const { fetchData } = useGetTokenBalance();\n\n  useEffect(() => {\n    if (adddress.length > 0 && stableCoin.length > 0)\n      getTokenDetails()\n  }, [stableCoin, adddress])\n\n  useEffect(() => {\n    console.log(\"useEffectBurnburnTxns\", burnTxns)\n  }, [burnTxns])\n\n  const submitTx = async () => {\n    updateLoader(true)\n\n    if (chain == 'MaticMumbai') {\n      burnTokenAction(() => { }, () => { })\n    }\n    if (chain == \"Neil\") {\n      submitTronTxnAction()\n    }\n  }\n\n  const handleCoinChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const getTokenDetails = async () => {\n    console.log(\"getTokenDetails stableCoin\", stableCoin, adddress)\n    let tokenDetails = await fetchData(adddress, stableCoin)\n    console.log(\"getTokenDetails\", tokenDetails)\n    setStableCoinDetails(tokenDetails)\n  }\n\n  const disableSubmitBtn = amount && Number(amount) <= Number(stableCoinDetails) && !!stableCoin && chain && contractOwners?.includes(myAccount)\n\n\n  // console.log(\"burnTxns\", burnTxns)\n\n  console.log(\"stableCoinDetails\", stableCoinDetails)\n\n  return (\n    <div style={{ marginLeft: '260px', marginRight: '20px' }}>\n\n      <Card style={{ marginBottom: '15px' }}>\n        <CardContent className='p15'>\n          <Textfield\n            text={'Burn the Stablecoin'}\n            fontSize={'24px'}\n            fontWeight={'bold'}\n            className={'m-b-15'}\n          />\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                helperText=\"This is the address to which token to be burned\"\n                required\n                id=\"outlined-email\"\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e: any) => setAddress(e.target.value)}\n                value={adddress}\n                fullWidth\n                size='small'\n              // variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText={`This is the amount of token to be burned. ${stableCoin && `Max value: ${stableCoinDetails}`} `}\n                required\n                label=\"Amount\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e: any) => setAmount(e.target.value)}\n                value={amount}\n                fullWidth\n                size='small'\n              // variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the token to be burned\"\n                required\n                select\n                label=\"Stablecoin\"\n                value={stableCoin}\n                onChange={handleCoinChange}\n                fullWidth\n                // variant=\"outlined\"\n                size='small'\n              >\n                {Object.entries(tokens[chainName?.id || _activeNetwork]).map((option) => (\n                  <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                    {option[1].symbol}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item xs={9}></Grid>\n            <Grid item xs={3}>\n              <Button\n                disabled={!disableSubmitBtn}\n                onClick={submitTx}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                style={{ position: 'relative' }}\n              >\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n\n\n        </CardContent>\n\n      </Card>\n\n      <ConfirmationStep allTransactions={burnTxns} />\n\n    </div>\n  )\n}\n\nexport default Burn\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\nconst useFreezeToken = (to: string, stableCoin: string) => {\n  const core = useCore();\n  const { chain } = useNetwork();\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  return useCallback(async () => {\n    try {\n      const contract = await core.contracts[`${chain?.id}`].USDB;\n      const res = await contract.freeze(to);\n      const tx = await res.wait();\n\n      if (tx?.status === 1) {\n        let summary = \"Wallet address is frozen!\";\n\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useFreezeToken error\", e);\n      addPopup({\n        error: {\n          message: e?.data?.message || e?.message,\n          stack: e?.stack,\n        },\n      });\n    }\n  }, [to]);\n};\n\nexport default useFreezeToken;\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from \"wagmi\";\nimport { useAddPopup, useUpdateLoader } from \"../state/application/hooks\";\n\nimport { getDisplayBalance } from \"../utils/formatBalance\";\nimport useCore from \"./useCore\";\n\nconst useUnFreezeToken = (to: string, stableCoin: string) => {\n  const core = useCore();\n  const { chain } = useNetwork();\n  const updateLoader = useUpdateLoader();\n  const addPopup = useAddPopup();\n\n  return useCallback(async () => {\n    try {\n      const contract = await core.contracts[`${chain?.id}`][stableCoin];\n      const res = await contract.unfreeze(to);\n      const tx = await res.wait();\n\n      if (tx?.status === 1) {\n        let summary = \"Wallet address is unfrozen!\";\n        updateLoader(false);\n        addPopup({\n          txn: {\n            hash: tx.transactionHash,\n            success: true,\n            summary,\n          },\n        });\n      }\n    } catch (e: any) {\n      updateLoader(false);\n      console.log(\"useUnFreezeToken error\", e);\n      addPopup({\n        error: {\n          message: e?.data?.message || e?.message,\n          stack: e?.stack,\n        },\n      });\n    }\n  }, [to]);\n};\n\nexport default useUnFreezeToken;\n","import {useEffect, useState} from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  MenuItem\n} from \"@material-ui/core\";\nimport {Puff} from \"react-loader-spinner\"\nimport { useNetwork } from 'wagmi'\nimport Textfield from '../../../components/Textfield'\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\nimport { stableCoins } from '../Mint';\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport useFreezeToken from '../../../hooks/useFreezeToken';\nimport useUnFreezeToken from '../../../hooks/useUnFreezeToken';\nimport ProgressModal from '../../../components/ProgressModal';\nimport useCore from '../../../hooks/useCore';\n\nfunction Freeze() {\n  const {tokens, _activeNetwork} = useCore()\n  const { chain: chainName} = useNetwork()\n  \n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  const chain = useGetActiveBlockChain()\n\n  const [adddressToFreeze, setAddressToFreeze] = useState<string>('')\n  const [adddressToUnFreeze, setAddressToUnFreeze] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [stableCoinUnfreeze, setStableCoinUnfreeze] = useState<string>('')\n\n  const freezeAction = useFreezeToken(adddressToFreeze, stableCoin)\n  const unFreezeAction = useUnFreezeToken(adddressToUnFreeze, stableCoin)\n\n  const handleCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  console.log('stableCoin', stableCoin)\n\n  const handleFreeze = () => {\n    freezeAction()\n    updateLoader(true)\n  }\n\n  const handleUnFreeze = () => {\n    unFreezeAction()\n    updateLoader(true)\n  }\n\n  const disableFreeze = adddressToFreeze && stableCoin\n  const disableUnFreeze = adddressToUnFreeze && stableCoinUnfreeze\n\n  return (\n    <div style={{marginLeft: '260px', marginRight: '20px', position: 'relative'}}>\n      <ProgressModal currentLoaderState={currentLoaderState} />\n      <Textfield\n        text={'Freeze a wallet'}\n        fontSize={'24px'}\n        fontWeight={'bold'}\n        className={'m-b-15'}\n        />\n      <Card style={{marginBottom: '30px'}}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the address to be frozen.\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddressToFreeze(e.target.value)}\n                value={adddressToFreeze}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                  helperText=\"This is the stable coin to be frozen.\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoin}\n                  onChange={handleCoinChange}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                > \n                  {Object.entries(tokens[chainName?.id || _activeNetwork]).map((option) => (\n                  <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                    {option[1].symbol}\n                  </MenuItem>\n                ))}\n                </TextField> \n            </Grid>\n            <Grid item xs={9}></Grid>\n            <Grid item xs={3}>\n                      \n            <Button\n              onClick={handleFreeze}\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={!disableFreeze}\n              style={{position: 'relative'}}\n            >\n              <div>\n                Freeze\n              </div>\n              \n              {/* <div style={{position: 'absolute', right: 30}}>\n              <Puff\n                height=\"30\"\n                width=\"30\"\n                ariaLabel=\"progress-bar-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"progress-bar-wrapper\"\n                radius={1}\n                color={`#444`}\n                visible={currentLoaderState}\n              />\n              </div> */}\n            </Button>      \n            </Grid>\n          </Grid>\n          \n        </CardContent>\n\n      </Card>\n\n      <Textfield\n        text={'Unfreeze a wallet'}\n        fontSize={'24px'}\n        fontWeight={'bold'}\n        className={'m-b-15'}\n        />\n      <Card style={{marginBottom: '30px'}}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the address to be unfrozen.\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddressToUnFreeze(e.target.value)}\n                value={adddressToUnFreeze}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                  helperText=\"This is the stable coin to be unfrozen.\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoinUnfreeze}\n                  onChange={(e) => setStableCoinUnfreeze(e.target.value)}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                >\n                  {Object.entries(tokens[chainName?.id || _activeNetwork]).map((option) => (\n                  <MenuItem key={option[1].symbol} value={option[1].address}>\n                    {option[1].symbol}\n                  </MenuItem>\n                ))}\n                </TextField> \n            </Grid>\n            <Grid item xs={9}></Grid>\n            <Grid item xs={3}>\n                      \n            <Button\n              onClick={handleUnFreeze}\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              disabled={!disableUnFreeze}\n              style={{position: 'relative'}}\n            >\n              <div>\n                Unfreeze\n              </div>\n              \n              {/* <div style={{position: 'absolute', right: 30}}>\n              <Puff\n                height=\"30\"\n                width=\"30\"\n                ariaLabel=\"progress-bar-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"progress-bar-wrapper\"\n                radius={1}\n                color={`#444`}\n                visible={currentLoaderState}\n              />\n              </div> */}\n            </Button>      \n            </Grid>\n          </Grid>\n          \n        </CardContent>\n\n      </Card>\n    </div>\n  )\n}\n\nexport default Freeze","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { useNetwork } from 'wagmi'\n\nimport useCore from \"./useCore\";\n\n\nconst useGetAllMultiSigTxns = () => {\n  const core = useCore();\n  // const {chainId} = useWallet()\n  const { chain} = useNetwork()\n\n  const [response, setResponse] = React.useState<any>([])\n  \n\n  const fetchData = useCallback(async () => {\n    const contract = await core.contracts[`${chain?.id}`].MultiSig;\n    const res = await contract.getTransactionCount()\n    \n    for(let i=0; i < res; i++){\n      let txn =  await contract.getTransaction(i)\n      \n      setResponse((prevState) => [...prevState, txn]);\n    }\n\n\n  }, [chain]) \n\n  useEffect(() => {\n\n    if(core){\n        fetchData()\n            .catch((err) => setResponse([]))\n    }\n\n  }, [fetchData])\n\n  return response\n\n}\n\nexport default useGetAllMultiSigTxns","import { ethers } from \"ethers\"\nimport { useGetTransactions } from \"../../hooks/multisig/useMultiSig\"\nimport USDA from \"../../protocol/deployments/abi/StablecoinImpl.json\"\nimport MultiSig from \"../../protocol/deployments/abi/MultiSig.json\"\n\n\nfunction Test() {\n\n    let iface = new ethers.utils.Interface(USDA)\n\n    let data = iface.encodeFunctionData(\"mint\", [\"0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2\", ethers.utils.parseEther(\"10\")])\n\n    // let count = useGetTransactions(2)\n\n    console.log('Test', data)\n\n    return (\n        <div>\n\n        </div>\n    )\n}\n\nexport default Test\n","import React, { useState, useEffect, useMemo } from 'react'\nimport {\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  MenuItem\n} from \"@material-ui/core\";\nimport Web3 from 'web3';\nimport { useNetwork } from 'wagmi'\nimport { formatToBN, getBalance } from '../../../utils/formatBalance';\nimport useCore from '../../../hooks/useCore';\nimport ConfirmationStep from '../../../components/ConfirmationStep';\nimport { useWallet } from 'use-wallet';\nimport { BigNumber, ethers, utils } from 'ethers';\nimport useGetOwners from '../../../hooks/useGetOwners';\nimport useSubmitTransaction from '../../../hooks/useSubmitTransaction';\nimport { useAllTransactions, useClearAllTransactions } from '../../../state/transactions/hooks';\nimport useGetAllMultiSigTxns from '../../../hooks/useGetAllMultiSigTxns';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\nimport useSubmit from '../../../hooks/tron/useSubmit';\nimport useGetAllTronTxns from '../../../hooks/tron/useGetAllTronTxns';\nimport { useGetActiveBlockChain } from '../../../state/chains/hooks';\nimport Textfield from '../../../components/Textfield';\nimport { useGetLoader, useUpdateLoader } from '../../../state/application/hooks';\nimport Test from '../Test';\n\nexport const stableCoins = [\n  // {\n  //   label: 'Token',\n  //   chain: 'MaticMumbai'\n  // },\n  // {\n  //   label: 'Token2',\n  //   chain: 'MaticMumbai'\n  // },\n  {\n    label: 'USD-A',\n    chain: 'MaticMumbai',\n    address: \"0x125eDC5cd0eA0453D0485153F7F200C323882B4e\"\n  },\n  {\n    label: \"T20\",\n    chain: 'Neil',\n    contractAdrs: 'TQFw44XRvTyZ9VqxiQwcJ8udYMJ4p5MWUE'\n  }\n]\n\nexport const chains = [\n  {\n    label: 'MaticMumbai',\n    chainID: 'MaticMumbai'\n  },\n  {\n    label: \"Neil\",\n    chainID: 'Neil',\n  }\n]\n\nfunction Mint({mintTxns}) {\n\n  const core = useCore()\n  const {myAccount, provider, _activeNetwork, tokens } = core\n\n  // const allTransactions = useAllTransactions()\n  const currentLoaderState = useGetLoader()\n  const updateLoader = useUpdateLoader()\n  const { chain: chainName} = useNetwork()\n\n  const chain = useGetActiveBlockChain()\n\n  const multiSigTxns = useGetAllMultiSigTxns()\n\n  console.log('multiSigTxns', multiSigTxns)\n  console.log('mintTxns', mintTxns)\n\n  // const {clearAllTransactions} = useClearAllTransactions();\n  // clearAllTransactions()\n\n  const [adddress, setAddress] = useState<string>('')\n  const [amount, setAmount] = useState<string>('')\n  const [stableCoin, setStableCoin] = useState<string>('')\n  const [allTransactions, setAllTransactions] = useState<any>([])\n\n  // let allTx = Object.entries(allTransactions)?.map((key) => key[1])?.filter((tx) => tx.txDetail._typeOfTx == 0)\n  // let allTronTxns = useGetAllTronTxns()\n  // allTronTxns = allTronTxns.filter((tx) => tx._typeOfTx.toNumber() == 0)\n\n  let contractOwners: any = useGetOwners()\n\n  console.log('contractOwners', contractOwners)\n\n  useEffect(() => {\n    setAllTransactions(mintTxns)\n  }, [mintTxns])\n\n  const handleCoinChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStableCoin(event.target.value);\n  };\n\n  const mintTokenAction = useSubmitTransaction(\"mint\", adddress, amount, stableCoin)\n  const submitTronTxnAction = useSubmit(adddress, formatToBN(amount), stableCoin, BigNumber.from('0'))\n\n  const submitTx = async() => {\n    updateLoader(true)\n    if(chain == 'MaticMumbai'){\n      mintTokenAction(() => {},() => {})\n    }\n\n    if(chain == 'Neil') {\n      submitTronTxnAction()\n    }\n  }\n\n  const disableMint = adddress && amount && stableCoin && chain && contractOwners?.includes(myAccount) && !currentLoaderState\n\n  return (\n    <div style={{marginLeft: '260px', marginRight: '20px', position: 'relative',}}>\n      <Test />\n      \n      <Card style={{marginBottom: '30px'}}>\n        <CardContent className='p15'>\n          <Textfield\n            text={'Mint the Stablecoin'}\n            fontSize={'24px'}\n            fontWeight={'bold'}\n            className={'m-b-15'}\n            />\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                helperText=\"This is the address to which token to be minted\"\n                required\n                label=\"Address\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAddress(e.target.value)}\n                value={adddress}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                helperText=\"This is the amount of token to be minted\"\n                required\n                label=\"Amount\"\n                // margin=\"dense\"\n                type=\"text\"\n                onChange={(e:any) => setAmount(e.target.value)}\n                value={amount}\n                fullWidth\n                // variant=\"outlined\"\n                size={'small'}\n              />\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                  helperText=\"This is the token to be minted\"\n                  required\n                  select\n                  label=\"Stablecoin\"\n                  value={stableCoin}\n                  onChange={handleCoinChange}\n                  fullWidth\n                  // variant=\"outlined\"\n                  size='small'\n                >\n                  {Object.entries(tokens[chainName?.id || _activeNetwork]).map((option) => (\n                    <MenuItem key={option[1].symbol} value={option[1].symbol}>\n                      {option[1].symbol}\n                    </MenuItem>\n                  ))}\n                </TextField>           \n            </Grid>\n            <Grid item xs={6}></Grid>\n            <Grid item xs={3}>\n            </Grid>\n            <Grid item xs={3}>\n              <Button\n                onClick={submitTx}\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                disabled={!disableMint}\n                style={{position: 'relative'}}\n              >\n                <div>Submit</div>\n\n              </Button>\n            </Grid>\n            {/* <Grid item xs={4}></Grid> */}\n          </Grid>\n          \n        </CardContent>\n\n      </Card>\n    \n\n      {/* <Card>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Transaction History\n          </Typography>\n        </CardContent>\n      </Card> */}\n      {/* {\n        chain == \"MaticMumbai\" ?\n        <ConfirmationStep allTx={Object.entries(allTransactions).map((key) => key[1])} /> :\n        <ConfirmationStep allTx={allTronTxns} />\n\n      } */}\n      <ConfirmationStep allTransactions={allTransactions} /> \n    </div>\n  )\n}\n\nexport default Mint\n\n","import React from 'react'\n\nfunction Stats() {\n  return (\n    <div style={{marginLeft: '260px'}}>\n      <h1>Statistics</h1>\n    </div>\n  )\n}\n\nexport default Stats","import React, { useEffect, useState } from 'react';\nimport {\n  HashRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport useCore from './hooks/useCore';\nimport { useGetActiveChainId } from './state/chains/hooks';\n\nimport { useAllTransactions } from './state/transactions/hooks';\n\nimport Auth from './views/Auth';\nimport Dashboard from './views/dashboard';\nimport Dashbaord from './views/dashboard';\nimport Admin from './views/dashboard/Admin';\nimport Burn from './views/dashboard/Burn';\nimport Freeze from './views/dashboard/Freeze';\nimport Mint from './views/dashboard/Mint';\nimport Stats from './views/dashboard/Stats';\n\n\nfunction Navigation() {\n  const { provider, contracts, } = useCore()\n\n  const allTransactions = useAllTransactions()\n  console.log(\"navigation allTransactions\", allTransactions)\n  const [mintTxns, setMintTxns] = useState<any>([])\n  const [burnTxns, setBurnTxns] = useState<any>([])\n  const [adminTxns, setAdminTxns] = useState<any>([])\n\n  useEffect(() => {\n    sortTransactions()\n  }, [allTransactions])\n\n  const chaindId = useGetActiveChainId()\n\n  const sortTransactions = async () => {\n    Object.entries(allTransactions).forEach(async (item) => {\n      const { data, from, to, timestamp } = await provider.getTransaction(item[1].hash[0])\n\n      const mutlisigAddr = contracts[chaindId].MultiSig.address.replace('0x', '').toLowerCase()\n      console.log(\"navigation data\", data, mutlisigAddr)\n\n\n      if (data.toLowerCase().includes(mutlisigAddr)) {\n        setAdminTxns(prev => [...prev, item])\n      } else {\n        if (data.includes(\"40c10f19\")) {\n          setMintTxns(prev => [...prev, item])\n        } else {\n          setBurnTxns(prev => [...prev, item])\n        }\n      }\n    })\n  }\n\n  console.log(\"navigation\", adminTxns)\n\n  return (\n    <HashRouter>\n      <div style={{ paddingBottom: '200px', backgroundColor: '#f2e6e6', minHeight: '100vh' }}>\n        <Dashboard />\n        <Routes>\n          <Route path={'/mint'} element={<Mint mintTxns={mintTxns} />} />\n          <Route path={'/burn'} element={<Burn burnTxns={burnTxns} />} />\n          <Route path={'/freeze'} element={<Freeze />} />\n          <Route path={'/admin'} element={<Admin adminTxns={adminTxns} />} />\n          <Route path={'/statistics'} element={<Stats />} />\n        </Routes>\n      </div>\n\n    </HashRouter>\n  );\n}\n\nexport default Navigation\n","import {createReducer, nanoid} from '@reduxjs/toolkit';\n\nimport {addPopup, removePopup, toggleSettingsMenu, toggleWalletModal, updateBlockNumber, loaderVisibile} from './actions';\nimport {INITIAL_APP_STATE} from '../../utils/constants';\n\nexport default createReducer(INITIAL_APP_STATE, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const {chainId, blockNumber} = action.payload;\n      // console.log('reducer state action', state, action)\n \n      if (typeof state.blockNumber[chainId] !== 'number') {\n        console.log('reducer update if', )\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        console.log('reducer update else', )\n\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\n      state.popupList = (key\n          ? state.popupList.filter((popup) => popup.key !== key)\n          : state.popupList\n      ).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, {payload: {key}}) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    })\n    .addCase(loaderVisibile, (state, {payload: {isVisible}}) => {\n      console.log(state.isVisible, isVisible)\n      state.isVisible = isVisible;\n    })\n);\n","import {createReducer} from '@reduxjs/toolkit';\nimport { BigNumber } from 'ethers';\nimport _ from 'lodash';\n\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  saveTxn,\n  SerializableTransactionReceipt,\n  updateTransaction\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  // hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime?: number;\n  confirmedTime?: number;\n  from?: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: \n    {\n      [txIndex: number]: {\n        hash: string,\n        creation?: {\n          // hash: string;\n          approval?: { tokenAddress: string; spender: string };\n          summary?: string;\n          receipt?: SerializableTransactionReceipt;\n          lastCheckedBlockNumber?: number;\n          addedTime?: number;\n          confirmedTime?: number;\n          from?: string;\n        },\n        confirmation?: \n          { \n            // hash: string;\n            from?: string;\n            confirmedTime?: number;\n          }\n        ,\n        execution?: \n          { \n            // hash: string;\n            from?: string;\n            confirmedTime?: number;\n          }\n        ,\n        txDetail: {\n          _numConfirmations: any, \n          _typeOfTx: any, \n          _createdTime: any, \n          _executed: boolean, \n          _value: BigNumber, \n          _token: string, \n          txIndex: any, \n          _executedTime: any, \n          _to: string,\n        },\n        \n      },\n    }\n\n}\n\nexport interface TxnData {\n  hash: string[];\n}\n\n \nexport interface newTxnState {\n  [chainId: number]:\n    {\n      [txIndex: number]: TxnData\n    }\n\n}\n\n\nexport interface DashboardTxnDetails {\n  _numConfirmations: BigNumber, \n  _typeOfTx: BigNumber, \n  _createdTime: BigNumber, \n  _executed: boolean, \n  _value: BigNumber, \n  _token: string, \n  txIndex: BigNumber, \n  _executedTime: BigNumber, \n  _to: string\n}\n\nexport const initialState: newTxnState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      (transactions, {payload: \n        {chainId, txDetail, txIndex, hash, creation, confirmation, execution}}) => {\n        if (transactions[chainId]?.[txIndex]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n        let txs = transactions[chainId] ?? {};\n        // txs[txIndex] = {txDetail, hash, creation, confirmation, execution};\n\n        // let creationTxns = transactions[chainId][txIndex].creation ?? {};\n        // const {hash, approval, summary, from, addedTime, confirmedTime} = creation.txHash\n        // creationTxns[creation.txHash.hash] = {hash, approval, summary, from, addedTime: now(), confirmedTime};\n\n        // let confirmationTxns = transactions[chainId][txIndex].confirmation ?? {};\n        // const {hash: confirmHash, approval: confirmApproval, summary: confirmSummary, from: confirmFrom, addedTime: confirmAddedTime, confirmedTime: confirmConTime} = confirmation.txHash;\n        // confirmationTxns[confirmation.txHash.hash] = {hash: confirmHash, approval: confirmApproval, summary: confirmSummary, from: confirmFrom, addedTime: now(), confirmedTime: confirmConTime}\n\n        // let executionTxns = transactions[chainId][txIndex].execution ?? {};\n        // const {hash: executeHash, approval: executeApproval, summary: executeSummary, from: executeFrom, addedTime: executeAddedTime, confirmedTime: executeConTime} = execution.txHash;\n        // executionTxns[execution.txHash.hash] = {hash: executeHash, approval: executeApproval, summary: executeSummary, from: executeFrom, addedTime: now(), confirmedTime: executeConTime}\n\n        // txs[txIndex] = {creation: creationTxns, confirmation: confirmationTxns, execution: executionTxns, txDetail}\n\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(\n      updateTransaction,\n      (transactions, {payload: \n        {chainId, from, hash, approval, summary, txDetail}}) => {\n        // if (transactions[chainId]?.[hash]) {\n        //   throw Error('Attempted to add existing transaction.');\n        // }\n        \n        // let txs = transactions[chainId] ?? {};\n        // const mappedTxns = Object.entries(txs)\n        // const index = mappedTxns.findIndex(obj => obj[1].txDetail.txIndex == txDetail.txIndex)\n        // mappedTxns.splice(index, 1)\n        // txs = Object.fromEntries(mappedTxns) \n               \n        // txs[hash] = {hash, approval, summary, from, addedTime: now(), txDetail};\n        // transactions[chainId] = txs;\n\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(\n      checkedTransaction,\n      (transactions, {payload: {chainId, hash, blockNumber}}) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (!tx.lastCheckedBlockNumber) {\n          tx.lastCheckedBlockNumber = blockNumber;\n        } else {\n          tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n        }\n      },\n    )\n    .addCase(finalizeTransaction, (transactions, {payload: {chainId, txIndex, from, hash, creation, confirmation, execution}}) => {\n      const tx = transactions[chainId]?.[txIndex];\n      if (!tx) {\n        return;\n      }\n\n      // tx.creation = {receipt: creation.receipt, confirmedTime: Date.now(),}\n\n      // tx.creation.hash.receipt = receipt;\n      // tx.creation.hash.confirmedTime = now();\n    })\n    .addCase(saveTxn, (transactions, {payload: {txIndex, hash, chainId}}) => {\n      let txs = transactions[chainId] ?? {};\n\n      if(_.isEmpty(txs) || !txs[txIndex]){\n        txs[txIndex] = {hash: [hash]}\n      }else {\n        txs[txIndex].hash.push(hash)\n      }\n\n      transactions[chainId] = txs;\n\n    })\n);\n","import {createReducer} from '@reduxjs/toolkit';\n\nimport {ChainIdInitialState, BlockChaianitialState} from '../../utils/chains/constant';\n\nimport {updateChainId, updateBlockchain} from './actions';\n\nexport const chainId = createReducer(ChainIdInitialState, (builder) =>\n    builder\n      .addCase(updateChainId, (chainsConfig, {payload: {chainId}}) => {\n        chainsConfig.active = chainId;\n      })\n  /* .addCase(updateAvailableChains, (chainsConfig, {payload: {chains}}) => {\n     chainsConfig.availableNetworks = chains;\n   }),*/\n);\n\nexport const blockChain = createReducer(BlockChaianitialState, (builder) =>\n    builder\n      .addCase(updateBlockchain, (blockChainConfig, {payload: {chain}}) => {\n        blockChainConfig.active = chain;\n      })\n);\n\n","import {IChainIdInitialState, IBlockChaianitialState} from './interface';\n\nexport const ChainIdInitialState: IChainIdInitialState = {\n  active: 1,\n};\n\nexport const BlockChaianitialState: IBlockChaianitialState = {\n  active: 'MaticMumbai'\n}\n","import {createLogger} from 'redux-logger';\nimport {load, save} from 'redux-localstorage-simple';\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport { composeWithDevTools } from '@redux-devtools/extension';\n\nimport application from './application/reducer';\nimport transactions from './transactions/reducer';\nimport {blockChain, chainId} from './chains/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions', 'slippage'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n    chainId,\n    blockChain,\n  },\n  \n  middleware: [\n    ...getDefaultMiddleware({serializableCheck: false, thunk: false}),\n    save({states: PERSISTED_KEYS}),\n    createLogger(),\n  ]\n  ,\n  preloadedState: load({states: PERSISTED_KEYS}),\n}\n\n);\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import {useCallback, useEffect, useState} from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import {useWallet} from 'use-wallet';\nimport {useDispatch} from 'react-redux';\nimport {useCallback, useEffect, useState} from 'react';\nimport { useNetwork } from 'wagmi'\n\nimport config from '../../config';\nimport {updateBlockNumber} from './actions';\nimport useDebounce from '../../hooks/useDebounce';\nimport {getDefaultProvider} from '../../utils/provider';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport {useGetActiveChainId} from \"../chains/hooks\";\n\nexport default function Updater(): null {\n  // const {ethereum, chainId} = useWallet();\n  const { chain } = useNetwork()\n\n  let id\n  if(chain){\n    id = chain.id\n  }\n  \n  const dispatch = useDispatch();\n  const windowVisible = useIsWindowVisible();\n  const activeChainId = useGetActiveChainId();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId: id,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state: any) => {\n        if (id === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return {chainId: id, blockNumber};\n          return {chainId: id, blockNumber: Math.max(blockNumber, state.blockNumber)};\n        }\n        return state;\n      });\n    },\n    [chain?.id, setState],\n  );\n\n  // The attach/detach listeners.\n  useEffect(() => {\n    if (!window.ethereum || !id|| !windowVisible) return undefined;\n    setState({chainId: chain?.id, blockNumber: null});\n\n    const provider = getDefaultProvider(config[activeChainId]);\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error: any) =>\n        console.error(`Failed to get block number for chainId: ${chain?.id}`, error),\n      );\n\n    provider.on('block', blockNumberCallback);\n\n    return () => {\n      provider.removeListener('block', blockNumberCallback);\n    };\n  }, [dispatch, chain?.id, window.ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  console.log('debouncedState', debouncedState)\n\n  useEffect(() => {\n    console.log('debouncedState', !debouncedState.chainId, !debouncedState.blockNumber, !windowVisible)\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import {useEffect, useState} from 'react';\n\n/**\n * Modified from https://usehooks.com/useDebounce/\n */\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay.\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport { useNetwork, useAccount } from 'wagmi'\n\nimport config from '../../config';\nimport useCore from '../../hooks/useCore';\nimport {getDefaultProvider} from '../../utils/provider';\nimport {useAddPopup, useBlockNumber, useUpdateLoader} from '../application/hooks';\nimport {useGetActiveChainId} from '../chains/hooks';\nimport {AppDispatch, AppState} from '../index';\n\nimport {checkedTransaction, finalizeTransaction} from './actions';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  console.log('shouldCheck', lastBlockNumber, tx)\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // Every 10 blocks if pending for longer than an hour.\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // Every 3 blocks if pending more than 5 minutes.\n    return blocksSinceCheck > 2;\n  } else {\n    // Otherwise every block.\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  // const {chainId, ethereum} = useWallet();\n  const core = useCore()\n\n  const { chain} = useNetwork()\n\n  let chainId\n\n  if(chain){\n    chainId = chain.id\n  }\n\n  const lastBlockNumber = useBlockNumber();\n  const activeChainId = useGetActiveChainId();\n  const updateLoader = useUpdateLoader()\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // Show d on confirm.\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !window.ethereum || !lastBlockNumber) {\n      {\n        console.log('updater if failed', !chainId, !window.ethereum, !lastBlockNumber, lastBlockNumber)\n        return;\n      }\n    }\n\n    const provider = getDefaultProvider(config[activeChainId]);\n\n    Object.entries(transactions)\n      .filter((tx, i) => shouldCheck(lastBlockNumber, {addedTime: Date.now()}))\n      .forEach((tx, i) => {\n\n        const hash = tx[1].hash[tx[1].hash.length - 1]\n\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              console.log(\"receipt if\")\n              dispatch(\n                finalizeTransaction({\n                  hash,\n                  chainId,\n                  txIndex: Number(tx[0]),\n                  from: receipt.from,\n                  creation: {\n                    receipt: {\n                      blockHash: receipt.blockHash,\n                      blockNumber: receipt.blockNumber,\n                      contractAddress: receipt.contractAddress,\n                      from: receipt.from,\n                      status: receipt.status,\n                      to: receipt.to,\n                      transactionHash: receipt.transactionHash,\n                      transactionIndex: receipt.transactionIndex,\n                    }\n                  }\n\n                }),\n              );\n              // console.log(\"loadertest upif\")\n              \n              // updateLoader(false)\n              // addPopup(\n              //   {\n              //     txn: {\n              //       hash,\n              //       success: receipt.status === 1,\n              //       summary: transactions[tx[1].txDetail.txIndex]?.summary,\n              //     },\n              //   },\n              //   hash,\n              // );\n            } else {\n              console.log(\"receipt else\")\n              console.log(\"loader upelse\")\n              updateLoader(false)\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, window.ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","import React from 'react';\n\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater/>\n    <TransactionUpdater/>\n  </>\n);\n\nexport default Updaters;\n","import styled from 'styled-components'\nimport React, {createContext, useCallback, useState} from 'react';\n\nimport {ModalsContext} from '../../utils/interface';\n \nexport const Context = createContext<ModalsContext>({\n  onPresent: (content) => {},\n  onDismiss: () => {},\n})\n\nconst Modals: React.FC = ({children}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [content, setContent] = useState<React.ReactNode>()\n\n  const handlePresent = useCallback((modalContent: React.ReactNode) => {\n    setContent(modalContent)\n    setIsOpen(true)\n  }, [setContent, setIsOpen])\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined)\n    setIsOpen(false)\n  }, [setContent, setIsOpen])\n\n  return (\n    <Context.Provider value={{\n      content,\n      isOpen,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss,\n    }}>\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss}/>\n          {React.isValidElement(content) && React.cloneElement(content)}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  )\n}\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n`;\n\nexport default Modals;\n","import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport Slide from '@material-ui/core/Slide';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {makeStyles, Theme} from '@material-ui/core/styles';\nimport {TransitionProps} from '@material-ui/core/transitions';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\n// import theme from '../../theme';\n// import '../../customCss/Custom-Snackbar.css';\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\nimport config from '../../config';\nimport {PopupContent} from '../../utils/interface';\nimport {useGetActiveChainId} from \"../../state/chains/hooks\";\nimport { useUpdateLoader } from '../../state/application/hooks';\n\ninterface TxButtonProps {\n  notificationCount?: number;\n  index?: number;\n  open?: boolean;\n  content?: PopupContent;\n  handleCancel?: Function;\n}\n\n\nconst CustomizedSnackbars: React.FC<TxButtonProps> = ({\n  open,\n  content,\n  handleCancel,\n}) => {\n\n  const [openSnackbar, setOpen] = React.useState(open);\n\n  const isScucess = content?.txn?.success;\n  const isLoading = content?.txn?.loading;\n  const chainId = useGetActiveChainId();\n  const updateLoader = useUpdateLoader()\n\n  useEffect(() => {\n    setOpen(true)\n    console.log(\"loadertest CustomizedSnackbars\")\n    updateLoader(false)\n  }, [isScucess, isLoading])\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    \n    if (reason === 'clickaway') return;\n\n    setOpen(false);\n    if (handleCancel) handleCancel();\n\n    // setTimeout(() => {\n    //   window.location.reload()\n    // }, 2000)\n  };\n\n  function SlideTransition(props: TransitionProps) {\n    return <Slide {...props} direction=\"left\"/>;\n  }\n\n  const SnackHeader = () => {\n    if (isLoading) {\n      return (\n        <SnackBarInnerContainer>\n          <div className=\"row-left-center\">\n            <div onClick={handleClose} className={'m-r-10'}><WarningIcon /></div>\n            Transaction Pending\n          </div>\n          <div onClick={handleClose}> <CancelIcon /> </div>\n        </SnackBarInnerContainer>\n      )\n    } else if (isScucess) {\n      return (\n        <SnackBarInnerContainer> \n          <div className=\"row-left-center\">\n            <div onClick={handleClose} className={'m-r-10'}><CheckCircleIcon /></div>\n            <div>Transaction Successful</div>\n          </div>\n          <div onClick={handleClose}><CancelIcon /> </div>\n        </SnackBarInnerContainer> \n      )\n    } else {\n      return (\n        <SnackBarInnerContainer style={{background: '#B61500'}}>\n          <div className=\"row-left-center\">\n          <div onClick={handleClose} className={'m-r-10'}><WarningIcon /></div>\n            Transaction Failed\n          </div>\n          <div onClick={handleClose}><CancelIcon /></div>\n        </SnackBarInnerContainer>\n      )\n    }\n  }\n\n  const SnackBody = () => {\n    return (\n      <SnackBarBody>\n        <div>\n          {\n            content?.txn?.success || content?.txn?.loading\n            ? content?.txn?.summary || \"\"\n            : content?.error?.message || \"Error Occured\"\n          }\n        </div>\n        { \n          config[chainId].etherscanUrl !== '' && content?.txn?.hash && (\n            <AnchorTag\n              href={`${config[chainId].etherscanUrl}/tx/${content?.txn?.hash}`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <div className={'m-r-5'}>View on Explorer</div>\n              <div onClick={handleClose} style={{display: 'flex', alignItems: 'center'}}>\n                <TrendingFlatIcon />\n              </div>\n\n            </AnchorTag>\n          )\n        }\n      </SnackBarBody>\n    )\n  }\n\n  return (\n    <div>\n      {openSnackbar && (\n        <Snackbar\n          open={openSnackbar}\n          autoHideDuration={5000}\n          TransitionComponent={SlideTransition}\n          onClose={handleClose}\n          anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n          <SnackBarParent>\n            {SnackHeader()}\n            {SnackBody()}\n          </SnackBarParent>\n        </Snackbar>\n      )}\n    </div>\n  );\n};\n\nconst AnchorTag = styled.a`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin-top: 4px;\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst SnackBarInnerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 50px;\n  padding: 0 12px 0 18px;\n  justify-content: space-between;\n  border-radius: 4px 4px 0 0;\n  background: #3f046d;\n  color: white;\n`;\n\nconst SnackBarBody = styled.div`\n  background: rgba(0, 0, 0, 0.2);\n  backdrop-filter: blur(70px);\n  border-radius: 0 0 4px 4px;\n  padding: 12px 12px 12px 52px;\n  font-weight: 600;\n  font-size: 14px;\n  width: 100%;\n  color: black;\n`;\n\nconst SnackBarParent = styled.div`\n  background: rgba(255, 255, 255, 0.02);\n  backdrop-filter: blur(70px);\n  border-radius: 4px 4px 0 0;\n  border: 1px solid;\n  width: 378px;\n  border-image-source: linear-gradient(180deg,\n  rgba(255, 116, 38, 0.1) 0%,\n  rgba(255, 255, 255, 0) 100%);\n  color: #ffffff;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 20px;\n  @media (max-width: 600px) {\n    width: 100%;\n  }\n`;\n\nexport default CustomizedSnackbars;\n","import React from 'react';\n\nimport TransactionSnackbar from './TransactionSnackbar';\nimport {useActivePopups} from '../../state/application/hooks';\n\nexport default function Popups() {\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      {\n        activePopups.map((p, i) => (\n          <TransactionSnackbar\n            key={i}\n            index={i}\n            notificationCount={i + 1}\n            open\n            content={p.content}\n          />\n        ))\n      }\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { SnackbarProvider } from \"notistack\";\nimport {Provider} from \"react-redux\";\nimport dotenv from 'dotenv'\nimport '@rainbow-me/rainbowkit/styles.css';\nimport {\n  getDefaultWallets,\n  RainbowKitProvider,\n  connectorsForWallets,\n  wallet\n} from '@rainbow-me/rainbowkit';\nimport {\n  chain,\n  configureChains,\n  createClient,\n  WagmiConfig,\n} from 'wagmi';\nimport { alchemyProvider } from 'wagmi/providers/alchemy';\nimport { publicProvider } from 'wagmi/providers/public';\nimport { useAccount, useSwitchNetwork, useNetwork } from 'wagmi'\n\nimport config, { getSupportedChains } from './config';\nimport ProtocolProvider from './context/Provider';\n// import ModalsProvider from './context/Modals'\nimport Navigation from './navigation';\nimport useCore from './hooks/useCore';\nimport Dashbaord from './views/dashboard';\nimport store from './state';\nimport Updaters from './state/Updaters';\nimport ModalsProvider from './context/Modals'\nimport Popups from './components/Popups';\nimport { useGetActiveChainId, useGetUpdateActiveChainId } from './state/chains/hooks';\nimport { ethers } from 'ethers';\ndotenv.config()\n\n\n// Rainbowkit starts\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon, chain.polygonMumbai, chain.goerli],\n  [\n    // alchemyProvider({ apiKey: 'qBs28Tonpldv529ErHD5Lhow4a9rrrCe' }),\n    publicProvider()\n  ]\n);\n\nconst connectors = connectorsForWallets([\n  {\n    groupName: 'Recommended',\n    wallets: [\n      wallet.injected({ chains }),\n      wallet.rainbow({ chains }),\n      wallet.walletConnect({ chains }),\n      wallet.metaMask({chains}),\n      wallet.ledger({chains})\n    ],\n  },\n]);\n\nconst wagmiClient = createClient({\n  autoConnect: true,\n  connectors,\n  provider,\n})\n\nconst WalletProvider = ({ children }: any) => {\n  return (\n    <WagmiConfig client={wagmiClient}>\n      <RainbowKitProvider chains={chains} coolMode={true}>\n        <Updaters/>\n        <ProtocolProvider>\n          <AppContent>{children}</AppContent>\n        </ProtocolProvider>\n      </RainbowKitProvider>\n    </WagmiConfig>\n  );\n}\n\n\n\n// Rainbow kit code ends\n\n\nconst Providers: React.FC = ({children}) => {\n  return (\n    <Provider store={store}>\n      <WalletProvider>{children}</WalletProvider>\n    </Provider>\n\n  );\n};\n\n// const WalletProvider = ({ children }: any) => {\n\n//   return (\n//     <UseWalletProvider\n//       // chainId={config.chainId}\n//       connectors={{\n//         injected: {\n//           chainId: getSupportedChains(),\n//         },\n//         walletconnect: {\n//           chainId: config.chainId,\n//           rpcUrl: config.defaultProvider\n//         }\n//       }}\n//       >\n//         <Updaters/>\n//         <ProtocolProvider>\n//           <AppContent>{children}</AppContent>\n//         </ProtocolProvider>\n\n//     </UseWalletProvider>\n//   );\n// };\n\nconst AppContent: React.FC = ({children}) => {\n\n  const core = useCore()\n  const { chain } = useNetwork()\n  const { isConnected } = useAccount()\n\n  const newprovider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\n  newprovider.on(\"network\", (newNetwork, oldNetwork) => {\n    // When a Provider makes its initial connection, it emits a \"network\"\n    // event with a null oldNetwork along with the newNetwork. So, if the\n    // oldNetwork exists, it represents a changing network\n    if (oldNetwork) {\n        window.location.reload();\n    }\n  });\n\n  console.log('core', core)\n\n  // const {ethereum, chainId} = useWallet();\n  const setChainId = useGetUpdateActiveChainId();\n\n\n  useEffect(() => {\n    if (isConnected) \n      // @ts-ignore\n      setChainId(chain.id)\n  }, [isConnected]);\n\n  if (!window.ethereum) {\n    console.log('no window ethereum')\n    return <div />\n  };\n  if (!core){\n    console.log('no core');\n    return <div />\n  };\n\n  return(\n    <ModalsProvider>\n      <SnackbarProvider\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        maxSnack={2}\n        autoHideDuration={2500}\n      >\n        <>\n          <Popups/>\n          {children}\n        </>\n      </SnackbarProvider>\n    </ModalsProvider>\n  )\n}\n\nfunction App() {\n\n  return (\n    <Providers>\n      <Navigation />\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/components/confirmation.css'\nimport './styles/common.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}